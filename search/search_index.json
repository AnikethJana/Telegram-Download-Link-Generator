{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"StreamBot","text":"<ul> <li> <p> Telegram File to Link Generator</p> <p>Instantly convert Telegram files to direct download links with StreamBot.</p> <p> Get started</p> </li> <li> <p> High Performance Architecture</p> <p>Built with a multi-client architecture for maximum speed and reliability.</p> <p> Architecture</p> </li> <li> <p> Powerful Features</p> <p>Rate limiting, bandwidth management, and force subscription built-in.</p> <p> Features</p> </li> <li> <p> REST API</p> <p>Integrate StreamBot's capabilities with your applications.</p> <p> API Reference</p> </li> </ul>"},{"location":"#what-is-streambot","title":"What is StreamBot?","text":"<p>StreamBot is a high-performance Telegram bot that generates direct download links for files sent to it. It's built with a modern asynchronous Python architecture featuring multi-client support, bandwidth management, and rate limiting.</p> <p>Whether you're sharing media, documents, or any other files, StreamBot makes it simple to distribute content via direct links without requiring recipients to use Telegram.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udd17 Direct Download Links - Convert Telegram files to direct download URLs</li> <li>\u26a1 High Performance - Multi-client architecture with load balancing</li> <li>\ud83d\udcca Bandwidth Management - Built-in bandwidth tracking and limits</li> <li>\ud83d\udee1\ufe0f Rate Limiting - User-based rate limiting with configurable quotas</li> <li>\ud83d\udd12 Force Subscription - Optional channel subscription requirement</li> <li>\ud83d\udcf1 Web Interface - RESTful API with real-time status monitoring</li> <li>\ud83e\uddf9 Auto Cleanup - Automatic cleanup of expired links and resources</li> <li>\ud83d\udcc8 Admin Tools - Advanced logging, memory monitoring, and broadcast features</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Getting started with StreamBot is easy:</p> <pre><code># Clone the repository\ngit clone https://github.com/yourusername/StreamBot.git\ncd StreamBot\n\n# Install dependencies\npip install -r requirements.txt\n\n# Configure environment\ncp .env.example .env\n# Edit .env with your configuration\n\n# Run the bot\npython -m StreamBot\n</code></pre> <p>For complete setup instructions, see the Installation Guide.</p>"},{"location":"#how-it-works","title":"How It Works","text":"<ol> <li>User sends a file to the StreamBot Telegram bot</li> <li>Bot processes the file and stores it securely</li> <li>Direct download link is generated and sent to the user</li> <li>Recipients can download the file directly via the link without needing Telegram</li> </ol>"},{"location":"#project-status","title":"Project Status","text":"<p>StreamBot is actively maintained and regularly updated with new features and improvements.</p> <p> </p>"},{"location":"#support-community","title":"Support &amp; Community","text":"<ul> <li>GitHub Issues: Report bugs or request features</li> <li>GitHub Discussions: Ask questions and share ideas</li> <li>Telegram Channel: Get updates and announcements </li> </ul>"},{"location":"about/acknowledgements/","title":"Acknowledgements","text":"<p>StreamBot is built on the shoulders of many amazing open source projects and contributors. We'd like to acknowledge everyone who has made this project possible.</p>"},{"location":"about/acknowledgements/#core-dependencies","title":"Core Dependencies","text":"<p>We're grateful to the maintainers of these essential libraries:</p>"},{"location":"about/acknowledgements/#telegram-integration","title":"Telegram Integration","text":"<ul> <li>Pyrogram - Modern, elegant and powerful Telegram MTProto API framework</li> <li>TgCrypto - Fast and secure cryptographic library for Pyrogram</li> </ul>"},{"location":"about/acknowledgements/#web-framework","title":"Web Framework","text":"<ul> <li>aiohttp - Async HTTP client/server framework for asyncio and Python</li> <li>aiohttp-cors - CORS support for aiohttp</li> </ul>"},{"location":"about/acknowledgements/#database","title":"Database","text":"<ul> <li>PyMongo - The official MongoDB driver for Python</li> <li>MongoDB - The database platform for modern applications</li> </ul>"},{"location":"about/acknowledgements/#utilities","title":"Utilities","text":"<ul> <li>python-dotenv - Environment variable management</li> <li>psutil - System and process monitoring utilities</li> </ul>"},{"location":"about/acknowledgements/#documentation","title":"Documentation","text":"<p>Our documentation is powered by:</p> <ul> <li>MkDocs - Static site generator for project documentation</li> <li>Material for MkDocs - Beautiful, modern documentation theme</li> <li>Mermaid - Diagram and flowchart generation</li> </ul>"},{"location":"about/acknowledgements/#development-tools","title":"Development Tools","text":"<ul> <li>Python - The programming language that powers StreamBot</li> <li>Docker - Containerization platform</li> <li>GitHub - Version control and project hosting</li> <li>GitHub Actions - CI/CD automation</li> </ul>"},{"location":"about/acknowledgements/#contributors","title":"Contributors","text":"<p>Thank you to everyone who has contributed to StreamBot:</p>"},{"location":"about/acknowledgements/#code-contributors","title":"Code Contributors","text":"<ul> <li>Core Team - Initial development and architecture</li> <li>Community Contributors - Bug fixes, features, and improvements</li> </ul>"},{"location":"about/acknowledgements/#documentation-contributors","title":"Documentation Contributors","text":"<ul> <li>Writers - Documentation improvements and clarifications</li> <li>Translators - Multi-language support (future)</li> <li>Reviewers - Quality assurance and feedback</li> </ul>"},{"location":"about/acknowledgements/#community-support","title":"Community Support","text":"<ul> <li>Issue Reporters - Bug reports and feature requests</li> <li>Testers - Quality assurance and feedback</li> <li>Users - Adoption and real-world testing</li> </ul>"},{"location":"about/acknowledgements/#special-thanks","title":"Special Thanks","text":""},{"location":"about/acknowledgements/#inspiration","title":"Inspiration","text":"<p>StreamBot was inspired by the need for simple, reliable file sharing solutions and the amazing capabilities of the Telegram Bot API.</p>"},{"location":"about/acknowledgements/#open-source-community","title":"Open Source Community","text":"<p>We're grateful to the broader open source community for creating the ecosystem that makes projects like StreamBot possible.</p>"},{"location":"about/acknowledgements/#users-and-adopters","title":"Users and Adopters","text":"<p>Thank you to everyone who uses StreamBot, reports issues, and helps make it better through feedback and contributions.</p>"},{"location":"about/acknowledgements/#recognition","title":"Recognition","text":""},{"location":"about/acknowledgements/#hall-of-fame","title":"Hall of Fame","text":"<p>This section will highlight significant contributors as the project grows.</p>"},{"location":"about/acknowledgements/#contributors_1","title":"Contributors","text":"<p>All contributors are automatically recognized in our GitHub Contributors page.</p>"},{"location":"about/acknowledgements/#how-to-contribute","title":"How to Contribute","text":"<p>Interested in being acknowledged here? Check out our Contributing Guide to get started!</p>"},{"location":"about/acknowledgements/#ways-to-contribute","title":"Ways to Contribute","text":"<ul> <li>Code contributions - Bug fixes and new features</li> <li>Documentation - Improvements and translations</li> <li>Community support - Helping users and answering questions</li> <li>Testing - Quality assurance and bug reporting</li> <li>Feedback - Feature suggestions and usability improvements</li> </ul>"},{"location":"about/acknowledgements/#licensing","title":"Licensing","text":"<p>All contributions to StreamBot are made under the MIT License, ensuring the project remains free and open source.</p> <p>If you feel your contribution should be specifically acknowledged here, please don't hesitate to open an issue or submit a pull request. </p>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to StreamBot will be documented in this file.</p>"},{"location":"about/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>Comprehensive MkDocs documentation system</li> <li>Professional GitHub Pages deployment  </li> <li>Enhanced API documentation with examples</li> <li>Improved configuration management guide</li> </ul>"},{"location":"about/changelog/#changed","title":"Changed","text":"<ul> <li>Restructured documentation for better navigation</li> <li>Updated README with proper documentation links</li> <li>Cleaned up code comments for better readability</li> </ul>"},{"location":"about/changelog/#fixed","title":"Fixed","text":"<ul> <li>Documentation structure and completeness</li> <li>Missing placeholder content</li> <li>Broken internal links</li> </ul>"},{"location":"about/changelog/#100-2024-01-15","title":"[1.0.0] - 2024-01-15","text":""},{"location":"about/changelog/#added_1","title":"Added","text":"<ul> <li>Initial release of StreamBot</li> <li>Multi-client Telegram bot architecture</li> <li>Direct download link generation</li> <li>MongoDB database integration</li> <li>Rate limiting and bandwidth management</li> <li>Force subscription feature</li> <li>Admin commands and monitoring</li> <li>RESTful API with status endpoints</li> </ul> <p>This is the initial release of StreamBot with all core features. </p>"},{"location":"about/license/","title":"License","text":"<p>StreamBot is open source software released under the MIT License.</p>"},{"location":"about/license/#mit-license","title":"MIT License","text":"<pre><code>MIT License\n\nCopyright (c) 2023-Present StreamBot Team\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"about/license/#what-this-means","title":"What This Means","text":"<p>The MIT License is a permissive open source license that allows you to:</p> <ul> <li>\u2705 Use the software for any purpose, including commercial use</li> <li>\u2705 Modify the source code to fit your needs</li> <li>\u2705 Distribute copies of the software</li> <li>\u2705 Sublicense the software under different terms</li> <li>\u2705 Sell copies or modifications of the software</li> </ul>"},{"location":"about/license/#requirements","title":"Requirements","text":"<p>When using StreamBot, you must:</p> <ul> <li>\ud83d\udccb Include the license notice in any copies or substantial portions</li> <li>\ud83d\udccb Include the copyright notice in any copies or substantial portions</li> </ul>"},{"location":"about/license/#limitations","title":"Limitations","text":"<p>The license provides:</p> <ul> <li>\u274c No warranty - the software is provided \"as is\"</li> <li>\u274c No liability - authors are not liable for any damages</li> <li>\u274c No trademark rights - you cannot use the StreamBot name or trademarks</li> </ul>"},{"location":"about/license/#third-party-licenses","title":"Third-Party Licenses","text":"<p>StreamBot uses several open source libraries, each with their own licenses:</p>"},{"location":"about/license/#python-dependencies","title":"Python Dependencies","text":"Package License Purpose Pyrogram LGPL-3.0 Telegram client library aiohttp Apache-2.0 Async HTTP server pymongo Apache-2.0 MongoDB driver python-dotenv BSD-3-Clause Environment file support"},{"location":"about/license/#documentation-dependencies","title":"Documentation Dependencies","text":"Package License Purpose MkDocs BSD-2-Clause Documentation generator Material for MkDocs MIT Documentation theme"},{"location":"about/license/#contributing","title":"Contributing","text":"<p>By contributing to StreamBot, you agree that your contributions will be licensed under the same MIT License that covers the project.</p>"},{"location":"about/license/#license-questions","title":"License Questions","text":"<p>If you have questions about the license or need clarification:</p> <ul> <li>Check the full license text</li> <li>Review MIT License FAQ</li> <li>Open an issue on GitHub</li> </ul> <p>For the complete and authoritative license text, please refer to the LICENSE file in the project repository. </p>"},{"location":"api/authentication/","title":"API Authentication","text":"<p>StreamBot uses token-based authentication for accessing administrative API endpoints. This guide explains how to obtain and use authentication tokens.</p>"},{"location":"api/authentication/#authentication-methods","title":"Authentication Methods","text":""},{"location":"api/authentication/#1-admin-token-authentication","title":"1. Admin Token Authentication","text":"<p>For administrative endpoints, you need to provide an admin token in the request headers.</p> <pre><code>curl -H \"Authorization: Bearer YOUR_ADMIN_TOKEN\" \\\n     https://your-streambot-domain.com/api/info\n</code></pre>"},{"location":"api/authentication/#2-no-authentication-public-endpoints","title":"2. No Authentication (Public Endpoints)","text":"<p>Some endpoints like file downloads don't require authentication:</p> <pre><code>curl https://your-streambot-domain.com/dl/file_id_here\n</code></pre>"},{"location":"api/authentication/#obtaining-admin-tokens","title":"Obtaining Admin Tokens","text":""},{"location":"api/authentication/#method-1-environment-configuration","title":"Method 1: Environment Configuration","text":"<p>The primary admin token is configured in your <code>.env</code> file:</p> <pre><code># Admin Configuration\nADMIN_IDS=123456789,987654321\nJWT_SECRET=your_secure_jwt_secret_here\n</code></pre>"},{"location":"api/authentication/#method-2-generate-token-via-bot","title":"Method 2: Generate Token via Bot","text":"<p>If you're configured as an admin user, you can generate an API token through the Telegram bot:</p> <ol> <li>Send <code>/token</code> command to the bot</li> <li>The bot will generate a secure API token for you</li> <li>Use this token in your API requests</li> </ol>"},{"location":"api/authentication/#using-authentication-tokens","title":"Using Authentication Tokens","text":""},{"location":"api/authentication/#request-headers","title":"Request Headers","text":"<p>Include the token in the <code>Authorization</code> header:</p> <pre><code>GET /api/info HTTP/1.1\nHost: your-streambot-domain.com\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\nContent-Type: application/json\n</code></pre>"},{"location":"api/authentication/#example-requests","title":"Example Requests","text":""},{"location":"api/authentication/#python","title":"Python","text":"<pre><code>import requests\n\nheaders = {\n    'Authorization': 'Bearer YOUR_ADMIN_TOKEN',\n    'Content-Type': 'application/json'\n}\n\nresponse = requests.get(\n    'https://your-streambot-domain.com/api/info',\n    headers=headers\n)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Bot status: {data['status']}\")\nelse:\n    print(f\"Error: {response.status_code}\")\n</code></pre>"},{"location":"api/authentication/#javascript","title":"JavaScript","text":"<pre><code>const token = 'YOUR_ADMIN_TOKEN';\n\nconst response = await fetch('https://your-streambot-domain.com/api/info', {\n    method: 'GET',\n    headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n    }\n});\n\nif (response.ok) {\n    const data = await response.json();\n    console.log('Bot status:', data.status);\n} else {\n    console.error('Error:', response.status);\n}\n</code></pre>"},{"location":"api/authentication/#curl","title":"cURL","text":"<pre><code>curl -X GET \\\n  https://your-streambot-domain.com/api/info \\\n  -H 'Authorization: Bearer YOUR_ADMIN_TOKEN' \\\n  -H 'Content-Type: application/json'\n</code></pre>"},{"location":"api/authentication/#token-security","title":"Token Security","text":""},{"location":"api/authentication/#best-practices","title":"Best Practices","text":"<ol> <li>Keep tokens secure: Never expose tokens in client-side code</li> <li>Use environment variables: Store tokens in environment variables, not in code</li> <li>Regular rotation: Rotate tokens periodically for security</li> <li>Limited scope: Use the minimum required permissions</li> </ol>"},{"location":"api/authentication/#token-storage","title":"Token Storage","text":"<pre><code>import os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n# Store token in environment variable\nADMIN_TOKEN = os.getenv('STREAMBOT_ADMIN_TOKEN')\n\ndef make_authenticated_request(endpoint):\n    headers = {'Authorization': f'Bearer {ADMIN_TOKEN}'}\n    response = requests.get(f'https://your-domain.com/api/{endpoint}', headers=headers)\n    return response.json()\n</code></pre>"},{"location":"api/authentication/#environment-file-example","title":"Environment File Example","text":"<pre><code># .env file\nSTREAMBOT_ADMIN_TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\nSTREAMBOT_API_BASE_URL=https://your-streambot-domain.com\n</code></pre>"},{"location":"api/authentication/#api-endpoints-by-authentication-level","title":"API Endpoints by Authentication Level","text":""},{"location":"api/authentication/#public-endpoints-no-authentication","title":"Public Endpoints (No Authentication)","text":"Endpoint Description <code>GET /dl/{file_id}</code> Download file <code>GET /</code> Health check"},{"location":"api/authentication/#admin-endpoints-authentication-required","title":"Admin Endpoints (Authentication Required)","text":"Endpoint Description <code>GET /api/info</code> Bot information and statistics <code>GET /api/logs</code> Access logs <code>GET /api/users</code> User statistics <code>POST /api/broadcast</code> Send broadcast message <code>DELETE /api/cleanup</code> Clean up expired files"},{"location":"api/authentication/#error-handling","title":"Error Handling","text":""},{"location":"api/authentication/#authentication-errors","title":"Authentication Errors","text":""},{"location":"api/authentication/#401-unauthorized","title":"401 Unauthorized","text":"<pre><code>{\n    \"error\": \"Unauthorized\",\n    \"code\": 401,\n    \"message\": \"Valid authentication token required\"\n}\n</code></pre> <p>Causes: - Missing Authorization header - Invalid token format - Expired token - Revoked token</p>"},{"location":"api/authentication/#403-forbidden","title":"403 Forbidden","text":"<pre><code>{\n    \"error\": \"Forbidden\",\n    \"code\": 403,\n    \"message\": \"Insufficient permissions\"\n}\n</code></pre> <p>Causes: - Valid token but insufficient permissions - User not in admin list - IP address restrictions</p>"},{"location":"api/authentication/#handling-authentication-errors","title":"Handling Authentication Errors","text":"<pre><code>import requests\n\ndef make_api_request(endpoint, token):\n    headers = {'Authorization': f'Bearer {token}'}\n\n    try:\n        response = requests.get(\n            f'https://your-domain.com/api/{endpoint}',\n            headers=headers,\n            timeout=30\n        )\n\n        if response.status_code == 401:\n            print(\"Authentication failed. Please check your token.\")\n            return None\n        elif response.status_code == 403:\n            print(\"Access denied. Insufficient permissions.\")\n            return None\n        elif response.status_code == 200:\n            return response.json()\n        else:\n            print(f\"API error: {response.status_code}\")\n            return None\n\n    except requests.RequestException as e:\n        print(f\"Request failed: {e}\")\n        return None\n</code></pre>"},{"location":"api/authentication/#token-management","title":"Token Management","text":""},{"location":"api/authentication/#token-information","title":"Token Information","text":"<p>Tokens contain the following information:</p> <ul> <li>User ID: Telegram user ID of the token owner</li> <li>Permissions: List of allowed actions</li> <li>Expiration: Token expiry time (if applicable)</li> <li>Issue time: When the token was created</li> </ul>"},{"location":"api/authentication/#verifying-token","title":"Verifying Token","text":"<p>You can verify your token by calling the info endpoint:</p> <pre><code>curl -H \"Authorization: Bearer YOUR_TOKEN\" \\\n     https://your-streambot-domain.com/api/info\n</code></pre> <p>If the token is valid, you'll receive bot information. If invalid, you'll get a 401 error.</p>"},{"location":"api/authentication/#revoking-tokens","title":"Revoking Tokens","text":"<p>To revoke a token:</p> <ol> <li>Via Bot: Send <code>/revoke_token</code> command to the Telegram bot</li> <li>Via Environment: Remove/change the JWT_SECRET in your <code>.env</code> file (invalidates all tokens)</li> <li>Via Admin Panel: Use the admin API to revoke specific tokens</li> </ol>"},{"location":"api/authentication/#rate-limiting","title":"Rate Limiting","text":"<p>Authenticated requests are subject to rate limiting:</p> <ul> <li>Admin users: 100 requests per minute</li> <li>Regular users: 10 requests per minute</li> <li>Global: 1000 requests per minute across all users</li> </ul>"},{"location":"api/authentication/#rate-limit-headers","title":"Rate Limit Headers","text":"<p>Response headers include rate limit information:</p> <pre><code>HTTP/1.1 200 OK\nX-RateLimit-Limit: 100\nX-RateLimit-Remaining: 95\nX-RateLimit-Reset: 1640995200\n</code></pre>"},{"location":"api/authentication/#handling-rate-limits","title":"Handling Rate Limits","text":"<pre><code>import time\n\ndef api_call_with_rate_limit(endpoint, token):\n    headers = {'Authorization': f'Bearer {token}'}\n\n    response = requests.get(\n        f'https://your-domain.com/api/{endpoint}',\n        headers=headers\n    )\n\n    if response.status_code == 429:  # Rate limited\n        reset_time = int(response.headers.get('X-RateLimit-Reset', 0))\n        wait_time = max(0, reset_time - int(time.time()))\n\n        print(f\"Rate limited. Waiting {wait_time} seconds...\")\n        time.sleep(wait_time + 1)\n\n        # Retry the request\n        return api_call_with_rate_limit(endpoint, token)\n\n    return response\n</code></pre>"},{"location":"api/authentication/#security-considerations","title":"Security Considerations","text":""},{"location":"api/authentication/#token-transmission","title":"Token Transmission","text":"<ul> <li>Always use HTTPS for API requests</li> <li>Never include tokens in URLs or logs</li> <li>Use secure headers for token transmission</li> </ul>"},{"location":"api/authentication/#token-storage_1","title":"Token Storage","text":"<ul> <li>Store tokens securely (encrypted if possible)</li> <li>Don't commit tokens to version control</li> <li>Use environment variables or secure key stores</li> </ul>"},{"location":"api/authentication/#monitoring","title":"Monitoring","text":"<p>Monitor for: - Unusual API access patterns - Failed authentication attempts - Token usage from unexpected IP addresses</p> <pre><code># Example: Logging authentication events\nimport logging\n\ndef log_api_access(endpoint, success, user_id=None):\n    if success:\n        logging.info(f\"API access: {endpoint} by user {user_id}\")\n    else:\n        logging.warning(f\"Failed API access attempt: {endpoint}\")\n</code></pre>"},{"location":"api/endpoints/","title":"API Endpoints Reference","text":"<p>This page provides detailed documentation for all available StreamBot API endpoints.</p>"},{"location":"api/endpoints/#system-information","title":"System Information","text":""},{"location":"api/endpoints/#get-apiinfo","title":"GET <code>/api/info</code>","text":"<p>Returns comprehensive bot status and configuration information.</p> <p>Authentication: None required</p> <p>Request: <pre><code>GET /api/info HTTP/1.1\nHost: yourdomain.com\nAccept: application/json\n</code></pre></p> <p>Response (Success - 200): <pre><code>{\n  \"status\": \"ok\",\n  \"bot_status\": \"connected\",\n  \"bot_info\": {\n    \"id\": 123456789,\n    \"username\": \"YourBotName\",\n    \"first_name\": \"StreamBot\",\n    \"mention\": \"@YourBotName\"\n  },\n  \"features\": {\n    \"force_subscribe\": true,\n    \"force_subscribe_channel_id\": -1001234567890,\n    \"link_expiry_enabled\": true,\n    \"link_expiry_duration_seconds\": 86400,\n    \"link_expiry_duration_human\": \"24 hours\"\n  },\n  \"bandwidth_info\": {\n    \"limit_gb\": 100,\n    \"used_gb\": 45.234,\n    \"used_bytes\": 48573440000,\n    \"month\": \"2024-01\",\n    \"limit_enabled\": true,\n    \"remaining_gb\": 54.766\n  },\n  \"uptime\": \"2d 14h 32m 18s\",\n  \"server_time_utc\": \"2024-01-15T14:30:45.123456Z\",\n  \"totaluser\": 1250,\n  \"github_repo\": \"https://github.com/yourusername/StreamBot\"\n}\n</code></pre></p> <p>Response (Error - 500): <pre><code>{\n  \"status\": \"error\",\n  \"bot_status\": \"disconnected\",\n  \"message\": \"Bot client is not currently connected to Telegram.\",\n  \"uptime\": \"0s\",\n  \"totaluser\": 0,\n  \"bandwidth_info\": {\n    \"limit_enabled\": false,\n    \"error\": \"Failed to retrieve bandwidth data\"\n  }\n}\n</code></pre></p> <p>Response Fields:</p> Field Type Description <code>status</code> string API response status (<code>ok</code> or <code>error</code>) <code>bot_status</code> string Telegram bot connection status <code>bot_info</code> object Bot identity information <code>features</code> object Enabled features and their configuration <code>bandwidth_info</code> object Current bandwidth usage and limits <code>uptime</code> string Human-readable bot uptime <code>server_time_utc</code> string Current server time in UTC ISO format <code>totaluser</code> integer Total number of registered users <code>github_repo</code> string Repository URL (if configured)"},{"location":"api/endpoints/#log-access","title":"Log Access","text":""},{"location":"api/endpoints/#get-apilogs","title":"GET <code>/api/logs</code>","text":"<p>Access application logs with filtering and pagination support.</p> <p>Authentication: Token required (<code>LOGS_ACCESS_TOKEN</code>)</p> <p>Request: <pre><code>GET /api/logs?token=your_token&amp;level=ERROR&amp;limit=50&amp;page=1 HTTP/1.1\nHost: yourdomain.com\nAccept: application/json\n</code></pre></p> <p>Query Parameters:</p> Parameter Type Default Description <code>token</code> string - Authentication token (required) <code>level</code> string <code>ALL</code> Log level filter (<code>ALL</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>CRITICAL</code>) <code>limit</code> integer <code>100</code> Lines per page (max 1000) <code>page</code> integer <code>1</code> Page number (starts at 1) <code>filter</code> string - Text filter for log content <p>Response (Success - 200): <pre><code>{\n  \"status\": \"ok\",\n  \"file_info\": {\n    \"path\": \"tgdlbot.log\",\n    \"size_bytes\": 2048576,\n    \"size_human\": \"2.0 MB\",\n    \"last_modified\": \"2024-01-15T14:30:45.123456\"\n  },\n  \"pagination\": {\n    \"page\": 1,\n    \"limit\": 50,\n    \"total_pages\": 25,\n    \"total_matching_lines\": 1234\n  },\n  \"filter\": {\n    \"level\": \"ERROR\",\n    \"text\": null\n  },\n  \"logs\": [\n    \"2024-01-15 14:30:45,123 - StreamBot.web.web - ERROR - Download failed for message 12345: Network timeout\",\n    \"2024-01-15 14:25:30,456 - StreamBot.bot - ERROR - Failed to process file from user 67890: File too large\"\n  ]\n}\n</code></pre></p> <p>Response (Error - 401): <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Unauthorized access\"\n}\n</code></pre></p> <p>Response (Error - 400): <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Invalid page number\"\n}\n</code></pre></p>"},{"location":"api/endpoints/#file-downloads","title":"File Downloads","text":""},{"location":"api/endpoints/#get-dlencoded_id","title":"GET <code>/dl/{encoded_id}</code>","text":"<p>Download files via generated download links.</p> <p>Authentication: None (uses encoded file IDs for security)</p> <p>Request: <pre><code>GET /dl/VGhpcyBpcyBhIGZha2UgZW5jb2RlZCBpZA HTTP/1.1\nHost: yourdomain.com\nRange: bytes=0-1023\nUser-Agent: Mozilla/5.0 (compatible)\n</code></pre></p> <p>Path Parameters:</p> Parameter Type Description <code>encoded_id</code> string Base64-encoded message ID with security transformation <p>Request Headers:</p> Header Required Description <code>Range</code> No HTTP range for partial content (e.g., <code>bytes=0-1023</code>) <code>User-Agent</code> No Client identification <p>Response (Success - 200/206): <pre><code>HTTP/1.1 206 Partial Content\nContent-Type: application/pdf\nContent-Length: 1024\nContent-Range: bytes 0-1023/2048576\nContent-Disposition: attachment; filename=\"document.pdf\"\nAccept-Ranges: bytes\n\n[Binary file content]\n</code></pre></p> <p>Response Headers:</p> Header Description <code>Content-Type</code> File MIME type <code>Content-Length</code> Content size in bytes <code>Content-Disposition</code> Download filename <code>Accept-Ranges</code> Range request support (<code>bytes</code>) <code>Content-Range</code> Range information (for partial content) <p>Error Responses:</p> <p>404 - File Not Found: <pre><code>{\n  \"error\": \"File link is invalid or the file has been deleted.\"\n}\n</code></pre></p> <p>410 - Link Expired: <pre><code>{\n  \"error\": \"This download link has expired (valid for 24 hours).\"\n}\n</code></pre></p> <p>429 - Rate Limited: <pre><code>{\n  \"error\": \"Rate limited by Telegram. Please try again in 30 seconds.\"\n}\n</code></pre></p> <p>503 - Service Unavailable: <pre><code>{\n  \"error\": \"Bot service temporarily overloaded. Please try again shortly.\"\n}\n</code></pre></p>"},{"location":"api/endpoints/#error-handling","title":"Error Handling","text":""},{"location":"api/endpoints/#common-error-responses","title":"Common Error Responses","text":"<p>All endpoints may return these common errors:</p> <p>400 - Bad Request: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Invalid request parameters\",\n  \"error_code\": \"BAD_REQUEST\"\n}\n</code></pre></p> <p>401 - Unauthorized: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Authentication required\",\n  \"error_code\": \"UNAUTHORIZED\"\n}\n</code></pre></p> <p>403 - Forbidden: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Access forbidden\",\n  \"error_code\": \"FORBIDDEN\"\n}\n</code></pre></p> <p>429 - Too Many Requests: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Rate limit exceeded\",\n  \"error_code\": \"RATE_LIMITED\",\n  \"retry_after\": 60\n}\n</code></pre></p> <p>500 - Internal Server Error: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Internal server error\",\n  \"error_code\": \"INTERNAL_ERROR\"\n}\n</code></pre></p>"},{"location":"api/endpoints/#rate-limiting-headers","title":"Rate Limiting Headers","text":"<p>All responses include rate limiting information:</p> <pre><code>X-RateLimit-Limit: 60\nX-RateLimit-Remaining: 45\nX-RateLimit-Reset: 1642262400\nRetry-After: 60\n</code></pre> Header Description <code>X-RateLimit-Limit</code> Maximum requests per window <code>X-RateLimit-Remaining</code> Remaining requests in current window <code>X-RateLimit-Reset</code> Unix timestamp when limit resets <code>Retry-After</code> Seconds to wait before retrying (when rate limited)"},{"location":"api/endpoints/#usage-examples","title":"Usage Examples","text":""},{"location":"api/endpoints/#curl-examples","title":"cURL Examples","text":"<pre><code># Get bot information\ncurl -X GET \"https://yourdomain.com/api/info\"\n\n# Get error logs with pagination\ncurl -X GET \"https://yourdomain.com/api/logs\" \\\n  -G \\\n  -d \"token=your_access_token\" \\\n  -d \"level=ERROR\" \\\n  -d \"limit=50\" \\\n  -d \"page=1\"\n\n# Download a file\ncurl -X GET \"https://yourdomain.com/dl/encoded_id/filename.pdf\" \\\n  -o \"downloaded_file.pdf\"\n\n# Download with range request (first 1024 bytes)\ncurl -X GET \"https://yourdomain.com/dl/encoded_id/filename.pdf\" \\\n  -H \"Range: bytes=0-1023\" \\\n  -o \"partial_file.pdf\"\n</code></pre>"},{"location":"api/endpoints/#python-examples","title":"Python Examples","text":"<pre><code>import requests\n\n# Get bot information\nresponse = requests.get('https://yourdomain.com/api/info')\ndata = response.json()\nprint(f\"Bot status: {data['bot_status']}\")\n\n# Get logs (admin only)\nresponse = requests.get('https://yourdomain.com/api/logs', params={\n    'token': 'your_token',\n    'level': 'ERROR',\n    'limit': 50\n})\nlogs = response.json()\n\n# Download file with progress\ndef download_file(url, filename):\n    response = requests.get(url, stream=True)\n    total_size = int(response.headers.get('Content-Length', 0))\n\n    with open(filename, 'wb') as f:\n        downloaded = 0\n        for chunk in response.iter_content(chunk_size=8192):\n            f.write(chunk)\n            downloaded += len(chunk)\n            progress = (downloaded / total_size) * 100\n            print(f\"Progress: {progress:.1f}%\")\n</code></pre>"},{"location":"api/endpoints/#javascript-examples","title":"JavaScript Examples","text":"<pre><code>// Get bot information\nasync function getBotInfo() {\n    try {\n        const response = await fetch('https://yourdomain.com/api/info');\n        const data = await response.json();\n        console.log('Bot info:', data);\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\n// Download file with progress tracking\nasync function downloadFile(url, filename) {\n    const response = await fetch(url);\n    const contentLength = response.headers.get('Content-Length');\n    const total = parseInt(contentLength, 10);\n\n    const reader = response.body.getReader();\n    let downloaded = 0;\n\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        downloaded += value.length;\n        const progress = (downloaded / total) * 100;\n        console.log(`Progress: ${progress.toFixed(1)}%`);\n    }\n}\n</code></pre> <p>For more integration examples, see the Examples section. </p>"},{"location":"api/examples/","title":"API Examples","text":"<p>This page provides practical examples of how to use the StreamBot API in various programming languages.</p>"},{"location":"api/examples/#authentication","title":"Authentication","text":"<p>Most API endpoints require authentication. You can authenticate using an admin token in the headers:</p> <pre><code>curl -H \"Authorization: Bearer YOUR_ADMIN_TOKEN\" \\\n     https://your-streambot-domain.com/api/info\n</code></pre>"},{"location":"api/examples/#download-file","title":"Download File","text":""},{"location":"api/examples/#example-download-a-file-using-the-download-endpoint","title":"Example: Download a file using the download endpoint","text":"<pre><code>curl -o downloaded_file.pdf \\\n     https://your-streambot-domain.com/dl/file_id_here\n</code></pre>"},{"location":"api/examples/#python-example","title":"Python Example","text":"<pre><code>import requests\n\ndef download_file(file_id, output_path):\n    \"\"\"Download a file from StreamBot\"\"\"\n    url = f\"https://your-streambot-domain.com/dl/{file_id}\"\n\n    response = requests.get(url, stream=True)\n    response.raise_for_status()\n\n    with open(output_path, 'wb') as f:\n        for chunk in response.iter_content(chunk_size=8192):\n            f.write(chunk)\n\n    print(f\"Downloaded file to {output_path}\")\n\n# Usage\ndownload_file(\"your_file_id\", \"downloaded_file.pdf\")\n</code></pre>"},{"location":"api/examples/#javascript-example","title":"JavaScript Example","text":"<pre><code>async function downloadFile(fileId, fileName) {\n    const url = `https://your-streambot-domain.com/dl/${fileId}`;\n\n    try {\n        const response = await fetch(url);\n        if (!response.ok) throw new Error('Download failed');\n\n        const blob = await response.blob();\n\n        // Create download link\n        const downloadUrl = window.URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = downloadUrl;\n        link.download = fileName;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        window.URL.revokeObjectURL(downloadUrl);\n    } catch (error) {\n        console.error('Download failed:', error);\n    }\n}\n\n// Usage\ndownloadFile('your_file_id', 'downloaded_file.pdf');\n</code></pre>"},{"location":"api/examples/#get-bot-information","title":"Get Bot Information","text":""},{"location":"api/examples/#get-bot-status-and-statistics","title":"Get bot status and statistics","text":"<pre><code>curl -H \"Authorization: Bearer YOUR_ADMIN_TOKEN\" \\\n     https://your-streambot-domain.com/api/info\n</code></pre>"},{"location":"api/examples/#python-example_1","title":"Python Example","text":"<pre><code>import requests\n\ndef get_bot_info(admin_token):\n    \"\"\"Get bot information and statistics\"\"\"\n    headers = {'Authorization': f'Bearer {admin_token}'}\n    url = \"https://your-streambot-domain.com/api/info\"\n\n    response = requests.get(url, headers=headers)\n    response.raise_for_status()\n\n    return response.json()\n\n# Usage\ninfo = get_bot_info(\"your_admin_token\")\nprint(f\"Bot status: {info['status']}\")\nprint(f\"Total users: {info['users_count']}\")\n</code></pre>"},{"location":"api/examples/#response-example","title":"Response Example","text":"<pre><code>{\n    \"status\": \"running\",\n    \"uptime\": \"2 days, 14 hours\",\n    \"users_count\": 1250,\n    \"files_served\": 8432,\n    \"total_bandwidth\": \"45.2 GB\",\n    \"version\": \"1.0.0\"\n}\n</code></pre>"},{"location":"api/examples/#access-logs","title":"Access Logs","text":""},{"location":"api/examples/#get-recent-logs-admin-only","title":"Get recent logs (Admin only)","text":"<pre><code>curl -H \"Authorization: Bearer YOUR_ADMIN_TOKEN\" \\\n     https://your-streambot-domain.com/api/logs?limit=100\n</code></pre>"},{"location":"api/examples/#python-example_2","title":"Python Example","text":"<pre><code>import requests\n\ndef get_logs(admin_token, limit=50):\n    \"\"\"Get recent bot logs\"\"\"\n    headers = {'Authorization': f'Bearer {admin_token}'}\n    params = {'limit': limit}\n    url = \"https://your-streambot-domain.com/api/logs\"\n\n    response = requests.get(url, headers=headers, params=params)\n    response.raise_for_status()\n\n    return response.json()\n\n# Usage\nlogs = get_logs(\"your_admin_token\", limit=100)\nfor log in logs['logs']:\n    print(f\"{log['timestamp']}: {log['message']}\")\n</code></pre>"},{"location":"api/examples/#error-handling","title":"Error Handling","text":""},{"location":"api/examples/#common-error-responses","title":"Common Error Responses","text":"<pre><code>{\n    \"error\": \"File not found\",\n    \"code\": 404,\n    \"message\": \"The requested file could not be found\"\n}\n</code></pre> <pre><code>{\n    \"error\": \"Unauthorized\",\n    \"code\": 401,\n    \"message\": \"Valid authentication token required\"\n}\n</code></pre> <pre><code>{\n    \"error\": \"Rate limited\",\n    \"code\": 429,\n    \"message\": \"Too many requests, please try again later\"\n}\n</code></pre>"},{"location":"api/examples/#python-error-handling-example","title":"Python Error Handling Example","text":"<pre><code>import requests\nfrom requests.exceptions import RequestException\n\ndef safe_api_call(url, headers=None):\n    \"\"\"Make a safe API call with proper error handling\"\"\"\n    try:\n        response = requests.get(url, headers=headers, timeout=30)\n\n        if response.status_code == 200:\n            return response.json()\n        elif response.status_code == 404:\n            print(\"File not found\")\n        elif response.status_code == 401:\n            print(\"Authentication failed\")\n        elif response.status_code == 429:\n            print(\"Rate limited, please wait\")\n        else:\n            print(f\"API error: {response.status_code}\")\n\n    except RequestException as e:\n        print(f\"Request failed: {e}\")\n\n    return None\n</code></pre>"},{"location":"api/examples/#integration-examples","title":"Integration Examples","text":""},{"location":"api/examples/#webhook-integration","title":"Webhook Integration","text":"<p>If you want to be notified when files are uploaded:</p> <pre><code>from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/webhook', methods=['POST'])\ndef handle_webhook():\n    \"\"\"Handle StreamBot webhook notifications\"\"\"\n    data = request.get_json()\n\n    if data.get('event') == 'file_uploaded':\n        file_id = data['file_id']\n        user_id = data['user_id']\n        filename = data['filename']\n\n        print(f\"New file uploaded: {filename} by user {user_id}\")\n        print(f\"Download link: https://your-domain.com/dl/{file_id}\")\n\n        # Your custom logic here\n\n    return jsonify({'status': 'received'})\n\nif __name__ == '__main__':\n    app.run(port=5000)\n</code></pre>"},{"location":"api/examples/#batch-download","title":"Batch Download","text":"<pre><code>import requests\nimport os\nfrom concurrent.futures import ThreadPoolExecutor\n\ndef download_multiple_files(file_ids, output_dir):\n    \"\"\"Download multiple files concurrently\"\"\"\n    os.makedirs(output_dir, exist_ok=True)\n\n    def download_single(file_id):\n        url = f\"https://your-streambot-domain.com/dl/{file_id}\"\n        response = requests.get(url, stream=True)\n\n        if response.ok:\n            filename = f\"{file_id}\"\n            filepath = os.path.join(output_dir, filename)\n\n            with open(filepath, 'wb') as f:\n                for chunk in response.iter_content(chunk_size=8192):\n                    f.write(chunk)\n\n            return f\"Downloaded: {filename}\"\n        else:\n            return f\"Failed: {file_id}\"\n\n    with ThreadPoolExecutor(max_workers=5) as executor:\n        results = list(executor.map(download_single, file_ids))\n\n    return results\n\n# Usage\nfile_ids = ['file1', 'file2', 'file3']\nresults = download_multiple_files(file_ids, './downloads')\nfor result in results:\n    print(result)\n</code></pre>"},{"location":"api/examples/#rate-limiting","title":"Rate Limiting","text":"<p>Be aware of rate limits when making API calls:</p> <ul> <li>Download endpoints: No authentication required, but IP-based rate limiting may apply</li> <li>Admin endpoints: Require authentication, limited to authorized users</li> <li>Recommended: Implement exponential backoff for retries</li> </ul> <pre><code>import time\nimport random\n\ndef api_call_with_retry(url, headers=None, max_retries=3):\n    \"\"\"API call with exponential backoff retry\"\"\"\n    for attempt in range(max_retries):\n        try:\n            response = requests.get(url, headers=headers)\n\n            if response.status_code == 429:  # Rate limited\n                wait_time = (2 ** attempt) + random.uniform(0, 1)\n                print(f\"Rate limited, waiting {wait_time:.2f} seconds...\")\n                time.sleep(wait_time)\n                continue\n\n            return response\n\n        except RequestException as e:\n            if attempt == max_retries - 1:\n                raise e\n            time.sleep(2 ** attempt)\n\n    return None\n</code></pre>"},{"location":"api/overview/","title":"StreamBot API","text":"<p>StreamBot provides a RESTful API for interacting with the bot's functionality, monitoring system status, and accessing administrative features. All endpoints return JSON responses and support CORS for web application integration.</p>"},{"location":"api/overview/#api-basics","title":"API Basics","text":"<p>Base URL: <code>https://yourdomain.com</code> (configured via <code>BASE_URL</code> environment variable)</p>"},{"location":"api/overview/#authentication-methods","title":"Authentication Methods","text":"<p>The API supports several authentication methods depending on the endpoint:</p>"},{"location":"api/overview/#token-authentication","title":"Token Authentication","text":"<p>Used for administrative endpoints that require privileged access.</p> <pre><code>GET /api/logs?token=your_secret_token HTTP/1.1\nHost: yourdomain.com\n</code></pre>"},{"location":"api/overview/#ip-whitelisting","title":"IP Whitelisting","text":"<p>Restricts access to specific endpoints based on the client's IP address.</p> <pre><code>ADMIN_IPS=203.0.113.1,198.51.100.2\n</code></pre>"},{"location":"api/overview/#rate-limiting","title":"Rate Limiting","text":"<p>All API endpoints implement rate limiting to prevent abuse:</p> <ul> <li>Standard endpoints: 60 requests per minute</li> <li>Download endpoints: 10 requests per minute</li> <li>Admin endpoints: 120 requests per minute</li> </ul> <p>Rate limit headers are included in all responses:</p> <pre><code>X-RateLimit-Limit: 60\nX-RateLimit-Remaining: 45\nX-RateLimit-Reset: 1619135876\n</code></pre>"},{"location":"api/overview/#response-format","title":"Response Format","text":"<p>All API responses use a consistent JSON format:</p> <pre><code>{\n  \"status\": \"ok\",\n  \"data\": {\n    // Response data here\n  }\n}\n</code></pre> <p>Error responses follow this format:</p> <pre><code>{\n  \"status\": \"error\",\n  \"error\": \"Error message\",\n  \"error_code\": \"ERROR_CODE\"\n}\n</code></pre>"},{"location":"api/overview/#available-endpoints","title":"Available Endpoints","text":"Endpoint Method Description Authentication <code>/api/info</code> GET Bot status and information None <code>/api/logs</code> GET Access application logs Token <code>/dl/{file_id}</code> GET Download file None* <p>*File downloads use encoded IDs for access control</p>"},{"location":"api/overview/#http-status-codes","title":"HTTP Status Codes","text":"Code Description 200 Success 400 Bad Request - Invalid parameters 401 Unauthorized - Missing or invalid authentication 403 Forbidden - Insufficient permissions 404 Not Found - Resource does not exist 429 Too Many Requests - Rate limit exceeded 500 Internal Server Error - Server-side error"},{"location":"api/overview/#content-types","title":"Content Types","text":"<p>The API works with the following content types:</p> <ul> <li><code>application/json</code> for API requests and responses</li> <li>Various MIME types for file downloads</li> <li><code>multipart/form-data</code> for file uploads (when applicable)</li> </ul>"},{"location":"api/overview/#versioning","title":"Versioning","text":"<p>The current API version is integrated directly into the endpoints. Future versions will use the format:</p> <pre><code>/api/v2/endpoint\n</code></pre>"},{"location":"api/overview/#cross-origin-resource-sharing-cors","title":"Cross-Origin Resource Sharing (CORS)","text":"<p>The API supports CORS for web application integration. The following headers are included in responses:</p> <pre><code>Access-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: GET, POST, OPTIONS\nAccess-Control-Allow-Headers: Content-Type, Authorization\n</code></pre>"},{"location":"api/overview/#api-explorer","title":"API Explorer","text":"<p>Use the sections below to explore the available API endpoints in detail:</p> <ul> <li>Endpoints Reference - Detailed documentation for each endpoint</li> <li>Authentication - In-depth guide to authentication methods</li> <li>Examples &amp; Integration - Code examples for common scenarios</li> </ul>"},{"location":"api/overview/#testing-the-api","title":"Testing the API","text":"<p>You can test the API endpoints using:</p> <ul> <li>cURL: Command line HTTP client</li> <li>Postman: GUI-based API testing tool</li> <li>Your browser: For GET endpoints like <code>/api/info</code></li> <li>Programming languages: Python, JavaScript, etc.</li> </ul>"},{"location":"api/overview/#quick-test","title":"Quick Test","text":"<pre><code># Test if the API is accessible\ncurl https://yourdomain.com/api/info\n</code></pre>"},{"location":"deployment/cloud-platforms/","title":"Cloud Platform Deployment","text":"<p>\ud83d\udea7 Coming Soon! \ud83d\udea7</p> <p>This section will cover deployment on major cloud platforms with detailed guides and best practices.</p>"},{"location":"deployment/cloud-platforms/#planned-cloud-platform-guides","title":"Planned Cloud Platform Guides","text":""},{"location":"deployment/cloud-platforms/#amazon-web-services-aws","title":"Amazon Web Services (AWS)","text":"<ul> <li>EC2 Deployment - Virtual machine setup</li> <li>ECS with Fargate - Containerized deployment</li> <li>Lambda Functions - Serverless architecture</li> <li>RDS for MongoDB - Managed database setup</li> <li>CloudFront CDN - Global content delivery</li> <li>Route 53 - DNS management</li> </ul>"},{"location":"deployment/cloud-platforms/#google-cloud-platform-gcp","title":"Google Cloud Platform (GCP)","text":"<ul> <li>Compute Engine - VM-based deployment</li> <li>Cloud Run - Serverless containers</li> <li>Kubernetes Engine - Orchestrated deployment</li> <li>Cloud Storage - File storage optimization</li> <li>Cloud CDN - Content delivery network</li> </ul>"},{"location":"deployment/cloud-platforms/#microsoft-azure","title":"Microsoft Azure","text":"<ul> <li>Virtual Machines - Traditional VM deployment</li> <li>Container Instances - Simple container deployment</li> <li>Kubernetes Service - Managed Kubernetes</li> <li>Cosmos DB - MongoDB-compatible database</li> <li>CDN - Global content distribution</li> </ul>"},{"location":"deployment/cloud-platforms/#other-platforms","title":"Other Platforms","text":"<ul> <li>Heroku - Platform-as-a-Service deployment</li> <li>Railway - Modern PaaS for developers</li> <li>Render - Simple cloud deployment</li> <li>DigitalOcean App Platform - Managed application platform</li> </ul>"},{"location":"deployment/cloud-platforms/#quick-cloud-deployment-options","title":"Quick Cloud Deployment Options","text":"<p>While detailed guides are being prepared, here are some quick options:</p>"},{"location":"deployment/cloud-platforms/#heroku-free-tier-available","title":"Heroku (Free Tier Available)","text":"<pre><code># Install Heroku CLI and deploy\ngit clone https://github.com/anikethjana/Telegram-Download-Link-Generator.git\ncd Telegram-Download-Link-Generator\nheroku create your-streambot-app\nheroku config:set API_ID=your_api_id\nheroku config:set API_HASH=your_api_hash\n# ... set other environment variables\ngit push heroku main\n</code></pre>"},{"location":"deployment/cloud-platforms/#railway-simple-deployment","title":"Railway (Simple Deployment)","text":"<pre><code># Connect your GitHub repo to Railway\n# Set environment variables in Railway dashboard\n# Deploy with one click\n</code></pre>"},{"location":"deployment/cloud-platforms/#infrastructure-as-code","title":"Infrastructure as Code","text":"<p>Coming soon: Terraform and CloudFormation templates for: - Automated infrastructure provisioning - Multi-region deployments - Auto-scaling configurations - Monitoring and logging setup</p>"},{"location":"deployment/cloud-platforms/#cost-optimization-tips","title":"Cost Optimization Tips","text":"<p>While we prepare detailed guides, consider:</p> <ul> <li>Free Tiers: Start with free tiers from major cloud providers</li> <li>Spot Instances: Use spot/preemptible instances for cost savings</li> <li>Auto-scaling: Implement auto-scaling to handle traffic spikes</li> <li>CDN Usage: Use CDNs for global file distribution</li> <li>Resource Monitoring: Monitor usage to optimize costs</li> </ul>"},{"location":"deployment/cloud-platforms/#need-immediate-help","title":"Need Immediate Help?","text":"<p>For urgent deployment needs:</p> <ul> <li>\ud83d\udcac Contact me on Telegram: @ajmods_bot</li> <li>\ud83d\udc1b Open an issue on GitHub</li> <li>\ud83d\udcd6 Check the Docker Deployment guide for container-based deployment</li> </ul>"},{"location":"deployment/cloud-platforms/#coming-soon-features","title":"Coming Soon Features","text":"<ul> <li>One-click deployment scripts for major platforms</li> <li>Cost calculator for different cloud providers</li> <li>Performance benchmarks across platforms</li> <li>Migration guides between cloud providers</li> <li>Monitoring and alerting setup guides</li> </ul> <p>These comprehensive cloud deployment guides are currently in development. Stay tuned for detailed instructions! </p>"},{"location":"deployment/docker/","title":"Docker Deployment","text":"<p>Docker provides an easy way to deploy StreamBot with all dependencies included. This guide covers both Docker and Docker Compose deployment methods.</p>"},{"location":"deployment/docker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker 20.10+ installed</li> <li>Docker Compose v2.0+ (if using compose method)</li> <li>Git for cloning the repository</li> </ul>"},{"location":"deployment/docker/#method-1-docker-compose-recommended","title":"Method 1: Docker Compose (Recommended)","text":"<p>Docker Compose is the easiest way to deploy StreamBot with MongoDB included.</p>"},{"location":"deployment/docker/#1-clone-repository","title":"1. Clone Repository","text":"<pre><code>git clone https://github.com/yourusername/StreamBot.git\ncd StreamBot\n</code></pre>"},{"location":"deployment/docker/#2-create-environment-file","title":"2. Create Environment File","text":"<pre><code>cp .env.example .env\n</code></pre> <p>Edit <code>.env</code> with your configuration:</p> <pre><code># Telegram Configuration\nAPI_ID=your_api_id\nAPI_HASH=your_api_hash\nBOT_TOKEN=your_bot_token\nLOG_CHANNEL=-1001234567890\n\n# Database (MongoDB container)\nDATABASE_URL=mongodb://mongodb:27017\nDATABASE_NAME=StreamBotDB\n\n# Server Configuration\nBASE_URL=https://yourdomain.com\nPORT=8080\nBIND_ADDRESS=0.0.0.0\n\n# Admin Configuration\nADMINS=your_telegram_user_id\n</code></pre>"},{"location":"deployment/docker/#3-create-docker-compose-file","title":"3. Create Docker Compose File","text":"<p>Create <code>docker-compose.yml</code>:</p> <pre><code>version: '3.8'\n\nservices:\n  streambot:\n    build: .\n    container_name: streambot\n    restart: unless-stopped\n    ports:\n      - \"8080:8080\"\n    environment:\n      - DATABASE_URL=mongodb://mongodb:27017\n    env_file:\n      - .env\n    depends_on:\n      - mongodb\n    volumes:\n      - ./sessions:/app/sessions\n    networks:\n      - streambot-network\n\n  mongodb:\n    image: mongo:6.0\n    container_name: streambot-mongodb\n    restart: unless-stopped\n    ports:\n      - \"27017:27017\"\n    volumes:\n      - mongodb_data:/data/db\n    environment:\n      - MONGO_INITDB_DATABASE=StreamBotDB\n    networks:\n      - streambot-network\n\nvolumes:\n  mongodb_data:\n\nnetworks:\n  streambot-network:\n    driver: bridge\n</code></pre>"},{"location":"deployment/docker/#4-deploy","title":"4. Deploy","text":"<pre><code># Build and start services\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f streambot\n\n# Stop services\ndocker-compose down\n</code></pre>"},{"location":"deployment/docker/#method-2-docker-only","title":"Method 2: Docker Only","text":"<p>If you have an existing MongoDB instance, you can run just the StreamBot container.</p>"},{"location":"deployment/docker/#1-build-image","title":"1. Build Image","text":"<pre><code># Clone repository\ngit clone https://github.com/yourusername/StreamBot.git\ncd StreamBot\n\n# Build Docker image\ndocker build -t streambot:latest .\n</code></pre>"},{"location":"deployment/docker/#2-run-container","title":"2. Run Container","text":"<pre><code>docker run -d \\\n  --name streambot \\\n  --restart unless-stopped \\\n  -p 8080:8080 \\\n  --env-file .env \\\n  -v $(pwd)/sessions:/app/sessions \\\n  streambot:latest\n</code></pre>"},{"location":"deployment/docker/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"deployment/docker/#production-docker-compose","title":"Production Docker Compose","text":"<p>For production deployment with additional services:</p> <pre><code>version: '3.8'\n\nservices:\n  streambot:\n    build: .\n    container_name: streambot\n    restart: unless-stopped\n    environment:\n      - DATABASE_URL=mongodb://mongodb:27017\n    env_file:\n      - .env\n    depends_on:\n      - mongodb\n    volumes:\n      - ./sessions:/app/sessions\n      - ./logs:/app/logs\n    networks:\n      - streambot-network\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.streambot.rule=Host(`files.yourdomain.com`)\"\n      - \"traefik.http.routers.streambot.tls.certresolver=letsencrypt\"\n\n  mongodb:\n    image: mongo:6.0\n    container_name: streambot-mongodb\n    restart: unless-stopped\n    volumes:\n      - mongodb_data:/data/db\n      - ./backups:/backups\n    environment:\n      - MONGO_INITDB_DATABASE=StreamBotDB\n    networks:\n      - streambot-network\n\n  nginx:\n    image: nginx:alpine\n    container_name: streambot-nginx\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - streambot\n    networks:\n      - streambot-network\n\nvolumes:\n  mongodb_data:\n\nnetworks:\n  streambot-network:\n    driver: bridge\n</code></pre>"},{"location":"deployment/docker/#environment-variables-for-docker","title":"Environment Variables for Docker","text":"<pre><code># Docker-specific settings\nBIND_ADDRESS=0.0.0.0\nDATABASE_URL=mongodb://mongodb:27017\n\n# Production settings\nWORKERS=4\nSESSION_NAME=StreamBotProd\n</code></pre>"},{"location":"deployment/docker/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":""},{"location":"deployment/docker/#view-logs","title":"View Logs","text":"<pre><code># StreamBot logs\ndocker-compose logs -f streambot\n\n# MongoDB logs\ndocker-compose logs -f mongodb\n\n# All services\ndocker-compose logs -f\n</code></pre>"},{"location":"deployment/docker/#health-checks","title":"Health Checks","text":"<p>Add health checks to your <code>docker-compose.yml</code>:</p> <pre><code>services:\n  streambot:\n    # ... other configuration\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/api/info\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n</code></pre>"},{"location":"deployment/docker/#backup-mongodb","title":"Backup MongoDB","text":"<pre><code># Create backup\ndocker exec streambot-mongodb mongodump --db StreamBotDB --out /backups/$(date +%Y%m%d_%H%M%S)\n\n# Restore backup\ndocker exec streambot-mongodb mongorestore --db StreamBotDB /backups/backup_folder\n</code></pre>"},{"location":"deployment/docker/#update-deployment","title":"Update Deployment","text":"<pre><code># Pull latest changes\ngit pull origin main\n\n# Rebuild and restart\ndocker-compose down\ndocker-compose build --no-cache\ndocker-compose up -d\n</code></pre>"},{"location":"deployment/docker/#reverse-proxy-configuration","title":"Reverse Proxy Configuration","text":""},{"location":"deployment/docker/#nginx-configuration","title":"Nginx Configuration","text":"<p>Create <code>nginx.conf</code>:</p> <pre><code>events {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream streambot {\n        server streambot:8080;\n    }\n\n    server {\n        listen 80;\n        server_name files.yourdomain.com;\n\n        # Redirect HTTP to HTTPS\n        return 301 https://$server_name$request_uri;\n    }\n\n    server {\n        listen 443 ssl http2;\n        server_name files.yourdomain.com;\n\n        ssl_certificate /etc/nginx/ssl/cert.pem;\n        ssl_certificate_key /etc/nginx/ssl/key.pem;\n\n        client_max_body_size 2G;\n\n        location / {\n            proxy_pass http://streambot;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n}\n</code></pre>"},{"location":"deployment/docker/#traefik-configuration","title":"Traefik Configuration","text":"<pre><code>version: '3.8'\n\nservices:\n  traefik:\n    image: traefik:v2.9\n    container_name: traefik\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./traefik.yml:/etc/traefik/traefik.yml\n      - ./acme.json:/acme.json\n    networks:\n      - streambot-network\n\n  streambot:\n    # ... existing configuration\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.streambot.rule=Host(`files.yourdomain.com`)\"\n      - \"traefik.http.routers.streambot.tls.certresolver=letsencrypt\"\n</code></pre>"},{"location":"deployment/docker/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/docker/#common-issues","title":"Common Issues","text":"<p>Container won't start: <pre><code># Check logs for errors\ndocker-compose logs streambot\n\n# Verify environment variables\ndocker-compose exec streambot env | grep -E \"(API_ID|BOT_TOKEN|DATABASE_URL)\"\n</code></pre></p> <p>Database connection fails: <pre><code># Check MongoDB status\ndocker-compose exec mongodb mongo --eval \"db.adminCommand('ismaster')\"\n\n# Verify network connectivity\ndocker-compose exec streambot ping mongodb\n</code></pre></p> <p>Permission issues: <pre><code># Fix session directory permissions\nsudo chown -R 1000:1000 sessions/\n\n# Fix log directory permissions\nsudo chown -R 1000:1000 logs/\n</code></pre></p>"},{"location":"deployment/docker/#performance-tuning","title":"Performance Tuning","text":"<pre><code>services:\n  streambot:\n    # ... other configuration\n    deploy:\n      resources:\n        limits:\n          cpus: '2.0'\n          memory: 1G\n        reservations:\n          cpus: '0.5'\n          memory: 512M\n</code></pre>"},{"location":"deployment/docker/#security-considerations","title":"Security Considerations","text":""},{"location":"deployment/docker/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use secrets for sensitive data: <pre><code>secrets:\n  bot_token:\n    file: ./secrets/bot_token.txt\n\nservices:\n  streambot:\n    secrets:\n      - bot_token\n</code></pre></p> </li> <li> <p>Limit container capabilities: <pre><code>services:\n  streambot:\n    cap_drop:\n      - ALL\n    cap_add:\n      - CHOWN\n      - SETUID\n      - SETGID\n</code></pre></p> </li> <li> <p>Use non-root user: <pre><code>FROM python:3.9-slim\nRUN useradd -m -s /bin/bash streambot\nUSER streambot\n# ... rest of Dockerfile\n</code></pre></p> </li> </ol> <p>This Docker deployment method provides a robust, scalable way to run StreamBot in production environments. </p>"},{"location":"deployment/overview/","title":"Deployment Overview","text":"<p>This guide outlines various deployment options for StreamBot, from simple VPS setups to scalable cloud solutions. Choose the approach that best fits your requirements and infrastructure.</p>"},{"location":"deployment/overview/#deployment-options","title":"Deployment Options","text":"<ul> <li> <p> VPS Deployment</p> <p>Standard deployment on a Virtual Private Server (VPS) with MongoDB, Python, and Nginx.</p> <p> VPS Setup</p> </li> <li> <p> Docker Deployment</p> <p>Containerized deployment using Docker and Docker Compose for easier management.</p> <p> Docker Setup</p> </li> <li> <p> Cloud Platforms</p> <p>Deployment on popular cloud platforms like Heroku, DigitalOcean, and Railway.</p> <p> Cloud Deployment</p> </li> <li> <p> Security Best Practices</p> <p>Guidelines for securing your StreamBot deployment.</p> <p> Security Guide</p> </li> </ul>"},{"location":"deployment/overview/#pre-deployment-checklist","title":"Pre-Deployment Checklist","text":"<p>Before deploying StreamBot, ensure you have the following:</p> <ul> <li> Telegram Credentials</li> <li>API ID and API Hash from my.telegram.org</li> <li>Bot Token from @BotFather</li> <li> <p>Log Channel ID for file storage</p> </li> <li> <p> MongoDB Database</p> </li> <li>Local installation or cloud-hosted (MongoDB Atlas)</li> <li> <p>Database credentials and connection string</p> </li> <li> <p> Domain Name (recommended)</p> </li> <li>Required for public access to download links</li> <li> <p>SSL/TLS certificate for HTTPS</p> </li> <li> <p> Server Resources</p> </li> <li>Minimum: 1GB RAM, 1 vCPU, 25GB storage</li> <li>Recommended: 2GB RAM, 2 vCPU, 50GB storage</li> </ul>"},{"location":"deployment/overview/#resource-requirements","title":"Resource Requirements","text":"Component Minimum Recommended High Traffic RAM 1 GB 2 GB 4+ GB CPU 1 vCPU 2 vCPU 4+ vCPU Storage 25 GB 50 GB 100+ GB Bandwidth 100 GB/month 500 GB/month 1+ TB/month MongoDB Shared Dedicated Replicated"},{"location":"deployment/overview/#deployment-architecture","title":"Deployment Architecture","text":"<p>StreamBot can be deployed in various configurations depending on your needs:</p>"},{"location":"deployment/overview/#basic-deployment","title":"Basic Deployment","text":"<pre><code>graph TD\n    User[User] --&gt;|Access| Server[VPS/Cloud Server]\n    Server --&gt;|Contains| App[StreamBot Application]\n    Server --&gt;|Contains| DB[(MongoDB Database)]\n    App --&gt;|Uses| TG[Telegram API]</code></pre> <p>This simple setup is suitable for personal or small-scale use.</p>"},{"location":"deployment/overview/#production-deployment","title":"Production Deployment","text":"<pre><code>graph TD\n    User[User] --&gt;|Access| LB[Load Balancer/Nginx]\n    LB --&gt;|Routes to| App1[StreamBot Instance 1]\n    LB --&gt;|Routes to| App2[StreamBot Instance 2]\n    App1 --&gt;|Uses| DB[(MongoDB Cluster)]\n    App2 --&gt;|Uses| DB\n    App1 --&gt;|Uses| TG[Telegram API]\n    App2 --&gt;|Uses| TG</code></pre> <p>This configuration provides better reliability and scalability for production use.</p>"},{"location":"deployment/overview/#environment-configuration","title":"Environment Configuration","text":"<p>All deployment methods require proper environment configuration. The following variables are essential:</p> <pre><code># Required Configuration\nAPI_ID=your_api_id\nAPI_HASH=your_api_hash\nBOT_TOKEN=your_bot_token\nLOG_CHANNEL=your_log_channel_id\nDATABASE_URL=mongodb://username:password@host:port/database\nBASE_URL=https://your-domain.com\n</code></pre>"},{"location":"deployment/overview/#monitoring-maintenance","title":"Monitoring &amp; Maintenance","text":"<p>Regardless of deployment method, implement:</p> <ul> <li>Automated Backups: Regular database backups</li> <li>Health Monitoring: System health checks</li> <li>Log Rotation: Proper log management</li> <li>Security Updates: Regular system updates</li> </ul>"},{"location":"deployment/overview/#next-steps","title":"Next Steps","text":"<p>Select a deployment option from the menu to proceed with detailed instructions:</p> <ul> <li>VPS Deployment: Step-by-step guide for standard VPS setup</li> <li>Docker Deployment: Containerized deployment with Docker</li> <li>Cloud Platforms: Deployment on popular cloud services</li> <li>Security Guide: Best practices for securing your deployment </li> </ul>"},{"location":"deployment/security/","title":"Security Configuration","text":"<p>\ud83d\udea7 Coming Soon! \ud83d\udea7</p> <p>This section will provide comprehensive security guidelines and best practices for production StreamBot deployments.</p>"},{"location":"deployment/security/#planned-security-topics","title":"Planned Security Topics","text":""},{"location":"deployment/security/#server-security","title":"Server Security","text":"<ul> <li>Operating System Hardening - Secure OS configuration</li> <li>Firewall Setup - iptables and UFW configuration</li> <li>SSH Security - Key-based authentication and hardening</li> <li>User Management - Principle of least privilege</li> <li>System Updates - Automated security updates</li> <li>Intrusion Detection - Monitoring and alerting</li> </ul>"},{"location":"deployment/security/#application-security","title":"Application Security","text":"<ul> <li>Environment Variables - Secure credential management</li> <li>API Security - Rate limiting and authentication</li> <li>File Upload Security - Malware scanning and validation</li> <li>Input Validation - Preventing injection attacks</li> <li>Error Handling - Secure error responses</li> <li>Logging Security - Secure log management</li> </ul>"},{"location":"deployment/security/#network-security","title":"Network Security","text":"<ul> <li>HTTPS/TLS Configuration - SSL certificate setup</li> <li>Reverse Proxy Security - Nginx/Apache hardening</li> <li>DDoS Protection - Rate limiting and filtering</li> <li>VPN Setup - Secure administrative access</li> <li>CDN Security - CloudFlare and similar services</li> <li>IP Whitelisting - Access control lists</li> </ul>"},{"location":"deployment/security/#database-security","title":"Database Security","text":"<ul> <li>MongoDB Security - Authentication and authorization</li> <li>Encryption at Rest - Database encryption</li> <li>Backup Security - Secure backup procedures</li> <li>Connection Security - Encrypted connections</li> <li>Access Control - Database user management</li> </ul>"},{"location":"deployment/security/#quick-security-checklist","title":"Quick Security Checklist","text":"<p>While comprehensive guides are being prepared, here's a basic security checklist:</p>"},{"location":"deployment/security/#essential-security-steps","title":"\u2705 Essential Security Steps","text":"<pre><code># 1. Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# 2. Configure firewall\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow ssh\nsudo ufw allow 80\nsudo ufw allow 443\nsudo ufw enable\n\n# 3. Secure SSH (if using SSH)\nsudo nano /etc/ssh/sshd_config\n# Set: PasswordAuthentication no\n# Set: PermitRootLogin no\nsudo systemctl restart ssh\n\n# 4. Install fail2ban\nsudo apt install fail2ban -y\nsudo systemctl enable fail2ban\n</code></pre>"},{"location":"deployment/security/#environment-security","title":"\ud83d\udd10 Environment Security","text":"<pre><code># Use strong, unique passwords and tokens\nJWT_SECRET=use_a_very_long_random_string_here_64_chars_minimum\nBOT_TOKEN=your_secure_bot_token_from_botfather\n\n# Restrict admin access\nADMIN_IDS=your_user_id_only\n\n# Use secure database connections\nDATABASE_URL=mongodb://username:password@localhost:27017/streambot?authSource=admin\n\n# Enable HTTPS\nBASE_URL=https://yourdomain.com\n</code></pre>"},{"location":"deployment/security/#file-security","title":"\ud83d\udee1\ufe0f File Security","text":"<pre><code># Set proper file permissions\nchmod 600 .env\nchmod 755 /path/to/upload/directory\nchown -R streambot:streambot /app\n\n# Create dedicated user\nsudo useradd -m -s /bin/bash streambot\nsudo usermod -aG docker streambot  # if using Docker\n</code></pre>"},{"location":"deployment/security/#security-features-in-development","title":"Security Features in Development","text":""},{"location":"deployment/security/#planned-security-enhancements","title":"Planned Security Enhancements","text":"<ul> <li>File Encryption - End-to-end encryption for uploaded files</li> <li>Two-Factor Authentication - 2FA for admin access</li> <li>Audit Logging - Comprehensive security event logging</li> <li>Malware Scanning - Automatic file scanning</li> <li>Rate Limiting - Advanced rate limiting per user/IP</li> <li>Access Tokens - Granular permission system</li> </ul>"},{"location":"deployment/security/#monitoring-alerting","title":"Monitoring &amp; Alerting","text":"<ul> <li>Security Dashboards - Real-time security monitoring</li> <li>Threat Detection - Automated threat identification</li> <li>Incident Response - Security incident procedures</li> <li>Compliance Tools - GDPR and privacy compliance</li> </ul>"},{"location":"deployment/security/#common-security-vulnerabilities","title":"Common Security Vulnerabilities","text":""},{"location":"deployment/security/#what-were-protecting-against","title":"What We're Protecting Against","text":"<ul> <li>File Upload Attacks - Malicious file uploads</li> <li>Path Traversal - Directory traversal attacks</li> <li>Rate Limit Bypass - API abuse prevention</li> <li>Credential Theft - Token and password security</li> <li>DDoS Attacks - Service availability protection</li> <li>Data Breaches - User data protection</li> </ul>"},{"location":"deployment/security/#security-resources","title":"Security Resources","text":"<p>While detailed guides are in development:</p>"},{"location":"deployment/security/#immediate-security-help","title":"Immediate Security Help","text":"<ul> <li>\ud83d\udcac Contact me on Telegram: @ajmods_bot</li> <li>\ud83d\udc1b Report security issues on GitHub</li> <li>\ud83d\udcd6 Check current deployment guides</li> </ul>"},{"location":"deployment/security/#external-security-resources","title":"External Security Resources","text":"<ul> <li>OWASP Security Guidelines</li> <li>CIS Security Benchmarks</li> <li>Let's Encrypt SSL Certificates</li> <li>Fail2Ban Documentation</li> </ul>"},{"location":"deployment/security/#security-update-schedule","title":"Security Update Schedule","text":"<ul> <li>Critical Security Updates: Immediate release</li> <li>Security Patches: Within 48 hours</li> <li>Security Documentation: Weekly updates</li> <li>Security Audits: Monthly reviews</li> </ul>"},{"location":"deployment/security/#reporting-security-issues","title":"Reporting Security Issues","text":"<p>If you discover a security vulnerability:</p> <ol> <li>DO NOT create a public GitHub issue</li> <li>Contact me privately on Telegram: @ajmods_bot</li> <li>Use GitHub's Security Advisory feature</li> <li>Provide detailed information about the vulnerability</li> <li>Allow time for patch development before public disclosure</li> </ol> <p>Comprehensive security documentation is actively being developed. Your security is our priority! </p>"},{"location":"deployment/vps-setup/","title":"VPS Setup Guide","text":"<p>\ud83d\udea7 Coming Soon! \ud83d\udea7</p> <p>This section will provide comprehensive instructions for deploying StreamBot on various VPS providers.</p>"},{"location":"deployment/vps-setup/#whats-coming","title":"What's Coming","text":"<ul> <li>DigitalOcean Setup - Step-by-step VPS deployment</li> <li>AWS EC2 Deployment - Complete AWS setup guide  </li> <li>Google Cloud Platform - GCP deployment instructions</li> <li>Vultr &amp; Linode - Alternative VPS provider guides</li> <li>Ubuntu Server Setup - OS configuration and optimization</li> <li>SSL Certificate Setup - HTTPS configuration with Let's Encrypt</li> <li>Firewall Configuration - Security best practices</li> <li>Auto-scaling Setup - Handling high traffic loads</li> </ul>"},{"location":"deployment/vps-setup/#temporary-quick-setup","title":"Temporary Quick Setup","text":"<p>For now, you can use Docker deployment on any VPS:</p> <pre><code># Basic VPS setup (Ubuntu)\nsudo apt update &amp;&amp; sudo apt upgrade -y\nsudo apt install docker.io docker-compose -y\n\n# Clone and deploy\ngit clone https://github.com/anikethjana/Telegram-Download-Link-Generator.git\ncd Telegram-Download-Link-Generator\ncp .env.example .env\n# Edit .env with your configuration\nnano .env\n\n# Deploy with Docker\ndocker-compose up -d\n</code></pre>"},{"location":"deployment/vps-setup/#need-help","title":"Need Help?","text":"<p>While this guide is being prepared, you can:</p> <ul> <li>\ud83d\udcd6 Check the Docker Deployment guide</li> <li>\ud83d\udcac Contact me on Telegram: @ajmods_bot</li> <li>\ud83d\udc1b Open an issue on GitHub</li> </ul> <p>This documentation is actively being developed. Check back soon for detailed VPS setup instructions! </p>"},{"location":"developer-guide/architecture/","title":"Architecture Overview","text":"<p>StreamBot is built with a distributed architecture that employs a multi-client design pattern with clear separation of concerns for scalability, reliability, and maintainability.</p>"},{"location":"developer-guide/architecture/#multi-client-architecture","title":"Multi-Client Architecture","text":"<p>StreamBot uses a primary client for user interactions and multiple worker clients for file streaming operations, providing load balancing and improved throughput.</p> <pre><code>graph TD\n    subgraph StreamBot\n        subgraph \"Primary Client\"\n            PC[Primary Client]\n            PC --&gt;|User Commands| UC[User Commands]\n            PC --&gt;|File Uploads| FU[File Uploads]\n            PC --&gt;|Admin Tasks| AT[Admin Tasks]\n        end\n\n        subgraph \"Worker Clients\"\n            WC[Worker Clients]\n            WC --&gt;|Streaming| C1[Client 1]\n            WC --&gt;|Streaming| C2[Client 2]\n            WC --&gt;|Streaming| C3[Client 3]\n        end\n    end\n\n    PC --&gt;|User Interactions| UI[User Facing Operations]\n    WC --&gt;|File Serving| FS[File Serving Operations]</code></pre>"},{"location":"developer-guide/architecture/#primary-client","title":"Primary Client","text":"<ul> <li>Handles all user interactions and commands</li> <li>Manages file uploads and validation</li> <li>Processes administrative tasks and monitoring</li> </ul>"},{"location":"developer-guide/architecture/#worker-clients","title":"Worker Clients","text":"<ul> <li>Dedicated to streaming operations</li> <li>Provide load balancing for downloads</li> <li>Improve overall system throughput</li> </ul>"},{"location":"developer-guide/architecture/#application-layers","title":"Application Layers","text":"<p>The application follows a layered architecture for separation of concerns and maintainability.</p> <pre><code>flowchart TD\n    PL[Presentation Layer] --&gt; BL[Business Layer]\n    BL --&gt; DL[Data Layer]\n\n    subgraph \"Presentation Layer\"\n        TB[Telegram Bot Commands]\n        WS[Web Server Download]\n        API[REST API Endpoints]\n    end\n\n    subgraph \"Business Layer\"\n        RL[Rate Limiting]\n        BM[Bandwidth Management]\n        FH[File Handler]\n    end\n\n    subgraph \"Data Layer\"\n        DB[MongoDB Database]\n        FS[File Storage - Log Channel]\n        TA[Telegram API]\n    end</code></pre>"},{"location":"developer-guide/architecture/#presentation-layer","title":"Presentation Layer","text":"<ul> <li>Telegram Bot: User commands and interactions</li> <li>Web Server: File download functionality</li> <li>REST API: System monitoring and integration</li> </ul>"},{"location":"developer-guide/architecture/#business-layer","title":"Business Layer","text":"<ul> <li>Rate Limiting: Controls user access frequency</li> <li>Bandwidth Management: Monitors and limits data transfer</li> <li>File Handler: Processes and manages file operations</li> </ul>"},{"location":"developer-guide/architecture/#data-layer","title":"Data Layer","text":"<ul> <li>MongoDB: User data and application state</li> <li>File Storage: Uses Telegram channels for storage</li> <li>Telegram API: Core communication infrastructure</li> </ul>"},{"location":"developer-guide/architecture/#data-flow-diagrams","title":"Data Flow Diagrams","text":""},{"location":"developer-guide/architecture/#file-upload-flow","title":"File Upload Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Bot\n    participant Validation\n    participant LogChannel\n    participant Database\n\n    User-&gt;&gt;Bot: Send File\n    Bot-&gt;&gt;Validation: Validate File\n    Validation--&gt;&gt;Bot: Validation Result\n\n    alt Valid File\n        Bot-&gt;&gt;LogChannel: Forward to Log Channel\n        LogChannel--&gt;&gt;Bot: Message ID\n        Bot-&gt;&gt;Database: Create Link Record\n        Database--&gt;&gt;Bot: Record Created\n        Bot-&gt;&gt;User: Send Download Link\n    else Invalid File\n        Bot-&gt;&gt;User: Send Error Message\n    end</code></pre>"},{"location":"developer-guide/architecture/#file-download-flow","title":"File Download Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant WebServer\n    participant Validation\n    participant LogChannel\n    participant Database\n\n    User-&gt;&gt;WebServer: Request Download Link\n    WebServer-&gt;&gt;Validation: Decode and Validate Link\n\n    alt Valid Link\n        Validation-&gt;&gt;Database: Check Limitations\n        Database--&gt;&gt;Validation: Validation Result\n\n        alt Within Limits\n            Validation-&gt;&gt;LogChannel: Fetch from Log Channel\n            LogChannel--&gt;&gt;WebServer: Return File\n            WebServer-&gt;&gt;Database: Track Bandwidth\n            WebServer-&gt;&gt;User: Stream File\n        else Exceeded Limits\n            Validation-&gt;&gt;User: Return Error\n        end\n    else Invalid Link\n        Validation-&gt;&gt;User: Return Error\n    end</code></pre>"},{"location":"developer-guide/architecture/#component-details","title":"Component Details","text":""},{"location":"developer-guide/architecture/#clientmanager-client_managerpy","title":"ClientManager (<code>client_manager.py</code>)","text":"<p>The ClientManager orchestrates multiple Telegram client instances for distributed workloads.</p> <pre><code>class ClientManager:\n    def __init__(self):\n        self.primary_client = None  # Primary bot for user interactions\n        self.worker_clients = []    # List of streaming-dedicated clients\n        self._round_robin_index = 0 # Load balancer state\n        self._lock = asyncio.Lock() # Thread-safe operations\n</code></pre> <p>Key Features: - Round-robin load balancing for streaming - Automatic client health monitoring - Graceful startup/shutdown handling - Connection recovery mechanisms</p>"},{"location":"developer-guide/architecture/#configuration-management-configpy","title":"Configuration Management (<code>config.py</code>)","text":"<p>Centralized configuration with environment variable validation.</p> <p>Features: - Type-safe environment variable loading - Required/optional parameter validation - Default value handling - Sensitive data masking in logs</p>"},{"location":"developer-guide/architecture/#database-layer-databasedatabasepy","title":"Database Layer (<code>database/database.py</code>)","text":"<p>MongoDB operations for user and system management.</p> <p>Collections: - <code>users</code>: User registration and tracking - <code>bandwidth_usage</code>: Monthly bandwidth monitoring</p> <p>Features: - Connection pooling - Error handling and retry logic - Efficient query patterns</p>"},{"location":"developer-guide/architecture/#web-server-webwebpy","title":"Web Server (<code>web/web.py</code>)","text":"<p>HTTP server for file downloads and API functionality.</p> <p>Features: - Range request support (partial downloads) - CORS configuration - Rate limiting integration - Error handling and logging</p>"},{"location":"developer-guide/architecture/#utility-modules","title":"Utility Modules","text":""},{"location":"developer-guide/architecture/#rate-limiter-utilsrate_limiterpy","title":"Rate Limiter (<code>utils/rate_limiter.py</code>)","text":"<ul> <li>Algorithm: Sliding window with deque-based timestamp tracking</li> <li>Features: Per-user daily limits, thread-safe operations</li> </ul>"},{"location":"developer-guide/architecture/#bandwidth-manager-utilsbandwidthpy","title":"Bandwidth Manager (<code>utils/bandwidth.py</code>)","text":"<ul> <li>Algorithm: Monthly rolling limits with auto-reset</li> <li>Features: Real-time tracking, MongoDB persistence</li> </ul>"},{"location":"developer-guide/architecture/#memory-manager-utilsmemory_managerpy","title":"Memory Manager (<code>utils/memory_manager.py</code>)","text":"<ul> <li>Purpose: Memory leak prevention and monitoring</li> <li>Features: Periodic cleanup, usage tracking, garbage collection</li> </ul>"},{"location":"developer-guide/architecture/#stream-cleanup-utilsstream_cleanuppy","title":"Stream Cleanup (<code>utils/stream_cleanup.py</code>)","text":"<ul> <li>Purpose: HTTP stream lifecycle management</li> <li>Features: Active connection tracking, automatic cleanup on errors</li> </ul>"},{"location":"developer-guide/architecture/#scaling-considerations","title":"Scaling Considerations","text":""},{"location":"developer-guide/architecture/#horizontal-scaling","title":"Horizontal Scaling","text":"<ul> <li>Worker Clients: Add more bot tokens for increased throughput</li> <li>Database: MongoDB sharding for larger user bases</li> <li>Load Balancing: Multiple web server instances behind proxy</li> </ul>"},{"location":"developer-guide/architecture/#vertical-scaling","title":"Vertical Scaling","text":"<ul> <li>Workers: Increase Pyrogram worker threads</li> <li>Memory: Tune cleanup intervals and cache sizes</li> <li>Bandwidth: Adjust chunk sizes for optimal streaming</li> </ul>"},{"location":"developer-guide/architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"developer-guide/architecture/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>Admin Commands: User ID-based authorization</li> <li>API Access: Token-based authentication with IP whitelisting</li> <li>File Access: Encoded message IDs with expiration</li> </ul>"},{"location":"developer-guide/architecture/#input-validation","title":"Input Validation","text":"<ul> <li>File Types: MIME type validation and sanitization</li> <li>URLs: Encoded ID validation and decoding</li> <li>Rate Limits: Per-user request throttling</li> </ul>"},{"location":"developer-guide/architecture/#error-handling-strategy","title":"Error Handling Strategy","text":""},{"location":"developer-guide/architecture/#graceful-degradation","title":"Graceful Degradation","text":"<ul> <li>Client Failures: Automatic fallback to available clients</li> <li>Database Issues: In-memory fallbacks for non-critical operations</li> <li>Rate Limits: Exponential backoff with retry logic</li> </ul>"},{"location":"developer-guide/architecture/#monitoring-recovery","title":"Monitoring &amp; Recovery","text":"<ul> <li>Health Checks: Continuous client connection monitoring</li> <li>Automatic Cleanup: Resource leak prevention</li> <li>Error Logging: Structured logging with rate limiting</li> </ul>"},{"location":"developer-guide/architecture/#configuration-patterns","title":"Configuration Patterns","text":""},{"location":"developer-guide/architecture/#environment-based-configuration","title":"Environment-Based Configuration","text":"<ul> <li>Development: Local settings with debug logging</li> <li>Production: Optimized settings with minimal logging</li> <li>Docker: Container-friendly configuration</li> </ul>"},{"location":"developer-guide/architecture/#feature-flags","title":"Feature Flags","text":"<ul> <li>Force Subscription: Optional channel requirement</li> <li>Rate Limiting: Configurable daily limits</li> <li>Bandwidth Limits: Optional monthly quotas</li> </ul>"},{"location":"developer-guide/architecture/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"developer-guide/architecture/#throughput","title":"Throughput","text":"<ul> <li>Single Client: ~50 concurrent downloads</li> <li>Multi-Client: Scales linearly with worker count</li> <li>Database: Optimized for read-heavy workloads</li> </ul>"},{"location":"developer-guide/architecture/#latency","title":"Latency","text":"<ul> <li>Link Generation: &lt;100ms average</li> <li>Download Start: &lt;500ms average</li> <li>API Response: &lt;50ms average</li> </ul>"},{"location":"developer-guide/architecture/#resource-usage","title":"Resource Usage","text":"<ul> <li>Memory: ~50MB base + 10MB per active client</li> <li>CPU: Low usage, I/O bound operations</li> <li>Network: Dependent on file transfer volume</li> </ul>"},{"location":"developer-guide/architecture/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"developer-guide/architecture/#single-server-deployment","title":"Single Server Deployment","text":"<pre><code>flowchart TD\n    subgraph \"StreamBot Server\"\n        subgraph \"Application\"\n            PC[Primary Client]\n            WC[Worker Clients]\n            WS[Web Server]\n        end\n    end\n\n    DB[MongoDB Database]\n\n    Application --- DB</code></pre>"},{"location":"developer-guide/architecture/#distributed-deployment","title":"Distributed Deployment","text":"<pre><code>flowchart TD\n    LB[Load Balancer] --&gt; SB1[StreamBot 1]\n    LB --&gt; SB2[StreamBot 2]\n\n    SB1 --&gt; DB[(MongoDB Cluster)]\n    SB2 --&gt; DB</code></pre> <p>This architecture provides a solid foundation for understanding how StreamBot components interact and can be extended or modified for specific deployment needs. </p>"},{"location":"developer-guide/contributing/","title":"Contributing to StreamBot","text":"<p>Thank you for considering contributing to StreamBot! \ud83c\udf89</p> <p>This guide outlines how to contribute effectively to the project and maintain code quality.</p>"},{"location":"developer-guide/contributing/#ways-to-contribute","title":"Ways to Contribute","text":""},{"location":"developer-guide/contributing/#code-contributions","title":"\ud83d\udcbb Code Contributions","text":"<ul> <li>Bug fixes and improvements</li> <li>New features and enhancements</li> <li>Performance optimizations</li> <li>Test coverage improvements</li> </ul>"},{"location":"developer-guide/contributing/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Improve existing documentation</li> <li>Add examples and tutorials</li> <li>Fix typos and clarifications</li> <li>Translate documentation</li> </ul>"},{"location":"developer-guide/contributing/#bug-reports","title":"\ud83d\udc1b Bug Reports","text":"<ul> <li>Report bugs with detailed information</li> <li>Provide steps to reproduce issues</li> <li>Share system information and logs</li> </ul>"},{"location":"developer-guide/contributing/#feature-requests","title":"\ud83d\udca1 Feature Requests","text":"<ul> <li>Suggest new features or improvements</li> <li>Discuss implementation approaches</li> <li>Share use cases and requirements</li> </ul>"},{"location":"developer-guide/contributing/#development-setup","title":"Development Setup","text":""},{"location":"developer-guide/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+</li> <li>MongoDB (local or cloud)</li> <li>Git</li> <li>Code editor (VS Code recommended)</li> </ul>"},{"location":"developer-guide/contributing/#quick-setup","title":"Quick Setup","text":"<pre><code># Fork and clone the repository\ngit clone https://github.com/your-username/StreamBot.git\ncd StreamBot\n\n# Set up virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n\n# Copy environment configuration\ncp .env.example .env\n# Edit .env with your configuration\n\n# Run the application\npython -m StreamBot\n</code></pre>"},{"location":"developer-guide/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"developer-guide/contributing/#1-create-a-branch","title":"1. Create a Branch","text":"<pre><code>git checkout -b feature/your-feature-name\n# or\ngit checkout -b fix/bug-description\n</code></pre> <p>Branch Naming Convention: - <code>feature/feature-name</code> - New features - <code>fix/bug-description</code> - Bug fixes - <code>docs/documentation-topic</code> - Documentation improvements - <code>refactor/component-name</code> - Code refactoring</p>"},{"location":"developer-guide/contributing/#2-make-changes","title":"2. Make Changes","text":"<p>Follow these guidelines:</p>"},{"location":"developer-guide/contributing/#code-style","title":"Code Style","text":"<ul> <li>Use Black for code formatting: <code>black StreamBot/</code></li> <li>Follow PEP 8 style guidelines</li> <li>Use type hints for all functions</li> <li>Write descriptive variable names</li> <li>Keep functions small and focused</li> </ul>"},{"location":"developer-guide/contributing/#documentation_1","title":"Documentation","text":"<ul> <li>Add docstrings to all public functions</li> <li>Update relevant documentation files</li> <li>Include code examples where helpful</li> <li>Keep comments concise and meaningful</li> </ul>"},{"location":"developer-guide/contributing/#testing","title":"Testing","text":"<ul> <li>Write unit tests for new functionality</li> <li>Ensure existing tests pass: <code>pytest</code></li> <li>Aim for &gt;80% code coverage</li> <li>Test error conditions and edge cases</li> </ul>"},{"location":"developer-guide/contributing/#3-commit-changes","title":"3. Commit Changes","text":"<p>Use conventional commit format:</p> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;description&gt;\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>Types: <code>feat</code>, <code>fix</code>, <code>docs</code>, <code>style</code>, <code>refactor</code>, <code>test</code>, <code>chore</code></p> <p>Examples: <pre><code>git commit -m \"feat(api): add bandwidth usage endpoint\"\ngit commit -m \"fix(bot): handle connection timeout errors\"\ngit commit -m \"docs(readme): update installation instructions\"\n</code></pre></p>"},{"location":"developer-guide/contributing/#4-test-your-changes","title":"4. Test Your Changes","text":"<pre><code># Run all tests\npytest\n\n# Check code style\nblack --check StreamBot/\nflake8 StreamBot/\n\n# Type checking\nmypy StreamBot/\n\n# Test the application\npython -m StreamBot\n</code></pre>"},{"location":"developer-guide/contributing/#5-submit-pull-request","title":"5. Submit Pull Request","text":"<ol> <li>Push your branch: <code>git push origin feature/your-feature-name</code></li> <li>Create a Pull Request on GitHub</li> <li>Fill out the PR template with:</li> <li>Clear description of changes</li> <li>Reference to related issues</li> <li>Screenshots if applicable</li> </ol>"},{"location":"developer-guide/contributing/#code-quality-standards","title":"Code Quality Standards","text":""},{"location":"developer-guide/contributing/#formatting","title":"Formatting","text":"<p>Use Black for consistent formatting:</p> <pre><code># Format all code\nblack StreamBot/\n\n# Check formatting\nblack --check StreamBot/\n</code></pre>"},{"location":"developer-guide/contributing/#linting","title":"Linting","text":"<p>Use flake8 for code quality:</p> <pre><code># Check code quality\nflake8 StreamBot/\n</code></pre>"},{"location":"developer-guide/contributing/#type-checking","title":"Type Checking","text":"<p>Use mypy for type safety:</p> <pre><code># Type checking\nmypy StreamBot/\n</code></pre>"},{"location":"developer-guide/contributing/#testing_1","title":"Testing","text":"<p>Write comprehensive tests:</p> <pre><code>import pytest\nfrom unittest.mock import Mock, patch\nfrom StreamBot.utils.utils import humanbytes\n\ndef test_humanbytes_conversion():\n    \"\"\"Test human-readable byte conversion.\"\"\"\n    assert humanbytes(1024) == \"1.00 KB\"\n    assert humanbytes(1048576) == \"1.00 MB\"\n    assert humanbytes(0) == \"0 B\"\n\n@patch('StreamBot.database.database.user_data')\nasync def test_add_user(mock_collection):\n    \"\"\"Test user addition to database.\"\"\"\n    mock_collection.find_one.return_value = None\n    mock_collection.insert_one.return_value = Mock()\n\n    from StreamBot.database.database import add_user\n    await add_user(12345)\n\n    mock_collection.insert_one.assert_called_once()\n</code></pre>"},{"location":"developer-guide/contributing/#project-structure","title":"Project Structure","text":"<p>Understanding the codebase:</p> <pre><code>StreamBot/\n\u251c\u2500\u2500 StreamBot/              # Main application\n\u2502   \u251c\u2500\u2500 __main__.py        # Entry point\n\u2502   \u251c\u2500\u2500 config.py          # Configuration\n\u2502   \u251c\u2500\u2500 bot.py             # Bot handlers\n\u2502   \u251c\u2500\u2500 client_manager.py  # Multi-client management\n\u2502   \u251c\u2500\u2500 database/          # Database operations\n\u2502   \u251c\u2500\u2500 utils/            # Utility modules\n\u2502   \u2514\u2500\u2500 web/              # Web server\n\u251c\u2500\u2500 tests/                # Test suite\n\u251c\u2500\u2500 docs/                 # Documentation\n\u2514\u2500\u2500 requirements.txt      # Dependencies\n</code></pre>"},{"location":"developer-guide/contributing/#adding-new-features","title":"Adding New Features","text":""},{"location":"developer-guide/contributing/#feature-development-process","title":"Feature Development Process","text":"<ol> <li>Discuss the feature in GitHub Issues</li> <li>Design the implementation with community input</li> <li>Create a branch following naming conventions</li> <li>Implement the feature with tests</li> <li>Update documentation as needed</li> <li>Submit a pull request for review</li> </ol>"},{"location":"developer-guide/contributing/#feature-guidelines","title":"Feature Guidelines","text":"<ul> <li>Follow existing patterns in the codebase</li> <li>Add appropriate error handling and logging</li> <li>Update configuration if needed</li> <li>Add tests for new functionality</li> <li>Update documentation accordingly</li> </ul>"},{"location":"developer-guide/contributing/#bug-reports_1","title":"Bug Reports","text":""},{"location":"developer-guide/contributing/#creating-good-bug-reports","title":"Creating Good Bug Reports","text":"<p>Include the following information:</p> <p><pre><code>**Bug Description**\nClear description of the issue.\n\n**Steps to Reproduce**\n1. Go to '...'\n2. Click on '...'\n3. See error\n\n**Expected Behavior**\nWhat should happen.\n\n**Actual Behavior**\nWhat actually happens.\n\n**Environment**\n- OS: [e.g., Ubuntu 20.04]\n- Python Version: [e.g., 3.9.5]\n- StreamBot Version: [e.g., 1.0.0]\n\n**Logs**\n</code></pre> [Paste relevant log entries] <pre><code>**Additional Context**\nAny other relevant information.\n</code></pre></p>"},{"location":"developer-guide/contributing/#community-guidelines","title":"Community Guidelines","text":""},{"location":"developer-guide/contributing/#be-respectful","title":"Be Respectful","text":"<ul> <li>Use inclusive language</li> <li>Be patient with newcomers</li> <li>Provide constructive feedback</li> <li>Celebrate contributions of all sizes</li> </ul>"},{"location":"developer-guide/contributing/#communication","title":"Communication","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>GitHub Discussions: General questions and ideas</li> <li>Pull Requests: Code review and discussion</li> </ul>"},{"location":"developer-guide/contributing/#recognition","title":"Recognition","text":"<p>Contributors will be recognized in: - Contributors section in README - Release notes for significant contributions - Documentation where applicable</p>"},{"location":"developer-guide/contributing/#getting-help","title":"Getting Help","text":"<p>If you need help:</p> <ol> <li>Check existing documentation</li> <li>Search GitHub Issues for similar problems</li> <li>Ask in GitHub Discussions</li> <li>Reach out to maintainers if needed</li> </ol> <p>Thank you for contributing to StreamBot! Every contribution helps make the project better. \ud83d\ude80 </p>"},{"location":"getting-started/configuration/","title":"Configuration Guide","text":"<p>StreamBot uses environment variables for configuration. This guide covers all available options and their purposes.</p>"},{"location":"getting-started/configuration/#environment-file-setup","title":"Environment File Setup","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code>cp .env.example .env\n</code></pre>"},{"location":"getting-started/configuration/#required-configuration","title":"Required Configuration","text":""},{"location":"getting-started/configuration/#telegram-settings","title":"Telegram Settings","text":"<pre><code># Telegram API credentials (required)\nAPI_ID=12345678\nAPI_HASH=your_api_hash_from_my_telegram_org\nBOT_TOKEN=123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi\nLOG_CHANNEL=-1001234567890\n</code></pre> Variable Description How to Get <code>API_ID</code> Telegram API ID Get from my.telegram.org <code>API_HASH</code> Telegram API Hash Get from my.telegram.org <code>BOT_TOKEN</code> Bot token from BotFather Message @BotFather <code>LOG_CHANNEL</code> Channel ID for file storage Create private channel, add bot as admin"},{"location":"getting-started/configuration/#database-configuration","title":"Database Configuration","text":"<pre><code># MongoDB connection (required)\nDATABASE_URL=mongodb://localhost:27017\nDATABASE_NAME=StreamBotDB\n</code></pre> Variable Description Examples <code>DATABASE_URL</code> MongoDB connection string <code>mongodb://localhost:27017</code> (local)<code>mongodb+srv://user:pass@cluster.mongodb.net/</code> (Atlas) <code>DATABASE_NAME</code> Database name <code>StreamBotDB</code>, <code>MyStreamBot</code>"},{"location":"getting-started/configuration/#server-configuration","title":"Server Configuration","text":"<pre><code># Web server settings (required)\nBASE_URL=https://yourdomain.com\nPORT=8080\nBIND_ADDRESS=127.0.0.1\n</code></pre> Variable Description Examples <code>BASE_URL</code> Public URL for download links <code>https://files.yourdomain.com</code>, <code>http://localhost:8080</code> <code>PORT</code> Port for web server <code>8080</code>, <code>3000</code>, <code>80</code> <code>BIND_ADDRESS</code> IP address to bind server <code>127.0.0.1</code> (local), <code>0.0.0.0</code> (public)"},{"location":"getting-started/configuration/#optional-configuration","title":"Optional Configuration","text":""},{"location":"getting-started/configuration/#admin-settings","title":"Admin Settings","text":"<pre><code># Admin users and access\nADMINS=123456789 987654321\nLOGS_ACCESS_TOKEN=your_secure_random_token_here\nADMIN_IPS=127.0.0.1,203.0.113.1\n</code></pre> Variable Description Format <code>ADMINS</code> Space-separated admin user IDs <code>123456789 987654321</code> <code>LOGS_ACCESS_TOKEN</code> Token for API log access Generate secure random string <code>ADMIN_IPS</code> Comma-separated admin IP addresses <code>127.0.0.1,203.0.113.1</code>"},{"location":"getting-started/configuration/#multi-client-support","title":"Multi-Client Support","text":"<pre><code># Additional bot tokens for load balancing\nADDITIONAL_BOT_TOKENS=token1,token2,token3\n</code></pre> Variable Description Benefits <code>ADDITIONAL_BOT_TOKENS</code> Comma-separated additional bot tokens Increases download throughput, load balancing"},{"location":"getting-started/configuration/#rate-limiting","title":"Rate Limiting","text":"<pre><code># User rate limiting\nMAX_LINKS_PER_DAY=5\nBANDWIDTH_LIMIT_GB=100\n</code></pre> Variable Description Default Disable <code>MAX_LINKS_PER_DAY</code> Daily link generation limit per user <code>5</code> <code>0</code> (unlimited) <code>BANDWIDTH_LIMIT_GB</code> Monthly bandwidth limit in GB <code>100</code> <code>0</code> (unlimited)"},{"location":"getting-started/configuration/#force-subscription","title":"Force Subscription","text":"<pre><code># Require channel subscription\nFORCE_SUB_CHANNEL=-1009876543210\n</code></pre> Variable Description Usage <code>FORCE_SUB_CHANNEL</code> Channel ID for required subscription Users must join channel before using bot"},{"location":"getting-started/configuration/#performance-tuning","title":"Performance Tuning","text":"<pre><code># Application performance settings\nWORKERS=4\nWORKER_CLIENT_PYROGRAM_WORKERS=1\nSESSION_NAME=StreamBot\n</code></pre> Variable Description Default Recommendations <code>WORKERS</code> Number of worker threads <code>4</code> 2-8 depending on server <code>WORKER_CLIENT_PYROGRAM_WORKERS</code> Pyrogram workers per client <code>1</code> Keep at 1 for stability <code>SESSION_NAME</code> Session file prefix <code>StreamBot</code> Unique name per instance"},{"location":"getting-started/configuration/#link-management","title":"Link Management","text":"<pre><code># Link expiration settings\nLINK_EXPIRY_ENABLED=true\nLINK_EXPIRY_DURATION_SECONDS=86400\n</code></pre> Variable Description Default Notes <code>LINK_EXPIRY_ENABLED</code> Enable link expiration <code>true</code> Set to <code>false</code> to disable <code>LINK_EXPIRY_DURATION_SECONDS</code> Link validity duration <code>86400</code> (24 hours) In seconds"},{"location":"getting-started/configuration/#external-integrations","title":"External Integrations","text":"<pre><code># Optional external services\nGITHUB_REPO_URL=https://github.com/yourusername/StreamBot\nSUPPORT_CHAT_ID=-1001234567890\n</code></pre> Variable Description Usage <code>GITHUB_REPO_URL</code> Repository URL for info display Shown in <code>/info</code> command <code>SUPPORT_CHAT_ID</code> Support chat/group ID For user support redirects"},{"location":"getting-started/configuration/#environment-specific-configurations","title":"Environment-Specific Configurations","text":""},{"location":"getting-started/configuration/#development-environment","title":"Development Environment","text":"<pre><code># Development settings\nAPI_ID=12345678\nAPI_HASH=your_dev_api_hash\nBOT_TOKEN=your_dev_bot_token\nLOG_CHANNEL=-1001234567890\nDATABASE_URL=mongodb://localhost:27017\nDATABASE_NAME=StreamBotDev\nBASE_URL=http://localhost:8080\nPORT=8080\nBIND_ADDRESS=127.0.0.1\nADMINS=your_telegram_user_id\nMAX_LINKS_PER_DAY=0\nBANDWIDTH_LIMIT_GB=0\nSESSION_NAME=StreamBotDev\nWORKERS=2\n</code></pre>"},{"location":"getting-started/configuration/#production-environment","title":"Production Environment","text":"<pre><code># Production settings\nAPI_ID=12345678\nAPI_HASH=your_production_api_hash\nBOT_TOKEN=your_production_bot_token\nLOG_CHANNEL=-1001234567890\nDATABASE_URL=mongodb+srv://user:password@cluster.mongodb.net/\nDATABASE_NAME=StreamBotProd\nBASE_URL=https://files.yourdomain.com\nPORT=8080\nBIND_ADDRESS=0.0.0.0\nADMINS=your_telegram_user_id\nLOGS_ACCESS_TOKEN=your_secure_production_token\nADMIN_IPS=your.server.ip,your.home.ip\nMAX_LINKS_PER_DAY=5\nBANDWIDTH_LIMIT_GB=100\nFORCE_SUB_CHANNEL=-1009876543210\nADDITIONAL_BOT_TOKENS=token1,token2\nSESSION_NAME=StreamBotProd\nWORKERS=4\nLINK_EXPIRY_ENABLED=true\nLINK_EXPIRY_DURATION_SECONDS=86400\n</code></pre>"},{"location":"getting-started/configuration/#configuration-validation","title":"Configuration Validation","text":"<p>StreamBot validates your configuration on startup. Common validation errors:</p> <p>Missing Required Variables</p> <p><pre><code>ERROR - Missing required environment variable: BOT_TOKEN\n</code></pre> Solution: Ensure all required variables are set in your <code>.env</code> file.</p> <p>Invalid Bot Token</p> <p><pre><code>ERROR - Bot token format is invalid\n</code></pre> Solution: Check your bot token format. It should look like <code>123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi</code></p> <p>Database Connection Failed</p> <p><pre><code>ERROR - Failed to connect to MongoDB\n</code></pre> Solution: Verify your <code>DATABASE_URL</code> and ensure MongoDB is running.</p> <p>Invalid Channel ID</p> <p><pre><code>ERROR - LOG_CHANNEL must be a negative integer\n</code></pre> Solution: Channel IDs should be negative numbers like <code>-1001234567890</code></p>"},{"location":"getting-started/configuration/#security-best-practices","title":"Security Best Practices","text":""},{"location":"getting-started/configuration/#environment-variables-security","title":"Environment Variables Security","text":"<ol> <li>Never commit <code>.env</code> files to version control</li> <li>Use strong tokens for <code>LOGS_ACCESS_TOKEN</code></li> <li>Restrict admin IPs with <code>ADMIN_IPS</code></li> <li>Use HTTPS in production for <code>BASE_URL</code></li> </ol>"},{"location":"getting-started/configuration/#generating-secure-tokens","title":"Generating Secure Tokens","text":"<pre><code># Generate secure random token (Linux/macOS)\nopenssl rand -hex 32\n\n# Generate secure random token (Python)\npython -c \"import secrets; print(secrets.token_hex(32))\"\n</code></pre>"},{"location":"getting-started/configuration/#ip-address-restrictions","title":"IP Address Restrictions","text":"<pre><code># Restrict admin access to specific IPs\nADMIN_IPS=203.0.113.1,198.51.100.2,127.0.0.1\n</code></pre>"},{"location":"getting-started/configuration/#configuration-templates","title":"Configuration Templates","text":""},{"location":"getting-started/configuration/#envexample-template","title":"<code>.env.example</code> Template","text":"<pre><code># Telegram Configuration (Required)\nAPI_ID=your_api_id\nAPI_HASH=your_api_hash\nBOT_TOKEN=your_bot_token\nLOG_CHANNEL=your_log_channel_id\n\n# Database Configuration (Required)\nDATABASE_URL=mongodb://localhost:27017\nDATABASE_NAME=StreamBotDB\n\n# Server Configuration (Required)\nBASE_URL=https://yourdomain.com\nPORT=8080\nBIND_ADDRESS=127.0.0.1\n\n# Admin Configuration\nADMINS=your_telegram_user_id\nLOGS_ACCESS_TOKEN=generate_secure_token\nADMIN_IPS=127.0.0.1\n\n# Optional Features\nMAX_LINKS_PER_DAY=5\nBANDWIDTH_LIMIT_GB=100\nFORCE_SUB_CHANNEL=\nADDITIONAL_BOT_TOKENS=\n\n# Performance Settings\nWORKERS=4\nSESSION_NAME=StreamBot\nLINK_EXPIRY_ENABLED=true\nLINK_EXPIRY_DURATION_SECONDS=86400\n</code></pre>"},{"location":"getting-started/configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":"<p>If StreamBot fails to start, check:</p> <ol> <li>Environment file exists: Ensure <code>.env</code> file is in the project root</li> <li>Required variables set: All required variables have values</li> <li>Format correctness: Variables follow the correct format</li> <li>File permissions: <code>.env</code> file is readable by the application</li> <li>No trailing spaces: Remove any trailing spaces from variable values</li> </ol> <p>For additional help, see the Installation Guide or User Guide. </p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide will walk you through installing StreamBot on your system. Choose the method that best suits your needs.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing StreamBot, ensure you have:</p> <ul> <li>Python 3.8 or higher (Download Python)</li> <li>MongoDB 4.4+ (local or cloud instance)</li> <li>Git for cloning the repository</li> <li>Telegram Bot Token from @BotFather</li> <li>Telegram API credentials from my.telegram.org</li> </ul>"},{"location":"getting-started/installation/#method-1-standard-installation","title":"Method 1: Standard Installation","text":""},{"location":"getting-started/installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/yourusername/StreamBot.git\ncd StreamBot\n</code></pre>"},{"location":"getting-started/installation/#2-create-virtual-environment","title":"2. Create Virtual Environment","text":"WindowsmacOS/Linux <pre><code>python -m venv venv\nvenv\\Scripts\\activate\n</code></pre> <pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre>"},{"location":"getting-started/installation/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#4-environment-configuration","title":"4. Environment Configuration","text":"<pre><code># Copy the example environment file\ncp .env.example .env\n\n# Edit the configuration file\nnano .env  # or use your preferred editor\n</code></pre>"},{"location":"getting-started/installation/#method-2-docker-installation","title":"Method 2: Docker Installation","text":""},{"location":"getting-started/installation/#1-using-docker-compose-recommended","title":"1. Using Docker Compose (Recommended)","text":"<pre><code># Clone repository\ngit clone https://github.com/yourusername/StreamBot.git\ncd StreamBot\n\n# Copy environment file\ncp .env.example .env\n# Edit .env with your configuration\n\n# Start with Docker Compose\ndocker-compose up -d\n</code></pre>"},{"location":"getting-started/installation/#2-using-docker-only","title":"2. Using Docker Only","text":"<pre><code># Build the image\ndocker build -t streambot .\n\n# Run the container\ndocker run -d \\\n  --name streambot \\\n  --env-file .env \\\n  -p 8080:8080 \\\n  streambot\n</code></pre>"},{"location":"getting-started/installation/#post-installation-setup","title":"Post-Installation Setup","text":""},{"location":"getting-started/installation/#1-telegram-bot-setup","title":"1. Telegram Bot Setup","text":"<ol> <li>Create a Bot:</li> <li>Message @BotFather on Telegram</li> <li>Send <code>/newbot</code> and follow the instructions</li> <li> <p>Save the bot token</p> </li> <li> <p>Create Log Channel:</p> </li> <li>Create a private Telegram channel</li> <li>Add your bot as an admin with \"Post Messages\" permission</li> <li> <p>Get the channel ID using @username_to_id_bot</p> </li> <li> <p>Get API Credentials:</p> </li> <li>Visit my.telegram.org</li> <li>Log in with your phone number</li> <li>Go to \"API Development Tools\"</li> <li>Create a new application to get API ID and Hash</li> </ol>"},{"location":"getting-started/installation/#2-mongodb-setup","title":"2. MongoDB Setup","text":"Local MongoDBMongoDB Atlas (Cloud) <pre><code># Install MongoDB (Ubuntu/Debian)\nsudo apt update\nsudo apt install mongodb\n\n# Start MongoDB service\nsudo systemctl start mongodb\nsudo systemctl enable mongodb\n</code></pre> <ol> <li>Create account at MongoDB Atlas</li> <li>Create a new cluster</li> <li>Get connection string</li> <li>Whitelist your IP address</li> </ol>"},{"location":"getting-started/installation/#3-configuration","title":"3. Configuration","text":"<p>Edit your <code>.env</code> file with the following required variables:</p> <pre><code># Telegram Configuration\nAPI_ID=your_api_id_here\nAPI_HASH=your_api_hash_here\nBOT_TOKEN=your_bot_token_here\nLOG_CHANNEL=-1001234567890\n\n# Database Configuration\nDATABASE_URL=mongodb://localhost:27017\nDATABASE_NAME=StreamBotDB\n\n# Server Configuration\nBASE_URL=http://localhost:8080\nPORT=8080\nBIND_ADDRESS=127.0.0.1\n\n# Admin Configuration\nADMINS=your_telegram_user_id\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":""},{"location":"getting-started/installation/#1-test-the-installation","title":"1. Test the Installation","text":"<pre><code># Start StreamBot\npython -m StreamBot\n</code></pre> <p>You should see output like: <pre><code>INFO - StreamBot starting up...\nINFO - Primary bot client operational as @YourBotName\nINFO - Web server started on http://127.0.0.1:8080\n</code></pre></p>"},{"location":"getting-started/installation/#2-test-bot-functionality","title":"2. Test Bot Functionality","text":"<ol> <li>Send <code>/start</code> to your bot on Telegram</li> <li>Send a file to test link generation</li> <li>Visit <code>http://localhost:8080/api/info</code> to check API status</li> </ol>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>Bot token invalid: <pre><code>ERROR - Bot token is invalid\n</code></pre> - Verify your bot token in the <code>.env</code> file - Ensure there are no extra spaces or characters</p> <p>Database connection failed: <pre><code>ERROR - Failed to connect to MongoDB\n</code></pre> - Check if MongoDB is running: <code>sudo systemctl status mongodb</code> - Verify DATABASE_URL in your <code>.env</code> file</p> <p>Port already in use: <pre><code>ERROR - Port 8080 is already in use\n</code></pre> - Change the PORT in your <code>.env</code> file - Or stop the process using port 8080</p> <p>Permission denied for log channel: <pre><code>ERROR - Bot doesn't have permission to post in log channel\n</code></pre> - Ensure the bot is added as admin to your log channel - Verify the LOG_CHANNEL ID is correct (should be negative for channels)</p>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the troubleshooting section</li> <li>Review logs for error messages</li> <li>Join our community discussions</li> <li>Report bugs on GitHub Issues</li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once installation is complete:</p> <ol> <li>Configure your bot with additional settings</li> <li>Follow the Quick Start guide for basic usage</li> <li>Review the User Guide for detailed features </li> </ol>"},{"location":"getting-started/introduction/","title":"Introduction to StreamBot","text":"<p>StreamBot is a powerful Telegram bot that generates direct download links for files sent to it. It allows you to share files of any size through Telegram, providing recipients with direct download links that don't require a Telegram account to access.</p>"},{"location":"getting-started/introduction/#what-streambot-does","title":"What StreamBot Does","text":"<p>StreamBot solves a common problem: sharing large files through Telegram in a way that anyone can access them. When you send a file to StreamBot, it:</p> <ol> <li>Processes the file securely</li> <li>Stores it using Telegram's infrastructure</li> <li>Generates a direct download link</li> <li>Manages bandwidth and download limits</li> <li>Tracks usage statistics</li> </ol>"},{"location":"getting-started/introduction/#key-benefits","title":"Key Benefits","text":"<ul> <li> <p> High Performance</p> <p>Multi-client architecture ensures fast processing and downloads even under heavy load.</p> </li> <li> <p> Controlled Access</p> <p>Configure download limits, rate limiting, and optional force subscription for greater control.</p> </li> <li> <p> Usage Monitoring</p> <p>Track bandwidth usage, user statistics, and system performance in real-time.</p> </li> <li> <p> API Integration</p> <p>REST API allows integration with your applications and services.</p> </li> </ul>"},{"location":"getting-started/introduction/#who-should-use-streambot","title":"Who Should Use StreamBot","text":"<p>StreamBot is ideal for:</p> <ul> <li>Content Creators sharing files with audiences</li> <li>Businesses distributing documents to clients</li> <li>Developers sharing builds or large code packages</li> <li>Communities managing file distribution</li> <li>Personal Users who want simple file sharing with friends and family</li> </ul>"},{"location":"getting-started/introduction/#how-it-works","title":"How It Works","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Bot\n    participant Storage\n    participant Recipient\n\n    User-&gt;&gt;Bot: Send file\n    Bot-&gt;&gt;Storage: Store file\n    Storage--&gt;&gt;Bot: File stored successfully\n    Bot-&gt;&gt;User: Return download link\n    User-&gt;&gt;Recipient: Share download link\n    Recipient-&gt;&gt;Storage: Request file via link\n    Storage--&gt;&gt;Recipient: Stream file to recipient</code></pre>"},{"location":"getting-started/introduction/#getting-started","title":"Getting Started","text":"<p>Ready to get started with StreamBot? The next sections will guide you through:</p> <ol> <li>Installation - How to set up StreamBot</li> <li>Configuration - Configuring your bot</li> <li>Quick Start - Getting up and running quickly</li> </ol>"},{"location":"getting-started/introduction/#features-at-a-glance","title":"Features at a Glance","text":"Feature Description Direct Download Links Generate shareable links for any file Multi-Client Support Distribute load across multiple Telegram clients Bandwidth Management Track and limit bandwidth usage Rate Limiting Control access frequency per user Force Subscription Require users to join channels before using the bot Admin Commands Monitor and manage the bot via Telegram REST API Integrate with your own applications Automatic Cleanup Maintain system resources efficiently"},{"location":"getting-started/introduction/#next-steps","title":"Next Steps","text":"<p>Proceed to the Installation Guide to set up your own StreamBot instance. </p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get StreamBot up and running in just a few minutes! This guide assumes you have already completed the installation.</p>"},{"location":"getting-started/quick-start/#prerequisites-check","title":"Prerequisites Check","text":"<p>Before starting, ensure you have:</p> <ul> <li> Python 3.8+ installed</li> <li> MongoDB running (local or cloud)</li> <li> StreamBot repository cloned</li> <li> Dependencies installed (<code>pip install -r requirements.txt</code>)</li> </ul>"},{"location":"getting-started/quick-start/#step-1-get-telegram-credentials","title":"Step 1: Get Telegram Credentials","text":""},{"location":"getting-started/quick-start/#create-a-telegram-bot","title":"Create a Telegram Bot","text":"<ol> <li>Open Telegram and message @BotFather</li> <li>Send <code>/newbot</code> command</li> <li>Follow the prompts to create your bot</li> <li>Save the bot token (format: <code>123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi</code>)</li> </ol>"},{"location":"getting-started/quick-start/#get-api-credentials","title":"Get API Credentials","text":"<ol> <li>Visit my.telegram.org</li> <li>Log in with your phone number</li> <li>Go to \"API Development Tools\"</li> <li>Create a new application</li> <li>Note down your <code>API ID</code> and <code>API Hash</code></li> </ol>"},{"location":"getting-started/quick-start/#create-log-channel","title":"Create Log Channel","text":"<ol> <li>Create a private Telegram channel</li> <li>Add your bot as an administrator</li> <li>Give the bot \"Post Messages\" permission</li> <li>Get the channel ID:</li> <li>Forward a message from the channel to @username_to_id_bot</li> <li>The ID will be negative (e.g., <code>-1001234567890</code>)</li> </ol>"},{"location":"getting-started/quick-start/#step-2-configure-environment","title":"Step 2: Configure Environment","text":"<p>Create your <code>.env</code> file:</p> <pre><code>cp .env.example .env\n</code></pre> <p>Edit the <code>.env</code> file with your credentials:</p> <pre><code># Replace with your actual values\nAPI_ID=12345678\nAPI_HASH=your_api_hash_here\nBOT_TOKEN=123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi\nLOG_CHANNEL=-1001234567890\n\n# Database (adjust if needed)\nDATABASE_URL=mongodb://localhost:27017\nDATABASE_NAME=StreamBotDB\n\n# Server settings\nBASE_URL=http://localhost:8080\nPORT=8080\nBIND_ADDRESS=127.0.0.1\n\n# Your Telegram user ID (get from @username_to_id_bot)\nADMINS=your_telegram_user_id\n</code></pre>"},{"location":"getting-started/quick-start/#step-3-start-streambot","title":"Step 3: Start StreamBot","text":"<pre><code># Activate virtual environment (if using one)\nsource venv/bin/activate  # Linux/macOS\n# or\nvenv\\Scripts\\activate     # Windows\n\n# Start the bot\npython -m StreamBot\n</code></pre> <p>You should see output like:</p> <pre><code>INFO - Starting Telegram Download Link Generator Bot...\nINFO - Primary bot client operational as @YourBotName\nINFO - Web server started successfully on http://127.0.0.1:8080\n</code></pre>"},{"location":"getting-started/quick-start/#step-4-test-your-bot","title":"Step 4: Test Your Bot","text":""},{"location":"getting-started/quick-start/#test-bot-commands","title":"Test Bot Commands","text":"<ol> <li>Open Telegram and find your bot</li> <li>Send <code>/start</code> command</li> <li>You should receive a welcome message</li> </ol>"},{"location":"getting-started/quick-start/#test-file-upload","title":"Test File Upload","text":"<ol> <li>Send any file to your bot (image, document, video, etc.)</li> <li>The bot should respond with a download link</li> <li>Click the link to test the download</li> </ol>"},{"location":"getting-started/quick-start/#test-api","title":"Test API","text":"<p>Open your browser and visit: <code>http://localhost:8080/api/info</code></p> <p>You should see JSON response with bot information.</p>"},{"location":"getting-started/quick-start/#step-5-verify-everything-works","title":"Step 5: Verify Everything Works","text":""},{"location":"getting-started/quick-start/#checklist","title":"\u2705 Checklist","text":"<ul> <li> Bot responds to <code>/start</code> command</li> <li> Bot generates download links for files</li> <li> Download links work in browser</li> <li> API endpoint returns bot information</li> <li> No error messages in console</li> </ul>"},{"location":"getting-started/quick-start/#common-issues","title":"Common Issues","text":"<p>Bot doesn't respond</p> <ul> <li>Check if <code>BOT_TOKEN</code> is correct</li> <li>Ensure bot is not blocked by Telegram</li> <li>Verify network connection</li> </ul> <p>Database errors</p> <ul> <li>Confirm MongoDB is running: <code>sudo systemctl status mongodb</code></li> <li>Check <code>DATABASE_URL</code> format</li> <li>Ensure database is accessible</li> </ul> <p>Download links don't work</p> <ul> <li>Verify <code>LOG_CHANNEL</code> ID is correct and negative</li> <li>Ensure bot has admin permissions in log channel</li> <li>Check if <code>BASE_URL</code> is accessible</li> </ul>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that StreamBot is running:</p>"},{"location":"getting-started/quick-start/#basic-usage","title":"Basic Usage","text":"<ol> <li>Send files to your bot to get download links</li> <li>Share links with others for easy file access</li> <li>Use admin commands like <code>/stats</code> to monitor usage</li> </ol>"},{"location":"getting-started/quick-start/#advanced-configuration","title":"Advanced Configuration","text":"<ol> <li>Enable rate limiting: Set <code>MAX_LINKS_PER_DAY=5</code> in <code>.env</code></li> <li>Add bandwidth limits: Set <code>BANDWIDTH_LIMIT_GB=100</code></li> <li>Force subscription: Set <code>FORCE_SUB_CHANNEL</code> to require users to join a channel</li> </ol>"},{"location":"getting-started/quick-start/#production-deployment","title":"Production Deployment","text":"<p>For production use:</p> <ol> <li>Get a domain name and set up HTTPS</li> <li>Use a cloud database like MongoDB Atlas</li> <li>Deploy to a VPS or cloud platform</li> <li>Set up monitoring and backup systems</li> </ol>"},{"location":"getting-started/quick-start/#useful-commands","title":"Useful Commands","text":""},{"location":"getting-started/quick-start/#bot-commands-telegram","title":"Bot Commands (Telegram)","text":"Command Description <code>/start</code> Welcome message <code>/help</code> Show help information <code>/stats</code> Show bot statistics (admin only) <code>/logs</code> View recent logs (admin only)"},{"location":"getting-started/quick-start/#admin-commands-telegram","title":"Admin Commands (Telegram)","text":"Command Description Usage <code>/stats</code> Check system statistics <code>/stats</code> <code>/logs</code> View logs with filtering <code>/logs level=ERROR limit=50</code> <code>/broadcast</code> Send message to all users Reply to message with <code>/broadcast</code>"},{"location":"getting-started/quick-start/#api-endpoints","title":"API Endpoints","text":"Endpoint Description <code>GET /api/info</code> Bot status and information <code>GET /dl/{file_id}</code> Download file via link"},{"location":"getting-started/quick-start/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check logs for error messages</li> <li>Review configuration in your <code>.env</code> file</li> <li>Consult documentation:</li> <li>Configuration Guide</li> <li>User Guide</li> <li>Troubleshooting</li> <li>Get community support:</li> <li>GitHub Discussions</li> <li>GitHub Issues</li> </ol>"},{"location":"getting-started/quick-start/#whats-next","title":"What's Next?","text":"<ul> <li>User Guide - Learn about all features</li> <li>Deployment Guide - Deploy to production</li> <li>API Reference - Integrate with your applications</li> <li>Developer Guide - Understand the architecture</li> </ul> <p>Congratulations! StreamBot is now running successfully. \ud83c\udf89 </p>"},{"location":"user-guide/bot-commands/","title":"Bot Commands Reference","text":"<p>StreamBot provides various commands for users and administrators. This page documents all available commands and their usage.</p>"},{"location":"user-guide/bot-commands/#user-commands","title":"User Commands","text":"<p>These commands are available to all users of the bot.</p>"},{"location":"user-guide/bot-commands/#basic-commands","title":"Basic Commands","text":""},{"location":"user-guide/bot-commands/#start","title":"<code>/start</code>","text":"<p>Description: Initialize interaction with the bot and display welcome message.</p> <p>Usage: <code>/start</code></p> <p>Response: Welcome message with bot information and basic instructions.</p> <p>Example: <pre><code>\ud83d\ude80 Welcome to StreamBot!\n\nI can convert your files into direct download links.\nSimply send me any file and I'll generate a shareable link for you.\n\nCommands:\n\u2022 /help - Show available commands\n\u2022 /info - Bot statistics and status\n</code></pre></p>"},{"location":"user-guide/bot-commands/#help","title":"<code>/help</code>","text":"<p>Description: Display list of available commands and their descriptions.</p> <p>Usage: <code>/help</code></p> <p>Response: Comprehensive command list with descriptions.</p>"},{"location":"user-guide/bot-commands/#info","title":"<code>/info</code>","text":"<p>Description: Show bot statistics, uptime, and current status.</p> <p>Usage: <code>/info</code></p> <p>Response:  - Bot uptime - Total users - Current bandwidth usage - Available features - Server status</p> <p>Example: <pre><code>\ud83d\udcca StreamBot Information\n\n\ud83e\udd16 Bot: @YourStreamBot\n\u23f0 Uptime: 5d 12h 34m 16s\n\ud83d\udc65 Total Users: 1,247\n\ud83d\udcc8 Bandwidth Used: 45.2 GB / 100 GB this month\n\ud83d\udd17 Links Generated Today: 127\n\nFeatures:\n\u2705 Force Subscription: Enabled\n\u2705 Link Expiry: 24 hours\n\u2705 Rate Limiting: 5 links/day\n</code></pre></p>"},{"location":"user-guide/bot-commands/#file-upload","title":"File Upload","text":""},{"location":"user-guide/bot-commands/#send-any-file","title":"Send Any File","text":"<p>Description: Upload a file to generate a direct download link.</p> <p>Usage: Simply send any file (document, image, video, audio, etc.)</p> <p>Supported Types: - Documents (PDF, DOCX, TXT, etc.) - Images (JPG, PNG, GIF, etc.) - Videos (MP4, AVI, MKV, etc.) - Audio (MP3, FLAC, OGG, etc.) - Archives (ZIP, RAR, 7Z, etc.) - Any other file type</p> <p>Response: Direct download link with file information.</p> <p>Example: <pre><code>\u2705 File uploaded successfully!\n\n\ud83d\udcc1 Filename: document.pdf\n\ud83d\udccf Size: 2.4 MB\n\ud83d\udd17 Download Link: https://yourdomain.com/dl/abc123/document.pdf\n\n\u23f0 Link expires in 24 hours\n\ud83d\udcca Daily links remaining: 4/5\n</code></pre></p>"},{"location":"user-guide/bot-commands/#personal-statistics","title":"Personal Statistics","text":""},{"location":"user-guide/bot-commands/#stats","title":"<code>/stats</code>","text":"<p>Description: View your personal usage statistics.</p> <p>Usage: <code>/stats</code></p> <p>Response: Personal usage data including: - Links generated today - Bandwidth used this month - Total files uploaded - Account creation date</p> <p>Example: <pre><code>\ud83d\udcca Your Statistics\n\n\ud83d\udd17 Links Today: 2/5\n\ud83d\udcc8 Bandwidth This Month: 127.3 MB\n\ud83d\udcc1 Total Files: 45\n\ud83d\udcc5 Member Since: Jan 15, 2024\n\nDaily reset: 23:45:12\nMonthly reset: Jan 31, 2024\n</code></pre></p>"},{"location":"user-guide/bot-commands/#utility-commands","title":"Utility Commands","text":""},{"location":"user-guide/bot-commands/#ping","title":"<code>/ping</code>","text":"<p>Description: Check bot responsiveness and connection status.</p> <p>Usage: <code>/ping</code></p> <p>Response: Simple response time indication.</p> <p>Example: <pre><code>\ud83c\udfd3 Pong! \nResponse time: 0.12s\n</code></pre></p>"},{"location":"user-guide/bot-commands/#admin-commands","title":"Admin Commands","text":"<p>These commands are only available to users configured as administrators.</p>"},{"location":"user-guide/bot-commands/#system-monitoring","title":"System Monitoring","text":""},{"location":"user-guide/bot-commands/#stats_1","title":"<code>/stats</code>","text":"<p>Description: Check current system memory usage and statistics.</p> <p>Usage: <code>/stats</code></p> <p>Access: Admin only</p> <p>Response: Detailed memory usage information.</p> <p>Example: <pre><code>\ud83e\udde0 Memory Usage\n\nCurrent: 156.3 MB\nPeak: 203.7 MB\nAvailable: 1.8 GB\nUsage: 8.2%\n\nActive Connections: 23\nGarbage Collections: 47\nCache Size: 12.4 MB\n</code></pre></p>"},{"location":"user-guide/bot-commands/#logs","title":"<code>/logs</code>","text":"<p>Description: Access application logs with filtering options.</p> <p>Usage:  - <code>/logs</code> - Recent logs - <code>/logs level=ERROR</code> - Filter by log level - <code>/logs limit=50</code> - Limit number of entries - <code>/logs filter=download</code> - Filter by text content</p> <p>Access: Admin only</p> <p>Parameters: - <code>level</code>: DEBUG, INFO, WARNING, ERROR, CRITICAL - <code>limit</code>: Number of log entries (1-100) - <code>filter</code>: Text to search for in logs</p> <p>Example: <pre><code>\ud83d\udccb Application Logs (ERROR level, last 10 entries)\n\n2024-01-15 14:30:45 - ERROR - Download failed for message 12345\n2024-01-15 14:25:30 - ERROR - User 67890 hit rate limit\n2024-01-15 14:20:15 - ERROR - Database connection timeout\n\nTotal matching entries: 156\n</code></pre></p>"},{"location":"user-guide/bot-commands/#user-management","title":"User Management","text":""},{"location":"user-guide/bot-commands/#stats_global","title":"<code>/stats_global</code>","text":"<p>Description: View global bot statistics and user data.</p> <p>Usage: <code>/stats_global</code></p> <p>Access: Admin only</p> <p>Response: Comprehensive bot usage statistics.</p> <p>Example: <pre><code>\ud83c\udf0d Global Statistics\n\n\ud83d\udc65 Total Users: 1,247\n\ud83d\udd17 Links Generated: 15,643\n\ud83d\udcc8 Bandwidth Used: 892.4 GB\n\ud83d\udcc1 Files Processed: 12,891\n\n\ud83d\udcca Today's Activity:\n\u2022 New Users: 23\n\u2022 Links Generated: 234\n\u2022 Bandwidth: 45.2 GB\n\n\ud83c\udfc6 Top File Types:\n1. PDF (34%)\n2. Images (28%)\n3. Videos (21%)\n4. Archives (17%)\n</code></pre></p>"},{"location":"user-guide/bot-commands/#communication","title":"Communication","text":""},{"location":"user-guide/bot-commands/#broadcast","title":"<code>/broadcast</code>","text":"<p>Description: Send a message to all bot users.</p> <p>Usage: Reply to any message with <code>/broadcast</code></p> <p>Access: Admin only</p> <p>Process: 1. Compose your message 2. Reply to it with <code>/broadcast</code> 3. Confirm when prompted 4. Message sent to all users</p> <p>Example: <pre><code>\ud83d\udce2 Broadcasting Message\n\nMessage: \"Server maintenance scheduled for tonight at 2 AM UTC\"\nRecipients: 1,247 users\n\nType 'CONFIRM' to proceed or 'CANCEL' to abort.\n</code></pre></p> <p>Confirmation Response: <pre><code>\u2705 Broadcast sent successfully!\n\nSent to: 1,247 users\nFailed: 3 users (blocked bot)\nTime taken: 2.3 seconds\n</code></pre></p>"},{"location":"user-guide/bot-commands/#error-messages","title":"Error Messages","text":""},{"location":"user-guide/bot-commands/#common-error-responses","title":"Common Error Responses","text":""},{"location":"user-guide/bot-commands/#rate-limit-exceeded","title":"Rate Limit Exceeded","text":"<pre><code>\u26a0\ufe0f Rate Limit Exceeded\n\nYou've reached your daily limit of 5 links.\nLimit resets in: 14h 23m 45s\n\nUpgrade to premium for unlimited links!\n</code></pre>"},{"location":"user-guide/bot-commands/#file-too-large","title":"File Too Large","text":"<pre><code>\u274c File Too Large\n\nMaximum file size: 2 GB\nYour file size: 2.1 GB\n\nPlease compress or split your file.\n</code></pre>"},{"location":"user-guide/bot-commands/#bandwidth-exceeded","title":"Bandwidth Exceeded","text":"<pre><code>\ud83d\udcca Bandwidth Limit Exceeded\n\nMonthly limit: 100 GB\nUsed: 100.2 GB\n\nLimit resets on: Feb 1, 2024\n</code></pre>"},{"location":"user-guide/bot-commands/#force-subscription-required","title":"Force Subscription Required","text":"<pre><code>\ud83d\udd12 Subscription Required\n\nPlease join our channel to use this bot:\n\ud83d\udc49 @YourChannel\n\nAfter joining, send /start again.\n</code></pre>"},{"location":"user-guide/bot-commands/#invalid-command","title":"Invalid Command","text":"<pre><code>\u2753 Unknown Command\n\nI don't understand that command.\nUse /help to see available commands.\n</code></pre>"},{"location":"user-guide/bot-commands/#command-permissions","title":"Command Permissions","text":""},{"location":"user-guide/bot-commands/#permission-levels","title":"Permission Levels","text":"Command User Admin Description <code>/start</code> \u2705 \u2705 Welcome message <code>/help</code> \u2705 \u2705 Command help <code>/info</code> \u2705 \u2705 Bot information <code>/stats</code> \u2705 \u2705 Personal statistics <code>/ping</code> \u2705 \u2705 Connection test File Upload \u2705 \u2705 Generate download links <code>/stats</code> \u274c \u2705 System statistics <code>/logs</code> \u274c \u2705 Application logs <code>/stats_global</code> \u274c \u2705 Global statistics <code>/broadcast</code> \u274c \u2705 Message all users"},{"location":"user-guide/bot-commands/#becoming-an-admin","title":"Becoming an Admin","text":"<p>To become an admin:</p> <ol> <li>Get your Telegram User ID from @username_to_id_bot</li> <li>Add your ID to the <code>ADMINS</code> environment variable</li> <li>Restart the bot for changes to take effect</li> </ol> <pre><code>ADMINS=123456789 987654321\n</code></pre>"},{"location":"user-guide/bot-commands/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/bot-commands/#for-users","title":"For Users","text":"<ul> <li>Use descriptive filenames for better organization</li> <li>Check file sizes before uploading</li> <li>Monitor your usage to avoid hitting limits</li> <li>Keep download links secure if sensitive</li> </ul>"},{"location":"user-guide/bot-commands/#for-admins","title":"For Admins","text":"<ul> <li>Monitor system resources regularly with <code>/stats</code></li> <li>Check logs periodically for errors with <code>/logs</code></li> <li>Use broadcasting responsibly for important announcements only</li> <li>Review global stats to understand usage patterns</li> </ul>"},{"location":"user-guide/bot-commands/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/bot-commands/#command-not-working","title":"Command Not Working","text":"<ol> <li>Check spelling - Commands are case-sensitive</li> <li>Verify permissions - Some commands require admin access</li> <li>Try <code>/ping</code> to test bot connectivity</li> <li>Check bot status with <code>/info</code></li> </ol>"},{"location":"user-guide/bot-commands/#no-response-from-bot","title":"No Response from Bot","text":"<ol> <li>Check bot status by visiting the API endpoint</li> <li>Wait a moment - Bot might be under high load</li> <li>Try again in a few minutes</li> <li>Contact administrators if persistent</li> </ol> <p>For more help, see the User Guide or Troubleshooting section. </p>"},{"location":"user-guide/overview/","title":"User Guide Overview","text":"<p>StreamBot is designed to be simple yet powerful. This guide covers all features and how to use them effectively.</p>"},{"location":"user-guide/overview/#core-functionality","title":"Core Functionality","text":""},{"location":"user-guide/overview/#file-to-link-conversion","title":"File to Link Conversion","text":"<p>StreamBot's primary function is converting files sent via Telegram into direct download links that can be shared with anyone.</p> <pre><code>graph LR\n    A[User sends file] --&gt; B[Bot processes file]\n    B --&gt; C[File stored securely]\n    C --&gt; D[Download link generated]\n    D --&gt; E[Link shared with user]</code></pre>"},{"location":"user-guide/overview/#supported-file-types","title":"Supported File Types","text":"<p>StreamBot supports all file types that Telegram accepts:</p> <ul> <li>Documents: PDF, DOCX, TXT, ZIP, etc.</li> <li>Images: JPG, PNG, GIF, WebP, etc.</li> <li>Videos: MP4, AVI, MKV, etc.</li> <li>Audio: MP3, FLAC, OGG, etc.</li> <li>Archives: ZIP, RAR, 7Z, etc.</li> <li>Any other file type up to Telegram's size limits</li> </ul>"},{"location":"user-guide/overview/#basic-usage","title":"Basic Usage","text":""},{"location":"user-guide/overview/#getting-started","title":"Getting Started","text":"<ol> <li>Find your bot on Telegram (search for your bot's username)</li> <li>Send <code>/start</code> to begin using the bot</li> <li>Send any file to generate a download link</li> <li>Share the link with anyone who needs access</li> </ol>"},{"location":"user-guide/overview/#file-upload-process","title":"File Upload Process","text":"<ol> <li>Send a file to the bot via Telegram</li> <li>Wait for processing (usually instant for small files)</li> <li>Receive download link in the chat</li> <li>Copy and share the link as needed</li> </ol>"},{"location":"user-guide/overview/#download-links","title":"Download Links","text":"<p>Generated links have the format: <pre><code>https://yourdomain.com/dl/encoded_file_id/filename.ext\n</code></pre></p> <ul> <li>Links are permanent (unless expiration is enabled)</li> <li>No Telegram account required to download</li> <li>Direct downloads start immediately</li> <li>Range requests supported for partial downloads</li> </ul>"},{"location":"user-guide/overview/#user-commands","title":"User Commands","text":""},{"location":"user-guide/overview/#basic-commands","title":"Basic Commands","text":"Command Description Example <code>/start</code> Welcome message and bot info <code>/start</code> <code>/help</code> Show available commands <code>/help</code> <code>/info</code> Bot statistics and status <code>/info</code>"},{"location":"user-guide/overview/#information-commands","title":"Information Commands","text":"Command Description Access <code>/stats</code> Personal usage statistics All users <code>/ping</code> Check bot responsiveness All users"},{"location":"user-guide/overview/#features-in-detail","title":"Features in Detail","text":""},{"location":"user-guide/overview/#rate-limiting","title":"Rate Limiting","text":"<p>StreamBot implements rate limiting to prevent abuse:</p> <ul> <li>Daily limits on link generation (configurable)</li> <li>Per-user tracking of usage</li> <li>Automatic reset at midnight UTC</li> <li>Graceful handling when limits are reached</li> </ul> <p>Rate Limit Reached</p> <p>When you reach your daily limit, the bot will inform you how long until reset.</p>"},{"location":"user-guide/overview/#bandwidth-management","title":"Bandwidth Management","text":"<p>Monitor and control data usage:</p> <ul> <li>Monthly bandwidth tracking per user</li> <li>Global bandwidth limits (if configured)</li> <li>Real-time usage statistics</li> <li>Automatic cleanup of old usage data</li> </ul>"},{"location":"user-guide/overview/#force-subscription","title":"Force Subscription","text":"<p>If enabled, users must join specified channels before using the bot:</p> <ul> <li>Channel verification before each use</li> <li>Automatic checking of membership status</li> <li>Graceful prompts to join required channels</li> <li>Multiple channels can be required</li> </ul>"},{"location":"user-guide/overview/#link-expiration","title":"Link Expiration","text":"<p>Optional link expiration for enhanced security:</p> <ul> <li>Configurable expiration time (default: 24 hours)</li> <li>Automatic cleanup of expired links</li> <li>Clear expiration notices in generated links</li> <li>Can be disabled for permanent links</li> </ul>"},{"location":"user-guide/overview/#admin-features","title":"Admin Features","text":""},{"location":"user-guide/overview/#admin-commands","title":"Admin Commands","text":"Command Description Usage <code>/stats</code> Check system statistics <code>/stats</code> <code>/logs</code> View application logs <code>/logs level=ERROR limit=50</code> <code>/broadcast</code> Send message to all users Reply to message with <code>/broadcast</code> <code>/stats_global</code> Global bot statistics <code>/stats_global</code>"},{"location":"user-guide/overview/#log-access","title":"Log Access","text":"<p>Admins can access detailed logs:</p> <pre><code>/logs level=INFO limit=100\n/logs level=ERROR limit=50\n/logs filter=download\n</code></pre> <p>Log Levels: <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>CRITICAL</code></p>"},{"location":"user-guide/overview/#broadcasting","title":"Broadcasting","text":"<p>Send announcements to all bot users:</p> <ol> <li>Compose your message in Telegram</li> <li>Reply to it with <code>/broadcast</code></li> <li>Confirm when prompted</li> <li>Message sent to all users</li> </ol>"},{"location":"user-guide/overview/#memory-monitoring","title":"Memory Monitoring","text":"<p>Track system resource usage:</p> <ul> <li>Current memory usage</li> <li>Peak memory usage</li> <li>Active connections</li> <li>Garbage collection stats</li> </ul>"},{"location":"user-guide/overview/#api-access","title":"API Access","text":""},{"location":"user-guide/overview/#public-endpoints","title":"Public Endpoints","text":"<p>Anyone can access these endpoints:</p> Endpoint Description <code>GET /api/info</code> Bot status and public information <code>GET /dl/{file_id}</code> Download files via generated links"},{"location":"user-guide/overview/#admin-endpoints","title":"Admin Endpoints","text":"<p>Require authentication:</p> Endpoint Description Authentication <code>GET /api/logs</code> Access application logs Token + IP whitelist"},{"location":"user-guide/overview/#example-api-usage","title":"Example API Usage","text":"<pre><code># Get bot information\ncurl https://yourdomain.com/api/info\n\n# Download a file\ncurl -O https://yourdomain.com/dl/encoded_file_id/filename.pdf\n\n# Access logs (admin only)\ncurl \"https://yourdomain.com/api/logs?token=your_token&amp;level=ERROR&amp;limit=50\"\n</code></pre>"},{"location":"user-guide/overview/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/overview/#common-issues","title":"Common Issues","text":"<p>Bot doesn't respond to commands</p> <p>Possible causes: - Bot is offline or restarting - You're not in a private chat with the bot - Bot is experiencing high load</p> <p>Solutions: - Wait a few minutes and try again - Check bot status at <code>/api/info</code> - Contact administrator</p> <p>File upload fails</p> <p>Possible causes: - File too large (&gt;2GB for Telegram) - Rate limit reached - Bandwidth limit exceeded - Bot storage issues</p> <p>Solutions: - Check file size limits - Wait for rate limit reset - Try again later - Contact administrator if persistent</p> <p>Download links don't work</p> <p>Possible causes: - Link has expired - Server is down - Network connectivity issues - File was removed</p> <p>Solutions: - Generate a new link - Check server status - Try from different network - Contact administrator</p> <p>Can't access admin features</p> <p>Possible causes: - Not configured as admin - IP address not whitelisted - Invalid access token</p> <p>Solutions: - Check admin configuration - Verify IP whitelist - Update access tokens</p>"},{"location":"user-guide/overview/#error-messages","title":"Error Messages","text":"Error Meaning Solution \"Rate limit exceeded\" Too many requests Wait for reset time \"File too large\" Exceeds size limits Use smaller file \"Bandwidth exceeded\" Monthly limit reached Wait for monthly reset \"Join required channels\" Subscription required Join specified channels \"Link expired\" Download link invalid Generate new link"},{"location":"user-guide/overview/#getting-support","title":"Getting Support","text":"<p>If you need help:</p> <ol> <li>Check this documentation for common solutions</li> <li>Review error messages carefully</li> <li>Test with different files to isolate issues</li> <li>Contact administrators via configured support channels</li> <li>Report bugs on GitHub Issues (if applicable)</li> </ol>"},{"location":"user-guide/overview/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/overview/#for-users","title":"For Users","text":"<ul> <li>Use descriptive filenames for better organization</li> <li>Check file sizes before uploading large files</li> <li>Share links responsibly and only with intended recipients</li> <li>Monitor your usage to avoid hitting limits</li> <li>Keep download links secure if they contain sensitive content</li> </ul>"},{"location":"user-guide/overview/#for-administrators","title":"For Administrators","text":"<ul> <li>Set appropriate limits based on your server capacity</li> <li>Monitor system resources regularly</li> <li>Keep software updated for security and features</li> <li>Backup configuration and database regularly</li> <li>Review logs for unusual activity</li> </ul>"},{"location":"user-guide/overview/#advanced-usage","title":"Advanced Usage","text":""},{"location":"user-guide/overview/#multiple-file-sharing","title":"Multiple File Sharing","text":"<p>For sharing multiple files:</p> <ol> <li>Create an archive (ZIP, RAR, etc.) containing all files</li> <li>Upload the archive to get a single download link</li> <li>Share the archive link instead of multiple individual links</li> </ol>"},{"location":"user-guide/overview/#integration-with-applications","title":"Integration with Applications","text":"<p>Use the API to integrate StreamBot with your applications:</p> <ul> <li>Automated file sharing for your services</li> <li>Programmatic link generation via API calls</li> <li>Status monitoring for system health</li> <li>Log analysis for usage patterns</li> </ul> <p>This completes the user guide overview. For specific features, see the dedicated sections in this guide. </p>"}]}