{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"StreamBot","text":"<ul> <li> <p> Telegram File to Link Generator</p> <p>Instantly convert Telegram files to direct download links with StreamBot.</p> <p> Get started</p> </li> <li> <p> High Performance Architecture</p> <p>Built with a multi-client architecture for maximum speed and reliability.</p> <p> Architecture</p> </li> <li> <p> Integrated Security Monitoring</p> <p>Real-time security status monitoring with comprehensive admin tools and log management.</p> <p> Security</p> </li> <li> <p> REST API</p> <p>Simple REST API with status monitoring and information endpoints.</p> <p> API Reference</p> </li> </ul>"},{"location":"#what-is-streambot","title":"What is StreamBot?","text":"<p>StreamBot is a high-performance Telegram bot that generates direct download links for files sent to it. It's built with a modern asynchronous Python architecture featuring multi-client support, bandwidth management, advanced rate limiting, and integrated security monitoring.</p> <p>Whether you're sharing media, documents, or any other files, StreamBot makes it simple to distribute content via direct links without requiring recipients to use Telegram.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udd17 Direct Download Links - Convert Telegram files to direct download URLs</li> <li>\u26a1 High Performance - Multi-client architecture with load balancing</li> <li>\ud83d\udee1\ufe0f Security Monitoring - Real-time security status with comprehensive admin tools</li> <li>\ud83d\udcca Bandwidth Management - Built-in bandwidth tracking and limits</li> <li>\ud83d\udea6 Advanced Rate Limiting - Per-user rate limiting with configurable daily limits</li> <li>\ud83d\udd12 Force Subscription - Optional channel subscription requirement</li> <li>\ud83d\udcf1 Simple Web Interface - RESTful API with status monitoring</li> <li>\ud83e\uddf9 Auto Cleanup - Automatic cleanup of expired links and resources</li> <li>\ud83d\udcc8 Enhanced Admin Tools - Advanced logging with filtering, system monitoring, and broadcast features</li> <li>\u2696\ufe0f Performance Optimized - Lightweight architecture for optimal speed</li> </ul>"},{"location":"#security-monitoring-features","title":"\ud83d\udee1\ufe0f Security &amp; Monitoring Features","text":"<p>StreamBot includes integrated security monitoring designed for production use:</p>"},{"location":"#admin-security-tools","title":"Admin Security Tools","text":"<ul> <li>Admin Verification with Telegram user ID authentication</li> <li>Enhanced System Monitoring with <code>/stats</code> command showing:</li> <li>Real-time security status</li> <li>Rate limiting and DDoS protection status</li> <li>Input validation and security headers status</li> <li>Authentication methods and admin verification</li> <li>Recent security events analysis</li> <li>Advanced Log Management with <code>/logs</code> command featuring:</li> <li>Direct log file transmission via Telegram</li> <li>Filtering by log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)</li> <li>Text search capabilities with parameter support</li> <li>Automatic log sanitization (removes sensitive data)</li> <li>Pagination and limit controls</li> </ul>"},{"location":"#protection-performance","title":"Protection &amp; Performance","text":"<ul> <li>Rate Limiting with configurable daily limits per user</li> <li>Input Validation and XSS prevention</li> <li>Security Headers for web endpoints</li> <li>Request Size Limits and DoS protection</li> <li>Lightweight Security optimized for download performance</li> <li>Automatic Security Validation on startup</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Getting started with StreamBot is straightforward:</p> <pre><code># Clone the repository\ngit clone https://github.com/yourusername/StreamBot.git\ncd StreamBot\n\n# Install dependencies\npip install -r requirements.txt\n\n# Configure environment\ncp .env.example .env\n# Edit .env with your configuration\n\n# Run the bot\npython -m StreamBot\n</code></pre> <p>For complete setup instructions, see the Installation Guide.</p>"},{"location":"#how-it-works","title":"How It Works","text":"<ol> <li>User sends a file to the StreamBot Telegram bot</li> <li>Bot processes and validates the file securely</li> <li>Direct download link is generated with expiry controls</li> <li>Recipients can download the file directly via rate-limited links</li> </ol>"},{"location":"#admin-tools-architecture","title":"Admin Tools Architecture","text":"<p>StreamBot provides comprehensive admin tools accessible directly through Telegram:</p> <ul> <li>\u2705 Real-time System Monitoring - Memory usage, uptime, bandwidth tracking</li> <li>\u2705 Security Status Dashboard - Integrated security framework monitoring</li> <li>\u2705 Advanced Log Management - Direct access with filtering and search</li> <li>\u2705 User Management - Broadcast capabilities to all registered users</li> <li>\u2705 Performance Metrics - Active streams, client status, resource usage</li> <li>\u2705 Automatic Data Sanitization - Sensitive information protection in logs</li> </ul>"},{"location":"#project-status","title":"Project Status","text":"<p>StreamBot is actively maintained and regularly updated with new features, security improvements, and performance optimizations.</p> <p> </p>"},{"location":"#support-community","title":"Support &amp; Community","text":"<ul> <li>Issues: Report bugs or request features</li> <li>Discussions: Ask questions and share ideas</li> <li>Documentation: Complete setup and usage guide </li> </ul>"},{"location":"SECURITY_UPDATE_SUMMARY/","title":"\ud83d\udcda Security Framework Documentation Update Summary","text":"<p>This document summarizes all the documentation updates made to reflect StreamBot's comprehensive security framework implementation.</p>"},{"location":"SECURITY_UPDATE_SUMMARY/#updated-documentation-files","title":"\u2705 Updated Documentation Files","text":""},{"location":"SECURITY_UPDATE_SUMMARY/#1-api-documentation","title":"1. API Documentation","text":""},{"location":"SECURITY_UPDATE_SUMMARY/#docsapiendpointsmd","title":"<code>docs/api/endpoints.md</code>","text":"<ul> <li>\u2705 Added new <code>/api/security</code> endpoint documentation</li> <li>\u2705 Updated <code>/api/logs</code> with JWT authentication methods</li> <li>\u2705 Added security features section for download routes</li> <li>\u2705 Documented rate limiting by endpoint</li> <li>\u2705 Added authentication method comparison table</li> <li>\u2705 Updated error responses with new security codes</li> </ul>"},{"location":"SECURITY_UPDATE_SUMMARY/#docsapiauthenticationmd","title":"<code>docs/api/authentication.md</code>","text":"<ul> <li>\u2705 Complete rewrite with JWT authentication focus</li> <li>\u2705 Added three authentication methods (JWT, Legacy Token, Admin IP)</li> <li>\u2705 Security best practices and configuration examples</li> <li>\u2705 Token lifecycle management documentation</li> <li>\u2705 Migration guide from legacy to JWT authentication</li> <li>\u2705 Comprehensive error handling and troubleshooting</li> </ul>"},{"location":"SECURITY_UPDATE_SUMMARY/#2-deployment-documentation","title":"2. Deployment Documentation","text":""},{"location":"SECURITY_UPDATE_SUMMARY/#docsdeploymentsecuritymd","title":"<code>docs/deployment/security.md</code>","text":"<ul> <li>\u2705 Complete replacement of placeholder content</li> <li>\u2705 Production-ready security configuration guide</li> <li>\u2705 Server hardening instructions (OS, firewall, SSH)</li> <li>\u2705 Nginx security configuration with SSL/TLS</li> <li>\u2705 MongoDB security setup and authentication</li> <li>\u2705 Docker security best practices</li> <li>\u2705 Security monitoring and alerting setup</li> <li>\u2705 Fail2ban configuration for StreamBot</li> <li>\u2705 Security checklist for production deployment</li> </ul>"},{"location":"SECURITY_UPDATE_SUMMARY/#3-developer-documentation","title":"3. Developer Documentation","text":""},{"location":"SECURITY_UPDATE_SUMMARY/#docsdeveloper-guidearchitecturemd","title":"<code>docs/developer-guide/architecture.md</code>","text":"<ul> <li>\u2705 Added comprehensive security framework architecture section</li> <li>\u2705 Security component diagrams and flow charts</li> <li>\u2705 Performance optimization details</li> <li>\u2705 Security module structure documentation</li> <li>\u2705 Integration points explanation</li> </ul>"},{"location":"SECURITY_UPDATE_SUMMARY/#4-main-documentation","title":"4. Main Documentation","text":""},{"location":"SECURITY_UPDATE_SUMMARY/#docsindexmd","title":"<code>docs/index.md</code>","text":"<ul> <li>\u2705 Updated main landing page with security focus</li> <li>\u2705 Added enterprise security card to feature grid</li> <li>\u2705 Updated description to highlight security features</li> <li>\u2705 Added security-first architecture section</li> <li>\u2705 Updated getting started with security setup</li> <li>\u2705 Added security badge and links</li> </ul>"},{"location":"SECURITY_UPDATE_SUMMARY/#new-documentation-features","title":"\ud83c\udd95 New Documentation Features","text":""},{"location":"SECURITY_UPDATE_SUMMARY/#security-focused-content","title":"Security-Focused Content","text":"<ul> <li>Complete JWT authentication guide with code examples</li> <li>Production security checklist for deployment</li> <li>Real-time security monitoring endpoint documentation</li> <li>Security configuration validation guide</li> <li>Performance vs security balance explanation</li> </ul>"},{"location":"SECURITY_UPDATE_SUMMARY/#technical-documentation","title":"Technical Documentation","text":"<ul> <li>Security architecture diagrams using Mermaid</li> <li>Authentication flow sequences with step-by-step explanations</li> <li>Rate limiting strategy documentation with endpoint-specific rules</li> <li>Security event logging examples and monitoring setup</li> </ul>"},{"location":"SECURITY_UPDATE_SUMMARY/#practical-guides","title":"Practical Guides","text":"<ul> <li>Environment variable setup with security focus</li> <li>Secret generation commands for production use</li> <li>Nginx configuration with modern SSL/TLS settings</li> <li>Docker security best practices and hardening</li> <li>MongoDB security setup and connection strings</li> </ul>"},{"location":"SECURITY_UPDATE_SUMMARY/#documentation-quality-improvements","title":"\ud83d\udcca Documentation Quality Improvements","text":""},{"location":"SECURITY_UPDATE_SUMMARY/#before-vs-after","title":"Before vs After","text":"Aspect Before After Security Coverage Minimal placeholders Comprehensive enterprise guide API Authentication Basic token mention Multi-method JWT system Deployment Security \"Coming Soon\" placeholders Production-ready configurations Architecture Basic components Security framework integration Code Examples Limited Extensive with multiple languages"},{"location":"SECURITY_UPDATE_SUMMARY/#content-statistics","title":"Content Statistics","text":"<ul> <li>Total Pages Updated: 5 major documentation files</li> <li>New Content: ~15,000 words of security documentation</li> <li>Code Examples: 50+ practical examples across Python, bash, nginx, docker</li> <li>Configuration Templates: 20+ production-ready configuration snippets</li> </ul>"},{"location":"SECURITY_UPDATE_SUMMARY/#documentation-structure","title":"\ud83d\udd17 Documentation Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md                    # \u2705 Updated with security focus\n\u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 endpoints.md           # \u2705 New security endpoints + auth methods\n\u2502   \u251c\u2500\u2500 authentication.md      # \u2705 Complete JWT auth guide\n\u2502   \u2514\u2500\u2500 examples.md            # (Existing, compatible)\n\u251c\u2500\u2500 deployment/\n\u2502   \u251c\u2500\u2500 security.md           # \u2705 Comprehensive security guide\n\u2502   \u251c\u2500\u2500 docker.md             # (Ready for security integration)\n\u2502   \u2514\u2500\u2500 cloud-platforms.md    # (Ready for security integration)\n\u251c\u2500\u2500 developer-guide/\n\u2502   \u251c\u2500\u2500 architecture.md       # \u2705 Security framework architecture\n\u2502   \u2514\u2500\u2500 contributing.md       # (Ready for security guidelines)\n\u2514\u2500\u2500 SECURITY_UPDATE_SUMMARY.md # \u2705 This summary document\n</code></pre>"},{"location":"SECURITY_UPDATE_SUMMARY/#key-documentation-highlights","title":"\ud83c\udfaf Key Documentation Highlights","text":""},{"location":"SECURITY_UPDATE_SUMMARY/#for-system-administrators","title":"For System Administrators","text":"<ul> <li>Complete production deployment guide with security hardening</li> <li>Server security setup including firewall, fail2ban, and SSH hardening</li> <li>MongoDB security configuration with authentication and SSL/TLS</li> <li>Nginx security configuration with modern SSL and rate limiting</li> </ul>"},{"location":"SECURITY_UPDATE_SUMMARY/#for-developers","title":"For Developers","text":"<ul> <li>JWT authentication implementation with multi-factor verification</li> <li>Security framework architecture with component interactions</li> <li>API security best practices and error handling</li> <li>Performance optimization strategies for security components</li> </ul>"},{"location":"SECURITY_UPDATE_SUMMARY/#for-devops-engineers","title":"For DevOps Engineers","text":"<ul> <li>Docker security practices with non-root users and capability dropping</li> <li>Security monitoring setup with real-time dashboards</li> <li>Log management and alerting for security events</li> <li>Configuration validation and troubleshooting guides</li> </ul>"},{"location":"SECURITY_UPDATE_SUMMARY/#next-steps","title":"\ud83d\udcc8 Next Steps","text":"<p>The documentation is now production-ready and covers:</p> <p>\u2705 Complete security implementation guide \u2705 API authentication documentation \u2705 Deployment security best practices \u2705 Architecture and integration guides \u2705 Monitoring and troubleshooting </p>"},{"location":"SECURITY_UPDATE_SUMMARY/#recommended-actions","title":"Recommended Actions","text":"<ol> <li>Review security configuration using the updated guides</li> <li>Implement monitoring using the provided examples</li> <li>Test security features with the documented endpoints</li> <li>Deploy with confidence following the security checklist</li> </ol> <p>The StreamBot documentation now provides enterprise-grade security guidance while maintaining the performance optimization focus that makes the system efficient for high-volume file serving. </p>"},{"location":"about/acknowledgements/","title":"Acknowledgements","text":"<p>StreamBot is built on the shoulders of many amazing open source projects and contributors. We'd like to acknowledge everyone who has made this project possible.</p>"},{"location":"about/acknowledgements/#core-dependencies","title":"Core Dependencies","text":"<p>We're grateful to the maintainers of these essential libraries:</p>"},{"location":"about/acknowledgements/#telegram-integration","title":"Telegram Integration","text":"<ul> <li>Pyrogram - Modern, elegant and powerful Telegram MTProto API framework</li> <li>TgCrypto - Fast and secure cryptographic library for Pyrogram</li> </ul>"},{"location":"about/acknowledgements/#web-framework","title":"Web Framework","text":"<ul> <li>aiohttp - Async HTTP client/server framework for asyncio and Python</li> <li>aiohttp-cors - CORS support for aiohttp</li> </ul>"},{"location":"about/acknowledgements/#database","title":"Database","text":"<ul> <li>PyMongo - The official MongoDB driver for Python</li> <li>MongoDB - The database platform for modern applications</li> </ul>"},{"location":"about/acknowledgements/#utilities","title":"Utilities","text":"<ul> <li>python-dotenv - Environment variable management</li> <li>psutil - System and process monitoring utilities</li> </ul>"},{"location":"about/acknowledgements/#documentation","title":"Documentation","text":"<p>Our documentation is powered by:</p> <ul> <li>MkDocs - Static site generator for project documentation</li> <li>Material for MkDocs - Beautiful, modern documentation theme</li> <li>Mermaid - Diagram and flowchart generation</li> </ul>"},{"location":"about/acknowledgements/#development-tools","title":"Development Tools","text":"<ul> <li>Python - The programming language that powers StreamBot</li> <li>Docker - Containerization platform</li> <li>GitHub - Version control and project hosting</li> <li>GitHub Actions - CI/CD automation</li> </ul>"},{"location":"about/acknowledgements/#contributors","title":"Contributors","text":"<p>Thank you to everyone who has contributed to StreamBot:</p>"},{"location":"about/acknowledgements/#code-contributors","title":"Code Contributors","text":"<ul> <li>Core Team - Initial development and architecture</li> <li>Community Contributors - Bug fixes, features, and improvements</li> </ul>"},{"location":"about/acknowledgements/#documentation-contributors","title":"Documentation Contributors","text":"<ul> <li>Writers - Documentation improvements and clarifications</li> <li>Translators - Multi-language support (future)</li> <li>Reviewers - Quality assurance and feedback</li> </ul>"},{"location":"about/acknowledgements/#community-support","title":"Community Support","text":"<ul> <li>Issue Reporters - Bug reports and feature requests</li> <li>Testers - Quality assurance and feedback</li> <li>Users - Adoption and real-world testing</li> </ul>"},{"location":"about/acknowledgements/#special-thanks","title":"Special Thanks","text":""},{"location":"about/acknowledgements/#inspiration","title":"Inspiration","text":"<p>StreamBot was inspired by the need for simple, reliable file sharing solutions and the amazing capabilities of the Telegram Bot API.</p>"},{"location":"about/acknowledgements/#open-source-community","title":"Open Source Community","text":"<p>We're grateful to the broader open source community for creating the ecosystem that makes projects like StreamBot possible.</p>"},{"location":"about/acknowledgements/#users-and-adopters","title":"Users and Adopters","text":"<p>Thank you to everyone who uses StreamBot, reports issues, and helps make it better through feedback and contributions.</p>"},{"location":"about/acknowledgements/#recognition","title":"Recognition","text":""},{"location":"about/acknowledgements/#hall-of-fame","title":"Hall of Fame","text":"<p>This section will highlight significant contributors as the project grows.</p>"},{"location":"about/acknowledgements/#contributors_1","title":"Contributors","text":"<p>All contributors are automatically recognized in our GitHub Contributors page.</p>"},{"location":"about/acknowledgements/#how-to-contribute","title":"How to Contribute","text":"<p>Interested in being acknowledged here? Check out our Contributing Guide to get started!</p>"},{"location":"about/acknowledgements/#ways-to-contribute","title":"Ways to Contribute","text":"<ul> <li>Code contributions - Bug fixes and new features</li> <li>Documentation - Improvements and translations</li> <li>Community support - Helping users and answering questions</li> <li>Testing - Quality assurance and bug reporting</li> <li>Feedback - Feature suggestions and usability improvements</li> </ul>"},{"location":"about/acknowledgements/#licensing","title":"Licensing","text":"<p>All contributions to StreamBot are made under the MIT License, ensuring the project remains free and open source.</p> <p>If you feel your contribution should be specifically acknowledged here, please don't hesitate to open an issue or submit a pull request. </p>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to StreamBot will be documented in this file.</p>"},{"location":"about/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>Comprehensive MkDocs documentation system</li> <li>Professional GitHub Pages deployment  </li> <li>Enhanced API documentation with examples</li> <li>Improved configuration management guide</li> </ul>"},{"location":"about/changelog/#changed","title":"Changed","text":"<ul> <li>Restructured documentation for better navigation</li> <li>Updated README with proper documentation links</li> <li>Cleaned up code comments for better readability</li> </ul>"},{"location":"about/changelog/#fixed","title":"Fixed","text":"<ul> <li>Documentation structure and completeness</li> <li>Missing placeholder content</li> <li>Broken internal links</li> </ul>"},{"location":"about/changelog/#100-2024-01-15","title":"[1.0.0] - 2024-01-15","text":""},{"location":"about/changelog/#added_1","title":"Added","text":"<ul> <li>Initial release of StreamBot</li> <li>Multi-client Telegram bot architecture</li> <li>Direct download link generation</li> <li>MongoDB database integration</li> <li>Rate limiting and bandwidth management</li> <li>Force subscription feature</li> <li>Admin commands and monitoring</li> <li>RESTful API with status endpoints</li> </ul> <p>This is the initial release of StreamBot with all core features. </p>"},{"location":"about/license/","title":"License","text":"<p>StreamBot is open source software released under the MIT License.</p>"},{"location":"about/license/#mit-license","title":"MIT License","text":"<pre><code>MIT License\n\nCopyright (c) 2023-Present StreamBot Team\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"about/license/#what-this-means","title":"What This Means","text":"<p>The MIT License is a permissive open source license that allows you to:</p> <ul> <li>\u2705 Use the software for any purpose, including commercial use</li> <li>\u2705 Modify the source code to fit your needs</li> <li>\u2705 Distribute copies of the software</li> <li>\u2705 Sublicense the software under different terms</li> <li>\u2705 Sell copies or modifications of the software</li> </ul>"},{"location":"about/license/#requirements","title":"Requirements","text":"<p>When using StreamBot, you must:</p> <ul> <li>\ud83d\udccb Include the license notice in any copies or substantial portions</li> <li>\ud83d\udccb Include the copyright notice in any copies or substantial portions</li> </ul>"},{"location":"about/license/#limitations","title":"Limitations","text":"<p>The license provides:</p> <ul> <li>\u274c No warranty - the software is provided \"as is\"</li> <li>\u274c No liability - authors are not liable for any damages</li> <li>\u274c No trademark rights - you cannot use the StreamBot name or trademarks</li> </ul>"},{"location":"about/license/#third-party-licenses","title":"Third-Party Licenses","text":"<p>StreamBot uses several open source libraries, each with their own licenses:</p>"},{"location":"about/license/#python-dependencies","title":"Python Dependencies","text":"Package License Purpose Pyrogram LGPL-3.0 Telegram client library aiohttp Apache-2.0 Async HTTP server pymongo Apache-2.0 MongoDB driver python-dotenv BSD-3-Clause Environment file support"},{"location":"about/license/#documentation-dependencies","title":"Documentation Dependencies","text":"Package License Purpose MkDocs BSD-2-Clause Documentation generator Material for MkDocs MIT Documentation theme"},{"location":"about/license/#contributing","title":"Contributing","text":"<p>By contributing to StreamBot, you agree that your contributions will be licensed under the same MIT License that covers the project.</p>"},{"location":"about/license/#license-questions","title":"License Questions","text":"<p>If you have questions about the license or need clarification:</p> <ul> <li>Check the full license text</li> <li>Review MIT License FAQ</li> <li>Open an issue on GitHub</li> </ul> <p>For the complete and authoritative license text, please refer to the LICENSE file in the project repository. </p>"},{"location":"api/authentication/","title":"API Authentication","text":"<p>StreamBot uses a simplified admin verification system for API access. This guide explains the authentication method and how to access API endpoints.</p>"},{"location":"api/authentication/#authentication-overview","title":"Authentication Overview","text":"<p>StreamBot API uses admin verification based on Telegram user IDs for security and simplicity:</p> Method Security Level Performance Use Case Admin Verification \u2705 High \u26a1 Fast Admin access via bot commands Public Endpoints \ud83c\udf10 Open \u26a1 Fast File downloads, status info"},{"location":"api/authentication/#admin-access","title":"Admin Access","text":""},{"location":"api/authentication/#admin-configuration","title":"Admin Configuration","text":"<p>API access is controlled through the <code>ADMINS</code> environment variable:</p> <pre><code># Space-separated list of Telegram user IDs with admin access\nADMINS=123456789 987654321\n</code></pre>"},{"location":"api/authentication/#getting-your-telegram-user-id","title":"Getting Your Telegram User ID","text":"<p>To find your Telegram user ID:</p> <ol> <li>Forward any message from your account to @TGIdsBot</li> <li>Or send <code>/start</code> to @userinfobot</li> <li>Copy the User ID (numeric value) to your configuration</li> </ol>"},{"location":"api/authentication/#admin-commands-access","title":"Admin Commands Access","text":"<p>Admin users can access enhanced features directly through the Telegram bot:</p> <ul> <li>System Monitoring: <code>/stats</code> command with comprehensive system information</li> <li>Log Management: <code>/logs</code> command with filtering and search capabilities</li> <li>User Management: <code>/broadcast</code> command for messaging all users</li> </ul>"},{"location":"api/authentication/#api-endpoints","title":"API Endpoints","text":""},{"location":"api/authentication/#public-endpoints-no-authentication-required","title":"Public Endpoints (No Authentication Required)","text":""},{"location":"api/authentication/#file-downloads","title":"File Downloads","text":"<p><pre><code>GET /dl/{file_id}/{filename}\n</code></pre> - Purpose: Direct file downloads - Rate Limit: Global rate limiting applied - Access: Public (no authentication) - Example: <code>https://yourdomain.com/dl/abc123/document.pdf</code></p>"},{"location":"api/authentication/#bot-information","title":"Bot Information","text":"<p><pre><code>GET /api/info\n</code></pre> - Purpose: Bot status and configuration - Rate Limit: Standard rate limiting - Access: Public (no authentication) - Response: JSON with bot status, uptime, features</p> <p>Example Response: <pre><code>{\n  \"status\": \"online\",\n  \"uptime\": \"5d 12h 34m 16s\",\n  \"features\": {\n    \"force_subscription\": true,\n    \"link_expiry\": \"24 hours\",\n    \"rate_limiting\": \"5 links/day\"\n  },\n  \"bandwidth\": {\n    \"used_gb\": 45.2,\n    \"limit_gb\": 100,\n    \"percentage\": 45.2\n  },\n  \"users\": {\n    \"total\": 1247,\n    \"active_today\": 156\n  }\n}\n</code></pre></p>"},{"location":"api/authentication/#admin-only-features","title":"Admin-Only Features","text":"<p>Admin features are accessed directly through the Telegram bot interface rather than HTTP API:</p>"},{"location":"api/authentication/#system-statistics","title":"System Statistics","text":"<ul> <li>Command: <code>/stats</code> in Telegram bot</li> <li>Access: Admin users only</li> <li>Features: </li> <li>Memory usage monitoring</li> <li>Security status dashboard</li> <li>Bandwidth tracking</li> <li>Active streams count</li> </ul>"},{"location":"api/authentication/#log-management","title":"Log Management","text":"<ul> <li>Command: <code>/logs</code> in Telegram bot</li> <li>Access: Admin users only</li> <li>Features:</li> <li>Complete log file download</li> <li>Filtered log viewing</li> <li>Text search capabilities</li> <li>Automatic data sanitization</li> </ul>"},{"location":"api/authentication/#user-broadcast","title":"User Broadcast","text":"<ul> <li>Command: <code>/broadcast</code> in Telegram bot</li> <li>Access: Admin users only</li> <li>Features:</li> <li>Message all registered users</li> <li>Delivery status reporting</li> <li>Error handling for blocked users</li> </ul>"},{"location":"api/authentication/#example-usage","title":"Example Usage","text":""},{"location":"api/authentication/#public-api-access","title":"Public API Access","text":"<pre><code># Get bot information\ncurl \"https://yourdomain.com/api/info\"\n\n# Download file (if you have the link)\ncurl \"https://yourdomain.com/dl/abc123/document.pdf\" -o document.pdf\n</code></pre>"},{"location":"api/authentication/#admin-features-access","title":"Admin Features Access","text":"<p>Admin features are accessed through the Telegram bot:</p> <ol> <li>Start a private chat with your StreamBot</li> <li>Use admin commands like <code>/stats</code>, <code>/logs</code>, <code>/broadcast</code></li> <li>Verify you're in the ADMINS list in your configuration</li> </ol> <pre><code># Example admin interaction\nUser: /stats\nBot: \ud83d\udcca System Statistics\n     \ud83e\udde0 Memory Usage: 156.3 MB\n     \ud83c\udf10 Active Streams: 23\n     \ud83d\udee1\ufe0f Security Status: All systems active \u2705\n     ...\n\nUser: /logs level=ERROR limit=10\nBot: \ud83d\udccb Filtered Logs (ERROR level, 10 entries)\n     2024-01-15 14:30:45 - ERROR - Download failed for file xxx\n     ...\n</code></pre>"},{"location":"api/authentication/#configuration-examples","title":"Configuration Examples","text":""},{"location":"api/authentication/#environment-setup","title":"Environment Setup","text":"<pre><code># Basic Configuration\nAPI_ID=12345678\nAPI_HASH=your_api_hash_here\nBOT_TOKEN=your_bot_token_here\n\n# Admin Access Control\nADMINS=123456789 987654321  # Your Telegram user IDs\n\n# Bot Settings\nLOG_CHANNEL=-100xxxxxxxxxx\nBASE_URL=https://yourdomain.com\nPORT=8080\n\n# Optional Features\nFORCE_SUB_CHANNEL=-100yyyyyyyyyy\nMAX_LINKS_PER_DAY=5\nBANDWIDTH_LIMIT_GB=100\n</code></pre>"},{"location":"api/authentication/#security-considerations","title":"Security Considerations","text":"<ul> <li>Admin ID Verification: Only configured Telegram user IDs have admin access</li> <li>No Token Management: No JWT tokens or API keys to manage</li> <li>Direct Bot Access: Admin features accessed through secure Telegram interface</li> <li>Rate Limiting: All endpoints subject to appropriate rate limiting</li> <li>Data Sanitization: Sensitive information automatically removed from logs</li> </ul>"},{"location":"api/authentication/#rate-limiting","title":"Rate Limiting","text":"Endpoint Type Limit Scope Public API 100/minute Per IP File Downloads 500/minute Global Admin Commands Unlimited Admin users only"},{"location":"api/authentication/#error-responses","title":"Error Responses","text":""},{"location":"api/authentication/#common-http-status-codes","title":"Common HTTP Status Codes","text":"<ul> <li>200 OK: Successful request</li> <li>404 Not Found: Endpoint or file not found</li> <li>429 Too Many Requests: Rate limit exceeded</li> <li>500 Internal Server Error: Server error (generic message)</li> </ul>"},{"location":"api/authentication/#example-error-response","title":"Example Error Response","text":"<pre><code>{\n  \"error\": \"Rate limit exceeded\",\n  \"retry_after\": 60,\n  \"message\": \"Please try again in 60 seconds\"\n}\n</code></pre>"},{"location":"api/authentication/#migration-from-token-based-systems","title":"Migration from Token-Based Systems","text":"<p>If you're migrating from a token-based API system:</p> <ol> <li>Remove token configuration from environment variables</li> <li>Configure admin user IDs in the <code>ADMINS</code> environment variable</li> <li>Use Telegram bot interface for admin features instead of HTTP API</li> <li>Update automation scripts to use public endpoints only</li> <li>Manual admin tasks can be performed through the bot interface</li> </ol>"},{"location":"api/authentication/#best-practices","title":"Best Practices","text":""},{"location":"api/authentication/#for-developers","title":"For Developers","text":"<ul> <li>Use public endpoints for automated file access</li> <li>Access admin features through the Telegram bot interface</li> <li>Implement proper rate limiting in your applications</li> <li>Handle HTTP errors gracefully with appropriate retry logic</li> </ul>"},{"location":"api/authentication/#for-administrators","title":"For Administrators","text":"<ul> <li>Keep admin user IDs secure and limit to trusted users</li> <li>Use bot commands for monitoring and management</li> <li>Regular monitoring through <code>/stats</code> command</li> <li>Log review using <code>/logs</code> command with appropriate filters</li> </ul>"},{"location":"api/authentication/#security","title":"Security","text":"<ul> <li>Verify admin configuration before deployment</li> <li>Monitor access patterns through system logs</li> <li>Keep bot token secure and never share it</li> <li>Use HTTPS for all production deployments</li> </ul> <p>For security issues or questions, contact: @your_telegram </p>"},{"location":"api/endpoints/","title":"API Endpoints Reference","text":"<p>This page provides detailed documentation for all available StreamBot API endpoints.</p>"},{"location":"api/endpoints/#system-information","title":"System Information","text":""},{"location":"api/endpoints/#get-apiinfo","title":"GET <code>/api/info</code>","text":"<p>Returns comprehensive bot status and configuration information.</p> <p>Authentication: None required</p> <p>Request: <pre><code>GET /api/info HTTP/1.1\nHost: yourdomain.com\nAccept: application/json\n</code></pre></p> <p>Response (Success - 200): <pre><code>{\n  \"status\": \"ok\",\n  \"bot_status\": \"connected\",\n  \"bot_info\": {\n    \"id\": 123456789,\n    \"username\": \"YourBotName\",\n    \"first_name\": \"StreamBot\",\n    \"mention\": \"@YourBotName\"\n  },\n  \"features\": {\n    \"force_subscribe\": true,\n    \"force_subscribe_channel_id\": -1001234567890,\n    \"link_expiry_enabled\": true,\n    \"link_expiry_duration_seconds\": 86400,\n    \"link_expiry_duration_human\": \"24 hours\"\n  },\n  \"bandwidth_info\": {\n    \"limit_gb\": 100,\n    \"used_gb\": 45.234,\n    \"used_bytes\": 48573440000,\n    \"month\": \"2024-01\",\n    \"limit_enabled\": true,\n    \"remaining_gb\": 54.766\n  },\n  \"security_info\": {\n    \"cors_enabled\": true,\n    \"allowed_origins\": [\"https://yourdomain.com\"],\n    \"security_headers_enabled\": true,\n    \"request_size_limit\": \"100MB\",\n    \"csp_enabled\": true\n  },\n  \"uptime\": \"2d 14h 32m 18s\",\n  \"server_time_utc\": \"2024-01-15T14:30:45.123456Z\",\n  \"totaluser\": 1250,\n  \"github_repo\": \"https://github.com/yourusername/StreamBot\"\n}\n</code></pre></p> <p>Response (Error - 500): <pre><code>{\n  \"status\": \"error\",\n  \"bot_status\": \"disconnected\",\n  \"message\": \"Bot client is not currently connected to Telegram.\",\n  \"uptime\": \"0s\",\n  \"totaluser\": 0,\n  \"bandwidth_info\": {\n    \"limit_enabled\": false,\n    \"error\": \"Failed to retrieve bandwidth data\"\n  }\n}\n</code></pre></p> <p>Response Fields:</p> Field Type Description <code>status</code> string API response status (<code>ok</code> or <code>error</code>) <code>bot_status</code> string Telegram bot connection status <code>bot_info</code> object Bot identity information <code>features</code> object Enabled features and their configuration <code>bandwidth_info</code> object Current bandwidth usage and limits <code>security_info</code> object Security-related configuration and status <code>uptime</code> string Human-readable bot uptime <code>server_time_utc</code> string Current server time in UTC ISO format <code>totaluser</code> integer Total number of registered users <code>github_repo</code> string Repository URL (if configured)"},{"location":"api/endpoints/#security-status","title":"Security Status","text":""},{"location":"api/endpoints/#get-apisecurity","title":"GET <code>/api/security</code>","text":"<p>NEW: Comprehensive security health check endpoint for administrators.</p> <p>Authentication: JWT Bearer token or Admin IP access required</p> <p>Request: <pre><code>GET /api/security HTTP/1.1\nHost: yourdomain.com\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\nAccept: application/json\n</code></pre></p> <p>Response (Success - 200): <pre><code>{\n  \"status\": \"ok\",\n  \"timestamp\": \"2024-01-15T14:30:45.123456Z\",\n  \"security_validation\": {\n    \"overall_status\": \"PASSED\",\n    \"security_level\": \"EXCELLENT\",\n    \"total_issues\": 0,\n    \"critical_issues\": [],\n    \"warnings\": [],\n    \"recommendations\": [\n      \"Monitor this endpoint regularly\",\n      \"Review security events in logs\"\n    ],\n    \"summary\": {\n      \"critical_count\": 0,\n      \"warning_count\": 0,\n      \"recommendation_count\": 2\n    }\n  },\n  \"rate_limiter_stats\": {\n    \"total_requests_blocked\": 0,\n    \"active_rate_limits\": 5,\n    \"ddos_blocks_active\": 0\n  },\n  \"authentication_stats\": {\n    \"active_jwt_tokens\": 3,\n    \"total_auth_attempts\": 127,\n    \"failed_auth_attempts\": 2\n  },\n  \"system_status\": {\n    \"security_framework_active\": true,\n    \"https_enabled\": true,\n    \"secure_headers_enabled\": true,\n    \"rate_limiting_active\": true,\n    \"input_validation_active\": true,\n    \"cors_protection_active\": true\n  },\n  \"recent_security_events\": [\n    \"2024-01-15 14:25:30 - Rate limit exceeded for IP XXX.XXX.XXX.XXX\",\n    \"2024-01-15 14:20:15 - Suspicious header X-Original-URL from XXX.XXX.XXX.XXX\"\n  ],\n  \"recommendations\": [\n    \"Monitor this endpoint regularly\",\n    \"Review security events in logs\",\n    \"Keep JWT secrets secure\",\n    \"Monitor rate limiting effectiveness\",\n    \"Ensure HTTPS is used in production\"\n  ]\n}\n</code></pre></p>"},{"location":"api/endpoints/#file-downloads","title":"File Downloads","text":""},{"location":"api/endpoints/#get-dlencoded_id","title":"GET <code>/dl/{encoded_id}</code>","text":"<p>Download files via generated download links. PERFORMANCE OPTIMIZED for speed.</p> <p>Authentication: None (uses encoded file IDs for security)</p> <p>Security Features: - \u2705 Global rate limiting (500 requests/minute) - \u2705 Basic input validation (lightweight) - \u2705 Essential security headers - \u2705 Bandwidth monitoring - \u2705 Error handling without information disclosure</p> <p>Request: <pre><code>GET /dl/VGhpcyBpcyBhIGZha2UgZW5jb2RlZCBpZA HTTP/1.1\nHost: yourdomain.com\nRange: bytes=0-1023\nUser-Agent: Mozilla/5.0 (compatible)\n</code></pre></p> <p>Response (Success - 200/206): <pre><code>HTTP/1.1 206 Partial Content\nContent-Type: application/pdf\nContent-Length: 1024\nContent-Range: bytes 0-1023/2048576\nContent-Disposition: attachment; filename=\"document.pdf\"\nAccept-Ranges: bytes\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\nServer: StreamBot\n\n[Binary file content]\n</code></pre></p> <p>Rate Limiting: - Global Limit: 500 downloads/minute across all users - Error Response: HTTP 429 with retry information - No per-client tracking for optimal performance</p>"},{"location":"api/endpoints/#authentication-reference","title":"Authentication Reference","text":""},{"location":"api/endpoints/#jwt-token-generation","title":"JWT Token Generation","text":"<p>Use the Telegram bot to generate JWT tokens:</p> <pre><code>/token    - Generate 24-hour API access token (admin only)\n/revoke   - Revoke all your active tokens (admin only)\n</code></pre>"},{"location":"api/endpoints/#authentication-methods-summary","title":"Authentication Methods Summary","text":"Method Security Level Performance Use Case JWT Bearer Token High Fast API automation, scripts Legacy Token Parameter Medium Fast Simple tools, testing Admin IP Access High Fast Server-side access"},{"location":"api/endpoints/#rate-limiting-by-endpoint","title":"Rate Limiting by Endpoint","text":"Endpoint Rate Limit Window Notes <code>/dl/*</code> 500/minute Global Performance optimized <code>/api/logs</code> 10/minute Per IP Admin endpoint <code>/api/security</code> 10/minute Per IP Admin endpoint <code>/api/info</code> 30/minute Per endpoint Public endpoint"},{"location":"api/endpoints/#error-responses","title":"Error Responses","text":""},{"location":"api/endpoints/#authentication-errors","title":"Authentication Errors","text":"<p>401 Unauthorized: <pre><code>{\n  \"error\": \"Unauthorized access\",\n  \"code\": \"AUTH_REQUIRED\"\n}\n</code></pre></p> <p>429 Too Many Requests: <pre><code>{\n  \"error\": \"Rate limit exceeded\",\n  \"retry_after\": 60\n}\n</code></pre></p>"},{"location":"api/endpoints/#validation-errors","title":"Validation Errors","text":"<p>400 Bad Request: <pre><code>{\n  \"error\": \"Invalid file identifier\",\n  \"code\": \"INVALID_ID\"\n}\n</code></pre></p> <p>413 Request Entity Too Large: <pre><code>{\n  \"error\": \"Request too large\",\n  \"max_size\": 104857600\n}\n</code></pre></p>"},{"location":"api/endpoints/#usage-examples","title":"Usage Examples","text":""},{"location":"api/endpoints/#curl-examples","title":"cURL Examples","text":"<pre><code># Get bot information\ncurl -X GET \"https://yourdomain.com/api/info\"\n\n# Get error logs with pagination\ncurl -X GET \"https://yourdomain.com/api/logs\" \\\n  -G \\\n  -d \"token=your_access_token\" \\\n  -d \"level=ERROR\" \\\n  -d \"limit=50\" \\\n  -d \"page=1\"\n\n# Download a file\ncurl -X GET \"https://yourdomain.com/dl/encoded_id/filename.pdf\" \\\n  -o \"downloaded_file.pdf\"\n\n# Download with range request (first 1024 bytes)\ncurl -X GET \"https://yourdomain.com/dl/encoded_id/filename.pdf\" \\\n  -H \"Range: bytes=0-1023\" \\\n  -o \"partial_file.pdf\"\n</code></pre>"},{"location":"api/endpoints/#python-examples","title":"Python Examples","text":"<pre><code>import requests\n\n# Get bot information\nresponse = requests.get('https://yourdomain.com/api/info')\ndata = response.json()\nprint(f\"Bot status: {data['bot_status']}\")\n\n# Get logs (admin only)\nresponse = requests.get('https://yourdomain.com/api/logs', params={\n    'token': 'your_token',\n    'level': 'ERROR',\n    'limit': 50\n})\nlogs = response.json()\n\n# Download file with progress\ndef download_file(url, filename):\n    response = requests.get(url, stream=True)\n    total_size = int(response.headers.get('Content-Length', 0))\n\n    with open(filename, 'wb') as f:\n        downloaded = 0\n        for chunk in response.iter_content(chunk_size=8192):\n            f.write(chunk)\n            downloaded += len(chunk)\n            progress = (downloaded / total_size) * 100\n            print(f\"Progress: {progress:.1f}%\")\n</code></pre>"},{"location":"api/endpoints/#javascript-examples","title":"JavaScript Examples","text":"<pre><code>// Get bot information\nasync function getBotInfo() {\n    try {\n        const response = await fetch('https://yourdomain.com/api/info');\n        const data = await response.json();\n        console.log('Bot info:', data);\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\n// Download file with progress tracking\nasync function downloadFile(url, filename) {\n    const response = await fetch(url);\n    const contentLength = response.headers.get('Content-Length');\n    const total = parseInt(contentLength, 10);\n\n    const reader = response.body.getReader();\n    let downloaded = 0;\n\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        downloaded += value.length;\n        const progress = (downloaded / total) * 100;\n        console.log(`Progress: ${progress.toFixed(1)}%`);\n    }\n}\n</code></pre> <p>For more integration examples, see the Examples section. </p>"},{"location":"api/examples/","title":"API Examples","text":"<p>This page provides practical examples of how to use the StreamBot API in various programming languages.</p>"},{"location":"api/examples/#authentication","title":"Authentication","text":"<p>Most API endpoints require authentication. You can authenticate using an admin token in the headers:</p> <pre><code>curl -H \"Authorization: Bearer YOUR_ADMIN_TOKEN\" \\\n     https://your-streambot-domain.com/api/info\n</code></pre>"},{"location":"api/examples/#download-file","title":"Download File","text":""},{"location":"api/examples/#example-download-a-file-using-the-download-endpoint","title":"Example: Download a file using the download endpoint","text":"<pre><code>curl -o downloaded_file.pdf \\\n     https://your-streambot-domain.com/dl/file_id_here\n</code></pre>"},{"location":"api/examples/#python-example","title":"Python Example","text":"<pre><code>import requests\n\ndef download_file(file_id, output_path):\n    \"\"\"Download a file from StreamBot\"\"\"\n    url = f\"https://your-streambot-domain.com/dl/{file_id}\"\n\n    response = requests.get(url, stream=True)\n    response.raise_for_status()\n\n    with open(output_path, 'wb') as f:\n        for chunk in response.iter_content(chunk_size=8192):\n            f.write(chunk)\n\n    print(f\"Downloaded file to {output_path}\")\n\n# Usage\ndownload_file(\"your_file_id\", \"downloaded_file.pdf\")\n</code></pre>"},{"location":"api/examples/#javascript-example","title":"JavaScript Example","text":"<pre><code>async function downloadFile(fileId, fileName) {\n    const url = `https://your-streambot-domain.com/dl/${fileId}`;\n\n    try {\n        const response = await fetch(url);\n        if (!response.ok) throw new Error('Download failed');\n\n        const blob = await response.blob();\n\n        // Create download link\n        const downloadUrl = window.URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = downloadUrl;\n        link.download = fileName;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        window.URL.revokeObjectURL(downloadUrl);\n    } catch (error) {\n        console.error('Download failed:', error);\n    }\n}\n\n// Usage\ndownloadFile('your_file_id', 'downloaded_file.pdf');\n</code></pre>"},{"location":"api/examples/#get-bot-information","title":"Get Bot Information","text":""},{"location":"api/examples/#get-bot-status-and-statistics","title":"Get bot status and statistics","text":"<pre><code>curl -H \"Authorization: Bearer YOUR_ADMIN_TOKEN\" \\\n     https://your-streambot-domain.com/api/info\n</code></pre>"},{"location":"api/examples/#python-example_1","title":"Python Example","text":"<pre><code>import requests\n\ndef get_bot_info(admin_token):\n    \"\"\"Get bot information and statistics\"\"\"\n    headers = {'Authorization': f'Bearer {admin_token}'}\n    url = \"https://your-streambot-domain.com/api/info\"\n\n    response = requests.get(url, headers=headers)\n    response.raise_for_status()\n\n    return response.json()\n\n# Usage\ninfo = get_bot_info(\"your_admin_token\")\nprint(f\"Bot status: {info['status']}\")\nprint(f\"Total users: {info['users_count']}\")\n</code></pre>"},{"location":"api/examples/#response-example","title":"Response Example","text":"<pre><code>{\n    \"status\": \"running\",\n    \"uptime\": \"2 days, 14 hours\",\n    \"users_count\": 1250,\n    \"files_served\": 8432,\n    \"total_bandwidth\": \"45.2 GB\",\n    \"version\": \"1.0.0\"\n}\n</code></pre>"},{"location":"api/examples/#access-logs","title":"Access Logs","text":""},{"location":"api/examples/#get-recent-logs-admin-only","title":"Get recent logs (Admin only)","text":"<pre><code>curl -H \"Authorization: Bearer YOUR_ADMIN_TOKEN\" \\\n     https://your-streambot-domain.com/api/logs?limit=100\n</code></pre>"},{"location":"api/examples/#python-example_2","title":"Python Example","text":"<pre><code>import requests\n\ndef get_logs(admin_token, limit=50):\n    \"\"\"Get recent bot logs\"\"\"\n    headers = {'Authorization': f'Bearer {admin_token}'}\n    params = {'limit': limit}\n    url = \"https://your-streambot-domain.com/api/logs\"\n\n    response = requests.get(url, headers=headers, params=params)\n    response.raise_for_status()\n\n    return response.json()\n\n# Usage\nlogs = get_logs(\"your_admin_token\", limit=100)\nfor log in logs['logs']:\n    print(f\"{log['timestamp']}: {log['message']}\")\n</code></pre>"},{"location":"api/examples/#error-handling","title":"Error Handling","text":""},{"location":"api/examples/#common-error-responses","title":"Common Error Responses","text":"<pre><code>{\n    \"error\": \"File not found\",\n    \"code\": 404,\n    \"message\": \"The requested file could not be found\"\n}\n</code></pre> <pre><code>{\n    \"error\": \"Unauthorized\",\n    \"code\": 401,\n    \"message\": \"Valid authentication token required\"\n}\n</code></pre> <pre><code>{\n    \"error\": \"Rate limited\",\n    \"code\": 429,\n    \"message\": \"Too many requests, please try again later\"\n}\n</code></pre>"},{"location":"api/examples/#python-error-handling-example","title":"Python Error Handling Example","text":"<pre><code>import requests\nfrom requests.exceptions import RequestException\n\ndef safe_api_call(url, headers=None):\n    \"\"\"Make a safe API call with proper error handling\"\"\"\n    try:\n        response = requests.get(url, headers=headers, timeout=30)\n\n        if response.status_code == 200:\n            return response.json()\n        elif response.status_code == 404:\n            print(\"File not found\")\n        elif response.status_code == 401:\n            print(\"Authentication failed\")\n        elif response.status_code == 429:\n            print(\"Rate limited, please wait\")\n        else:\n            print(f\"API error: {response.status_code}\")\n\n    except RequestException as e:\n        print(f\"Request failed: {e}\")\n\n    return None\n</code></pre>"},{"location":"api/examples/#integration-examples","title":"Integration Examples","text":""},{"location":"api/examples/#webhook-integration","title":"Webhook Integration","text":"<p>If you want to be notified when files are uploaded:</p> <pre><code>from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/webhook', methods=['POST'])\ndef handle_webhook():\n    \"\"\"Handle StreamBot webhook notifications\"\"\"\n    data = request.get_json()\n\n    if data.get('event') == 'file_uploaded':\n        file_id = data['file_id']\n        user_id = data['user_id']\n        filename = data['filename']\n\n        print(f\"New file uploaded: {filename} by user {user_id}\")\n        print(f\"Download link: https://your-domain.com/dl/{file_id}\")\n\n        # Your custom logic here\n\n    return jsonify({'status': 'received'})\n\nif __name__ == '__main__':\n    app.run(port=5000)\n</code></pre>"},{"location":"api/examples/#batch-download","title":"Batch Download","text":"<pre><code>import requests\nimport os\nfrom concurrent.futures import ThreadPoolExecutor\n\ndef download_multiple_files(file_ids, output_dir):\n    \"\"\"Download multiple files concurrently\"\"\"\n    os.makedirs(output_dir, exist_ok=True)\n\n    def download_single(file_id):\n        url = f\"https://your-streambot-domain.com/dl/{file_id}\"\n        response = requests.get(url, stream=True)\n\n        if response.ok:\n            filename = f\"{file_id}\"\n            filepath = os.path.join(output_dir, filename)\n\n            with open(filepath, 'wb') as f:\n                for chunk in response.iter_content(chunk_size=8192):\n                    f.write(chunk)\n\n            return f\"Downloaded: {filename}\"\n        else:\n            return f\"Failed: {file_id}\"\n\n    with ThreadPoolExecutor(max_workers=5) as executor:\n        results = list(executor.map(download_single, file_ids))\n\n    return results\n\n# Usage\nfile_ids = ['file1', 'file2', 'file3']\nresults = download_multiple_files(file_ids, './downloads')\nfor result in results:\n    print(result)\n</code></pre>"},{"location":"api/examples/#rate-limiting","title":"Rate Limiting","text":"<p>Be aware of rate limits when making API calls:</p> <ul> <li>Download endpoints: No authentication required, but IP-based rate limiting may apply</li> <li>Admin endpoints: Require authentication, limited to authorized users</li> <li>Recommended: Implement exponential backoff for retries</li> </ul> <pre><code>import time\nimport random\n\ndef api_call_with_retry(url, headers=None, max_retries=3):\n    \"\"\"API call with exponential backoff retry\"\"\"\n    for attempt in range(max_retries):\n        try:\n            response = requests.get(url, headers=headers)\n\n            if response.status_code == 429:  # Rate limited\n                wait_time = (2 ** attempt) + random.uniform(0, 1)\n                print(f\"Rate limited, waiting {wait_time:.2f} seconds...\")\n                time.sleep(wait_time)\n                continue\n\n            return response\n\n        except RequestException as e:\n            if attempt == max_retries - 1:\n                raise e\n            time.sleep(2 ** attempt)\n\n    return None\n</code></pre>"},{"location":"api/overview/","title":"StreamBot API","text":"<p>StreamBot provides a RESTful API for interacting with the bot's functionality, monitoring system status, and accessing administrative features. All endpoints return JSON responses and support CORS for web application integration.</p>"},{"location":"api/overview/#api-basics","title":"API Basics","text":"<p>Base URL: <code>https://yourdomain.com</code> (configured via <code>BASE_URL</code> environment variable)</p>"},{"location":"api/overview/#authentication-methods","title":"Authentication Methods","text":"<p>The API supports several authentication methods depending on the endpoint:</p>"},{"location":"api/overview/#token-authentication","title":"Token Authentication","text":"<p>Used for administrative endpoints that require privileged access.</p> <pre><code>GET /api/logs?token=your_secret_token HTTP/1.1\nHost: yourdomain.com\n</code></pre>"},{"location":"api/overview/#ip-whitelisting","title":"IP Whitelisting","text":"<p>Restricts access to specific endpoints based on the client's IP address.</p> <pre><code>ADMIN_IPS=203.0.113.1,198.51.100.2\n</code></pre>"},{"location":"api/overview/#rate-limiting","title":"Rate Limiting","text":"<p>All API endpoints implement rate limiting to prevent abuse:</p> <ul> <li>Standard endpoints: 60 requests per minute</li> <li>Download endpoints: 10 requests per minute</li> <li>Admin endpoints: 120 requests per minute</li> </ul> <p>Rate limit headers are included in all responses:</p> <pre><code>X-RateLimit-Limit: 60\nX-RateLimit-Remaining: 45\nX-RateLimit-Reset: 1619135876\n</code></pre>"},{"location":"api/overview/#response-format","title":"Response Format","text":"<p>All API responses use a consistent JSON format:</p> <pre><code>{\n  \"status\": \"ok\",\n  \"data\": {\n    // Response data here\n  }\n}\n</code></pre> <p>Error responses follow this format:</p> <pre><code>{\n  \"status\": \"error\",\n  \"error\": \"Error message\",\n  \"error_code\": \"ERROR_CODE\"\n}\n</code></pre>"},{"location":"api/overview/#available-endpoints","title":"Available Endpoints","text":"Endpoint Method Description Authentication <code>/api/info</code> GET Bot status and information None <code>/api/logs</code> GET Access application logs Token <code>/dl/{file_id}</code> GET Download file None* <p>*File downloads use encoded IDs for access control</p>"},{"location":"api/overview/#http-status-codes","title":"HTTP Status Codes","text":"Code Description 200 Success 400 Bad Request - Invalid parameters 401 Unauthorized - Missing or invalid authentication 403 Forbidden - Insufficient permissions 404 Not Found - Resource does not exist 429 Too Many Requests - Rate limit exceeded 500 Internal Server Error - Server-side error"},{"location":"api/overview/#content-types","title":"Content Types","text":"<p>The API works with the following content types:</p> <ul> <li><code>application/json</code> for API requests and responses</li> <li>Various MIME types for file downloads</li> <li><code>multipart/form-data</code> for file uploads (when applicable)</li> </ul>"},{"location":"api/overview/#versioning","title":"Versioning","text":"<p>The current API version is integrated directly into the endpoints. Future versions will use the format:</p> <pre><code>/api/v2/endpoint\n</code></pre>"},{"location":"api/overview/#cross-origin-resource-sharing-cors","title":"Cross-Origin Resource Sharing (CORS)","text":"<p>The API supports CORS for web application integration. The following headers are included in responses:</p> <pre><code>Access-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: GET, POST, OPTIONS\nAccess-Control-Allow-Headers: Content-Type, Authorization\n</code></pre>"},{"location":"api/overview/#api-explorer","title":"API Explorer","text":"<p>Use the sections below to explore the available API endpoints in detail:</p> <ul> <li>Endpoints Reference - Detailed documentation for each endpoint</li> <li>Authentication - In-depth guide to authentication methods</li> <li>Examples &amp; Integration - Code examples for common scenarios</li> </ul>"},{"location":"api/overview/#testing-the-api","title":"Testing the API","text":"<p>You can test the API endpoints using:</p> <ul> <li>cURL: Command line HTTP client</li> <li>Postman: GUI-based API testing tool</li> <li>Your browser: For GET endpoints like <code>/api/info</code></li> <li>Programming languages: Python, JavaScript, etc.</li> </ul>"},{"location":"api/overview/#quick-test","title":"Quick Test","text":"<pre><code># Test if the API is accessible\ncurl https://yourdomain.com/api/info\n</code></pre>"},{"location":"deployment/cloud-platforms/","title":"Cloud Platform Deployment","text":"<p>\ud83d\udea7 Coming Soon! \ud83d\udea7</p> <p>This section will cover deployment on major cloud platforms with detailed guides and best practices.</p>"},{"location":"deployment/cloud-platforms/#planned-cloud-platform-guides","title":"Planned Cloud Platform Guides","text":""},{"location":"deployment/cloud-platforms/#amazon-web-services-aws","title":"Amazon Web Services (AWS)","text":"<ul> <li>EC2 Deployment - Virtual machine setup</li> <li>ECS with Fargate - Containerized deployment</li> <li>Lambda Functions - Serverless architecture</li> <li>RDS for MongoDB - Managed database setup</li> <li>CloudFront CDN - Global content delivery</li> <li>Route 53 - DNS management</li> </ul>"},{"location":"deployment/cloud-platforms/#google-cloud-platform-gcp","title":"Google Cloud Platform (GCP)","text":"<ul> <li>Compute Engine - VM-based deployment</li> <li>Cloud Run - Serverless containers</li> <li>Kubernetes Engine - Orchestrated deployment</li> <li>Cloud Storage - File storage optimization</li> <li>Cloud CDN - Content delivery network</li> </ul>"},{"location":"deployment/cloud-platforms/#microsoft-azure","title":"Microsoft Azure","text":"<ul> <li>Virtual Machines - Traditional VM deployment</li> <li>Container Instances - Simple container deployment</li> <li>Kubernetes Service - Managed Kubernetes</li> <li>Cosmos DB - MongoDB-compatible database</li> <li>CDN - Global content distribution</li> </ul>"},{"location":"deployment/cloud-platforms/#other-platforms","title":"Other Platforms","text":"<ul> <li>Heroku - Platform-as-a-Service deployment</li> <li>Railway - Modern PaaS for developers</li> <li>Render - Simple cloud deployment</li> <li>DigitalOcean App Platform - Managed application platform</li> </ul>"},{"location":"deployment/cloud-platforms/#quick-cloud-deployment-options","title":"Quick Cloud Deployment Options","text":"<p>While detailed guides are being prepared, here are some quick options:</p>"},{"location":"deployment/cloud-platforms/#heroku-free-tier-available","title":"Heroku (Free Tier Available)","text":"<pre><code># Install Heroku CLI and deploy\ngit clone https://github.com/anikethjana/Telegram-Download-Link-Generator.git\ncd Telegram-Download-Link-Generator\nheroku create your-streambot-app\nheroku config:set API_ID=your_api_id\nheroku config:set API_HASH=your_api_hash\n# ... set other environment variables\ngit push heroku main\n</code></pre>"},{"location":"deployment/cloud-platforms/#railway-simple-deployment","title":"Railway (Simple Deployment)","text":"<pre><code># Connect your GitHub repo to Railway\n# Set environment variables in Railway dashboard\n# Deploy with one click\n</code></pre>"},{"location":"deployment/cloud-platforms/#infrastructure-as-code","title":"Infrastructure as Code","text":"<p>Coming soon: Terraform and CloudFormation templates for: - Automated infrastructure provisioning - Multi-region deployments - Auto-scaling configurations - Monitoring and logging setup</p>"},{"location":"deployment/cloud-platforms/#cost-optimization-tips","title":"Cost Optimization Tips","text":"<p>While we prepare detailed guides, consider:</p> <ul> <li>Free Tiers: Start with free tiers from major cloud providers</li> <li>Spot Instances: Use spot/preemptible instances for cost savings</li> <li>Auto-scaling: Implement auto-scaling to handle traffic spikes</li> <li>CDN Usage: Use CDNs for global file distribution</li> <li>Resource Monitoring: Monitor usage to optimize costs</li> </ul>"},{"location":"deployment/cloud-platforms/#need-immediate-help","title":"Need Immediate Help?","text":"<p>For urgent deployment needs:</p> <ul> <li>\ud83d\udcac Contact me on Telegram: @ajmods_bot</li> <li>\ud83d\udc1b Open an issue on GitHub</li> <li>\ud83d\udcd6 Check the Docker Deployment guide for container-based deployment</li> </ul>"},{"location":"deployment/cloud-platforms/#coming-soon-features","title":"Coming Soon Features","text":"<ul> <li>One-click deployment scripts for major platforms</li> <li>Cost calculator for different cloud providers</li> <li>Performance benchmarks across platforms</li> <li>Migration guides between cloud providers</li> <li>Monitoring and alerting setup guides</li> </ul> <p>These comprehensive cloud deployment guides are currently in development. Stay tuned for detailed instructions! </p>"},{"location":"deployment/docker/","title":"Docker Deployment","text":"<p>Docker provides an easy way to deploy StreamBot with all dependencies included. This guide covers both Docker and Docker Compose deployment methods.</p>"},{"location":"deployment/docker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker 20.10+ installed</li> <li>Docker Compose v2.0+ (if using compose method)</li> <li>Git for cloning the repository</li> </ul>"},{"location":"deployment/docker/#method-1-docker-compose-recommended","title":"Method 1: Docker Compose (Recommended)","text":"<p>Docker Compose is the easiest way to deploy StreamBot with MongoDB included.</p>"},{"location":"deployment/docker/#1-clone-repository","title":"1. Clone Repository","text":"<pre><code>git clone https://github.com/yourusername/StreamBot.git\ncd StreamBot\n</code></pre>"},{"location":"deployment/docker/#2-create-environment-file","title":"2. Create Environment File","text":"<pre><code>cp .env.example .env\n</code></pre> <p>Edit <code>.env</code> with your configuration:</p> <pre><code># Telegram Configuration\nAPI_ID=your_api_id\nAPI_HASH=your_api_hash\nBOT_TOKEN=your_bot_token\nLOG_CHANNEL=-1001234567890\n\n# Database (MongoDB container)\nDATABASE_URL=mongodb://mongodb:27017\nDATABASE_NAME=StreamBotDB\n\n# Server Configuration\nBASE_URL=https://yourdomain.com\nPORT=8080\nBIND_ADDRESS=0.0.0.0\n\n# Admin Configuration\nADMINS=your_telegram_user_id\n</code></pre>"},{"location":"deployment/docker/#3-create-docker-compose-file","title":"3. Create Docker Compose File","text":"<p>Create <code>docker-compose.yml</code>:</p> <pre><code>version: '3.8'\n\nservices:\n  streambot:\n    build: .\n    container_name: streambot\n    restart: unless-stopped\n    ports:\n      - \"8080:8080\"\n    environment:\n      - DATABASE_URL=mongodb://mongodb:27017\n    env_file:\n      - .env\n    depends_on:\n      - mongodb\n    volumes:\n      - ./sessions:/app/sessions\n    networks:\n      - streambot-network\n\n  mongodb:\n    image: mongo:6.0\n    container_name: streambot-mongodb\n    restart: unless-stopped\n    ports:\n      - \"27017:27017\"\n    volumes:\n      - mongodb_data:/data/db\n    environment:\n      - MONGO_INITDB_DATABASE=StreamBotDB\n    networks:\n      - streambot-network\n\nvolumes:\n  mongodb_data:\n\nnetworks:\n  streambot-network:\n    driver: bridge\n</code></pre>"},{"location":"deployment/docker/#4-deploy","title":"4. Deploy","text":"<pre><code># Build and start services\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f streambot\n\n# Stop services\ndocker-compose down\n</code></pre>"},{"location":"deployment/docker/#method-2-docker-only","title":"Method 2: Docker Only","text":"<p>If you have an existing MongoDB instance, you can run just the StreamBot container.</p>"},{"location":"deployment/docker/#1-build-image","title":"1. Build Image","text":"<pre><code># Clone repository\ngit clone https://github.com/yourusername/StreamBot.git\ncd StreamBot\n\n# Build Docker image\ndocker build -t streambot:latest .\n</code></pre>"},{"location":"deployment/docker/#2-run-container","title":"2. Run Container","text":"<pre><code>docker run -d \\\n  --name streambot \\\n  --restart unless-stopped \\\n  -p 8080:8080 \\\n  --env-file .env \\\n  -v $(pwd)/sessions:/app/sessions \\\n  streambot:latest\n</code></pre>"},{"location":"deployment/docker/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"deployment/docker/#production-docker-compose","title":"Production Docker Compose","text":"<p>For production deployment with additional services:</p> <pre><code>version: '3.8'\n\nservices:\n  streambot:\n    build: .\n    container_name: streambot\n    restart: unless-stopped\n    environment:\n      - DATABASE_URL=mongodb://mongodb:27017\n    env_file:\n      - .env\n    depends_on:\n      - mongodb\n    volumes:\n      - ./sessions:/app/sessions\n      - ./logs:/app/logs\n    networks:\n      - streambot-network\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.streambot.rule=Host(`files.yourdomain.com`)\"\n      - \"traefik.http.routers.streambot.tls.certresolver=letsencrypt\"\n\n  mongodb:\n    image: mongo:6.0\n    container_name: streambot-mongodb\n    restart: unless-stopped\n    volumes:\n      - mongodb_data:/data/db\n      - ./backups:/backups\n    environment:\n      - MONGO_INITDB_DATABASE=StreamBotDB\n    networks:\n      - streambot-network\n\n  nginx:\n    image: nginx:alpine\n    container_name: streambot-nginx\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - streambot\n    networks:\n      - streambot-network\n\nvolumes:\n  mongodb_data:\n\nnetworks:\n  streambot-network:\n    driver: bridge\n</code></pre>"},{"location":"deployment/docker/#environment-variables-for-docker","title":"Environment Variables for Docker","text":"<pre><code># Docker-specific settings\nBIND_ADDRESS=0.0.0.0\nDATABASE_URL=mongodb://mongodb:27017\n\n# Production settings\nWORKERS=4\nSESSION_NAME=StreamBotProd\n</code></pre>"},{"location":"deployment/docker/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":""},{"location":"deployment/docker/#view-logs","title":"View Logs","text":"<pre><code># StreamBot logs\ndocker-compose logs -f streambot\n\n# MongoDB logs\ndocker-compose logs -f mongodb\n\n# All services\ndocker-compose logs -f\n</code></pre>"},{"location":"deployment/docker/#health-checks","title":"Health Checks","text":"<p>Add health checks to your <code>docker-compose.yml</code>:</p> <pre><code>services:\n  streambot:\n    # ... other configuration\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/api/info\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n</code></pre>"},{"location":"deployment/docker/#backup-mongodb","title":"Backup MongoDB","text":"<pre><code># Create backup\ndocker exec streambot-mongodb mongodump --db StreamBotDB --out /backups/$(date +%Y%m%d_%H%M%S)\n\n# Restore backup\ndocker exec streambot-mongodb mongorestore --db StreamBotDB /backups/backup_folder\n</code></pre>"},{"location":"deployment/docker/#update-deployment","title":"Update Deployment","text":"<pre><code># Pull latest changes\ngit pull origin main\n\n# Rebuild and restart\ndocker-compose down\ndocker-compose build --no-cache\ndocker-compose up -d\n</code></pre>"},{"location":"deployment/docker/#reverse-proxy-configuration","title":"Reverse Proxy Configuration","text":""},{"location":"deployment/docker/#nginx-configuration","title":"Nginx Configuration","text":"<p>Create <code>nginx.conf</code>:</p> <pre><code>events {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream streambot {\n        server streambot:8080;\n    }\n\n    server {\n        listen 80;\n        server_name files.yourdomain.com;\n\n        # Redirect HTTP to HTTPS\n        return 301 https://$server_name$request_uri;\n    }\n\n    server {\n        listen 443 ssl http2;\n        server_name files.yourdomain.com;\n\n        ssl_certificate /etc/nginx/ssl/cert.pem;\n        ssl_certificate_key /etc/nginx/ssl/key.pem;\n\n        client_max_body_size 2G;\n\n        location / {\n            proxy_pass http://streambot;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n}\n</code></pre>"},{"location":"deployment/docker/#traefik-configuration","title":"Traefik Configuration","text":"<pre><code>version: '3.8'\n\nservices:\n  traefik:\n    image: traefik:v2.9\n    container_name: traefik\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./traefik.yml:/etc/traefik/traefik.yml\n      - ./acme.json:/acme.json\n    networks:\n      - streambot-network\n\n  streambot:\n    # ... existing configuration\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.streambot.rule=Host(`files.yourdomain.com`)\"\n      - \"traefik.http.routers.streambot.tls.certresolver=letsencrypt\"\n</code></pre>"},{"location":"deployment/docker/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/docker/#common-issues","title":"Common Issues","text":"<p>Container won't start: <pre><code># Check logs for errors\ndocker-compose logs streambot\n\n# Verify environment variables\ndocker-compose exec streambot env | grep -E \"(API_ID|BOT_TOKEN|DATABASE_URL)\"\n</code></pre></p> <p>Database connection fails: <pre><code># Check MongoDB status\ndocker-compose exec mongodb mongo --eval \"db.adminCommand('ismaster')\"\n\n# Verify network connectivity\ndocker-compose exec streambot ping mongodb\n</code></pre></p> <p>Permission issues: <pre><code># Fix session directory permissions\nsudo chown -R 1000:1000 sessions/\n\n# Fix log directory permissions\nsudo chown -R 1000:1000 logs/\n</code></pre></p>"},{"location":"deployment/docker/#performance-tuning","title":"Performance Tuning","text":"<pre><code>services:\n  streambot:\n    # ... other configuration\n    deploy:\n      resources:\n        limits:\n          cpus: '2.0'\n          memory: 1G\n        reservations:\n          cpus: '0.5'\n          memory: 512M\n</code></pre>"},{"location":"deployment/docker/#security-considerations","title":"Security Considerations","text":""},{"location":"deployment/docker/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use secrets for sensitive data: <pre><code>secrets:\n  bot_token:\n    file: ./secrets/bot_token.txt\n\nservices:\n  streambot:\n    secrets:\n      - bot_token\n</code></pre></p> </li> <li> <p>Limit container capabilities: <pre><code>services:\n  streambot:\n    cap_drop:\n      - ALL\n    cap_add:\n      - CHOWN\n      - SETUID\n      - SETGID\n</code></pre></p> </li> <li> <p>Use non-root user: <pre><code>FROM python:3.9-slim\nRUN useradd -m -s /bin/bash streambot\nUSER streambot\n# ... rest of Dockerfile\n</code></pre></p> </li> </ol> <p>This Docker deployment method provides a robust, scalable way to run StreamBot in production environments. </p>"},{"location":"deployment/overview/","title":"Deployment Overview","text":"<p>This guide outlines various deployment options for StreamBot, from simple VPS setups to scalable cloud solutions. Choose the approach that best fits your requirements and infrastructure.</p>"},{"location":"deployment/overview/#deployment-options","title":"Deployment Options","text":"<ul> <li> <p> VPS Deployment</p> <p>Standard deployment on a Virtual Private Server (VPS) with MongoDB, Python, and Nginx.</p> <p> VPS Setup</p> </li> <li> <p> Docker Deployment</p> <p>Containerized deployment using Docker and Docker Compose for easier management.</p> <p> Docker Setup</p> </li> <li> <p> Cloud Platforms</p> <p>Deployment on popular cloud platforms like Heroku, DigitalOcean, and Railway.</p> <p> Cloud Deployment</p> </li> <li> <p> Security Best Practices</p> <p>Guidelines for securing your StreamBot deployment.</p> <p> Security Guide</p> </li> </ul>"},{"location":"deployment/overview/#pre-deployment-checklist","title":"Pre-Deployment Checklist","text":"<p>Before deploying StreamBot, ensure you have the following:</p> <ul> <li> Telegram Credentials</li> <li>API ID and API Hash from my.telegram.org</li> <li>Bot Token from @BotFather</li> <li> <p>Log Channel ID for file storage</p> </li> <li> <p> MongoDB Database</p> </li> <li>Local installation or cloud-hosted (MongoDB Atlas)</li> <li> <p>Database credentials and connection string</p> </li> <li> <p> Domain Name (recommended)</p> </li> <li>Required for public access to download links</li> <li> <p>SSL/TLS certificate for HTTPS</p> </li> <li> <p> Server Resources</p> </li> <li>Minimum: 1GB RAM, 1 vCPU, 25GB storage</li> <li>Recommended: 2GB RAM, 2 vCPU, 50GB storage</li> </ul>"},{"location":"deployment/overview/#resource-requirements","title":"Resource Requirements","text":"Component Minimum Recommended High Traffic RAM 1 GB 2 GB 4+ GB CPU 1 vCPU 2 vCPU 4+ vCPU Storage 25 GB 50 GB 100+ GB Bandwidth 100 GB/month 500 GB/month 1+ TB/month MongoDB Shared Dedicated Replicated"},{"location":"deployment/overview/#deployment-architecture","title":"Deployment Architecture","text":"<p>StreamBot can be deployed in various configurations depending on your needs:</p>"},{"location":"deployment/overview/#basic-deployment","title":"Basic Deployment","text":"<pre><code>graph TD\n    User[User] --&gt;|Access| Server[VPS/Cloud Server]\n    Server --&gt;|Contains| App[StreamBot Application]\n    Server --&gt;|Contains| DB[(MongoDB Database)]\n    App --&gt;|Uses| TG[Telegram API]</code></pre> <p>This simple setup is suitable for personal or small-scale use.</p>"},{"location":"deployment/overview/#production-deployment","title":"Production Deployment","text":"<pre><code>graph TD\n    User[User] --&gt;|Access| LB[Load Balancer/Nginx]\n    LB --&gt;|Routes to| App1[StreamBot Instance 1]\n    LB --&gt;|Routes to| App2[StreamBot Instance 2]\n    App1 --&gt;|Uses| DB[(MongoDB Cluster)]\n    App2 --&gt;|Uses| DB\n    App1 --&gt;|Uses| TG[Telegram API]\n    App2 --&gt;|Uses| TG</code></pre> <p>This configuration provides better reliability and scalability for production use.</p>"},{"location":"deployment/overview/#environment-configuration","title":"Environment Configuration","text":"<p>All deployment methods require proper environment configuration. The following variables are essential:</p> <pre><code># Required Configuration\nAPI_ID=your_api_id\nAPI_HASH=your_api_hash\nBOT_TOKEN=your_bot_token\nLOG_CHANNEL=your_log_channel_id\nDATABASE_URL=mongodb://username:password@host:port/database\nBASE_URL=https://your-domain.com\n</code></pre>"},{"location":"deployment/overview/#monitoring-maintenance","title":"Monitoring &amp; Maintenance","text":"<p>Regardless of deployment method, implement:</p> <ul> <li>Automated Backups: Regular database backups</li> <li>Health Monitoring: System health checks</li> <li>Log Rotation: Proper log management</li> <li>Security Updates: Regular system updates</li> </ul>"},{"location":"deployment/overview/#next-steps","title":"Next Steps","text":"<p>Select a deployment option from the menu to proceed with detailed instructions:</p> <ul> <li>VPS Deployment: Step-by-step guide for standard VPS setup</li> <li>Docker Deployment: Containerized deployment with Docker</li> <li>Cloud Platforms: Deployment on popular cloud services</li> <li>Security Guide: Best practices for securing your deployment </li> </ul>"},{"location":"deployment/security/","title":"\ud83d\udee1\ufe0f StreamBot Security Framework","text":"<p>StreamBot now includes a comprehensive security framework that addresses all major web application vulnerabilities. This guide covers deployment, configuration, and monitoring.</p>"},{"location":"deployment/security/#security-status-implemented","title":"\ud83d\udea8 Security Status: IMPLEMENTED \u2705","text":"<p>StreamBot's security framework is fully implemented and ready for production use with:</p> <ul> <li>\u2705 JWT Authentication with 256-bit entropy</li> <li>\u2705 Advanced Rate Limiting with DDoS protection</li> <li>\u2705 Input Validation and sanitization</li> <li>\u2705 Security Headers (CSP, HSTS, XSS protection)</li> <li>\u2705 Secure CORS configuration</li> <li>\u2705 Request Size Limits and DoS protection</li> <li>\u2705 Error Handling without information disclosure</li> <li>\u2705 Log Security with sensitive data masking</li> </ul>"},{"location":"deployment/security/#essential-security-configuration","title":"\ud83d\udd27 Essential Security Configuration","text":""},{"location":"deployment/security/#critical-environment-variables","title":"Critical Environment Variables","text":"<pre><code># === JWT AUTHENTICATION (CRITICAL) ===\n# Generate with: python3 -c \"import secrets; print(secrets.token_urlsafe(32))\"\nJWT_SECRET=your_256_bit_jwt_secret_here_32_chars_minimum_required\n\n# === ADMIN ACCESS CONTROL (CRITICAL) ===\nADMINS=123456789 987654321  # Space-separated Telegram user IDs\nADMIN_IPS=127.0.0.1,your.trusted.ip.address,192.168.1.100\n\n# === CORS SECURITY (CRITICAL) ===\n# NEVER use \"*\" - specify exact domains\nALLOWED_ORIGINS=https://yourdomain.com,https://admin.yourdomain.com\n\n# === HTTPS ENFORCEMENT (CRITICAL) ===\nBASE_URL=https://yourdomain.com  # Must use HTTPS in production\n\n# === DATABASE SECURITY ===\nDATABASE_URL=mongodb://username:password@localhost:27017/streambot?authSource=admin\n</code></pre>"},{"location":"deployment/security/#generate-secure-secrets","title":"Generate Secure Secrets","text":"<pre><code># Generate all required secrets at once\necho \"JWT_SECRET=$(python3 -c 'import secrets; print(secrets.token_urlsafe(32))')\"\necho \"LOGS_ACCESS_TOKEN=$(python3 -c 'import secrets; print(secrets.token_urlsafe(32))')\"\n\n# Alternative with OpenSSL\necho \"JWT_SECRET=$(openssl rand -base64 32)\"\necho \"LOGS_ACCESS_TOKEN=$(openssl rand -base64 32)\"\n</code></pre>"},{"location":"deployment/security/#configuration-validation","title":"Configuration Validation","text":"<p>StreamBot automatically validates your security configuration on startup:</p> <pre><code># Check security status\npython3 -m StreamBot\n\n# Look for these log messages:\n# \u2705 Security validation PASSED - No critical issues found\n# \u26a0\ufe0f Security validation: WARNING - 2 warnings found\n# \u274c Security validation FAILED - Critical issues found!\n</code></pre>"},{"location":"deployment/security/#server-security-setup","title":"\ud83c\udfd7\ufe0f Server Security Setup","text":""},{"location":"deployment/security/#1-operating-system-hardening","title":"1. Operating System Hardening","text":"<pre><code># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install security essentials\nsudo apt install -y ufw fail2ban unattended-upgrades\n\n# Configure automatic security updates\nsudo dpkg-reconfigure unattended-upgrades\n</code></pre>"},{"location":"deployment/security/#2-firewall-configuration","title":"2. Firewall Configuration","text":"<pre><code># Configure UFW firewall\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\n\n# Allow SSH (change port if needed)\nsudo ufw allow ssh\n# sudo ufw allow 2222/tcp  # If using custom SSH port\n\n# Allow HTTP/HTTPS\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\n\n# Allow StreamBot port (if direct access)\nsudo ufw allow 8080/tcp\n\n# Enable firewall\nsudo ufw enable\nsudo ufw status verbose\n</code></pre>"},{"location":"deployment/security/#3-ssh-security-hardening","title":"3. SSH Security Hardening","text":"<pre><code># Edit SSH configuration\nsudo nano /etc/ssh/sshd_config\n\n# Apply these settings:\n# PasswordAuthentication no\n# PermitRootLogin no\n# Protocol 2\n# MaxAuthTries 3\n# Port 2222  # Optional: Change default port\n\n# Restart SSH service\nsudo systemctl restart ssh\n</code></pre>"},{"location":"deployment/security/#4-intrusion-detection-fail2ban","title":"4. Intrusion Detection (Fail2Ban)","text":"<pre><code># Create StreamBot-specific fail2ban jail\nsudo nano /etc/fail2ban/jail.local\n</code></pre> <pre><code>[DEFAULT]\n# Ban for 10 minutes after 5 failures in 5 minutes\nbantime = 600\nfindtime = 300\nmaxretry = 5\n\n[streambot-auth]\nenabled = true\nport = 80,443,8080\nfilter = streambot-auth\nlogpath = /path/to/streambot/tgdlbot.log\nmaxretry = 3\nbantime = 3600\n\n[streambot-ddos]\nenabled = true\nport = 80,443,8080\nfilter = streambot-ddos\nlogpath = /path/to/streambot/tgdlbot.log\nmaxretry = 10\nbantime = 7200\n</code></pre> <p>Create filters:</p> <pre><code># Authentication filter\nsudo nano /etc/fail2ban/filter.d/streambot-auth.conf\n</code></pre> <pre><code>[Definition]\nfailregex = ^.*Unauthorized.*from &lt;HOST&gt;.*$\n            ^.*Failed authentication.*&lt;HOST&gt;.*$\n            ^.*Invalid token.*&lt;HOST&gt;.*$\nignoreregex =\n</code></pre> <pre><code># DDoS filter\nsudo nano /etc/fail2ban/filter.d/streambot-ddos.conf\n</code></pre> <pre><code>[Definition]\nfailregex = ^.*Rate limit exceeded.*&lt;HOST&gt;.*$\n            ^.*DDoS protection triggered.*&lt;HOST&gt;.*$\nignoreregex =\n</code></pre> <pre><code># Restart fail2ban\nsudo systemctl restart fail2ban\nsudo systemctl enable fail2ban\n</code></pre>"},{"location":"deployment/security/#web-server-security-nginx","title":"\ud83c\udf10 Web Server Security (Nginx)","text":""},{"location":"deployment/security/#secure-nginx-configuration","title":"Secure Nginx Configuration","text":"<pre><code># /etc/nginx/sites-available/streambot\nserver {\n    listen 80;\n    server_name yourdomain.com;\n    return 301 https://$server_name$request_uri;  # Force HTTPS\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name yourdomain.com;\n\n    # SSL Configuration\n    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_tickets off;\n\n    # Modern SSL configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # HSTS\n    add_header Strict-Transport-Security \"max-age=63072000\" always;\n\n    # Security headers (additional to StreamBot's built-in headers)\n    add_header X-Robots-Tag \"noindex, nofollow\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n\n    # Rate limiting\n    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/m;\n    limit_req_zone $binary_remote_addr zone=download:10m rate=100r/m;\n\n    # File upload limits\n    client_max_body_size 100M;\n    client_body_timeout 60s;\n    client_header_timeout 60s;\n\n    # Proxy to StreamBot\n    location / {\n        # Apply rate limiting\n        limit_req zone=api burst=20 nodelay;\n\n        proxy_pass http://127.0.0.1:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n\n    # Optimized for downloads\n    location /dl/ {\n        limit_req zone=download burst=50 nodelay;\n\n        proxy_pass http://127.0.0.1:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        # Longer timeouts for file downloads\n        proxy_connect_timeout 120s;\n        proxy_send_timeout 300s;\n        proxy_read_timeout 300s;\n        proxy_buffering off;\n    }\n\n    # Block access to sensitive files\n    location ~ /\\.(env|git|htaccess|htpasswd) {\n        deny all;\n        return 404;\n    }\n}\n</code></pre>"},{"location":"deployment/security/#ssl-certificate-setup-lets-encrypt","title":"SSL Certificate Setup (Let's Encrypt)","text":"<pre><code># Install Certbot\nsudo apt install certbot python3-certbot-nginx\n\n# Obtain SSL certificate\nsudo certbot --nginx -d yourdomain.com\n\n# Auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet\n</code></pre>"},{"location":"deployment/security/#database-security-mongodb","title":"\ud83d\uddc4\ufe0f Database Security (MongoDB)","text":""},{"location":"deployment/security/#secure-mongodb-configuration","title":"Secure MongoDB Configuration","text":"<pre><code>// MongoDB security setup\nuse admin\n\n// Create admin user\ndb.createUser({\n  user: \"admin\",\n  pwd: \"your_secure_admin_password\",\n  roles: [\"userAdminAnyDatabase\", \"dbAdminAnyDatabase\", \"readWriteAnyDatabase\"]\n})\n\n// Create application user\nuse streambot\ndb.createUser({\n  user: \"streambot_app\",\n  pwd: \"your_secure_app_password\", \n  roles: [\"readWrite\"]\n})\n</code></pre> <pre><code># /etc/mongod.conf\nsecurity:\n  authorization: enabled\n\nnet:\n  port: 27017\n  bindIp: 127.0.0.1  # Only localhost access\n\nstorage:\n  wiredTiger:\n    engineConfig:\n      directoryForIndexes: true\n    collectionConfig:\n      blockCompressor: snappy\n    indexConfig:\n      prefixCompression: true\n</code></pre> <pre><code># Restart MongoDB\nsudo systemctl restart mongod\nsudo systemctl enable mongod\n</code></pre>"},{"location":"deployment/security/#mongodb-connection-security","title":"MongoDB Connection Security","text":"<pre><code># Secure MongoDB connection string\nDATABASE_URL=mongodb://streambot_app:your_secure_app_password@localhost:27017/streambot?authSource=streambot&amp;ssl=false\n</code></pre>"},{"location":"deployment/security/#security-monitoring","title":"\ud83d\udd0d Security Monitoring","text":""},{"location":"deployment/security/#real-time-security-dashboard","title":"Real-time Security Dashboard","text":"<p>StreamBot provides a built-in security monitoring endpoint:</p> <pre><code># Check security status\ncurl -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n     https://yourdomain.com/api/security\n</code></pre> <p>Response includes: - Configuration validation results - Authentication statistics - Rate limiting status - Recent security events - DDoS protection status</p>"},{"location":"deployment/security/#log-monitoring-setup","title":"Log Monitoring Setup","text":"<pre><code># Install log monitoring tools\nsudo apt install logwatch logrotate\n\n# Configure log rotation for StreamBot\nsudo nano /etc/logrotate.d/streambot\n</code></pre> <pre><code>/path/to/streambot/tgdlbot.log {\n    daily\n    missingok\n    rotate 30\n    compress\n    notifempty\n    create 644 streambot streambot\n    postrotate\n        systemctl restart streambot || true\n    endscript\n}\n</code></pre>"},{"location":"deployment/security/#security-event-alerting","title":"Security Event Alerting","text":"<pre><code>#!/bin/bash\n# /usr/local/bin/streambot-security-monitor.sh\n\nLOG_FILE=\"/path/to/streambot/tgdlbot.log\"\nALERT_EMAIL=\"admin@yourdomain.com\"\n\n# Monitor for security events\ntail -f \"$LOG_FILE\" | while read line; do\n    if echo \"$line\" | grep -E \"(CRITICAL|DDoS protection triggered|Failed authentication)\"; then\n        echo \"SECURITY ALERT: $line\" | mail -s \"StreamBot Security Alert\" \"$ALERT_EMAIL\"\n    fi\ndone\n</code></pre> <pre><code># Make executable and add to cron\nchmod +x /usr/local/bin/streambot-security-monitor.sh\n\n# Add to crontab\ncrontab -e\n# @reboot /usr/local/bin/streambot-security-monitor.sh &amp;\n</code></pre>"},{"location":"deployment/security/#docker-security","title":"\ud83d\udc33 Docker Security","text":""},{"location":"deployment/security/#secure-dockerfile","title":"Secure Dockerfile","text":"<pre><code>FROM python:3.11-slim\n\n# Create non-root user\nRUN groupadd -r streambot &amp;&amp; useradd -r -g streambot streambot\n\n# Install security updates\nRUN apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; \\\n    apt-get install -y --no-install-recommends \\\n    ca-certificates &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\n# Copy requirements first (layer caching)\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application\nCOPY . .\n\n# Set secure file permissions\nRUN chown -R streambot:streambot /app &amp;&amp; \\\n    chmod -R 755 /app &amp;&amp; \\\n    chmod 600 /app/.env\n\n# Run as non-root user\nUSER streambot\n\n# Expose port\nEXPOSE 8080\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost:8080/ || exit 1\n\nCMD [\"python\", \"-m\", \"StreamBot\"]\n</code></pre>"},{"location":"deployment/security/#docker-compose-security","title":"Docker Compose Security","text":"<pre><code>version: '3.8'\n\nservices:\n  streambot:\n    build: .\n    restart: unless-stopped\n    ports:\n      - \"127.0.0.1:8080:8080\"  # Bind to localhost only\n    environment:\n      - JWT_SECRET=${JWT_SECRET}\n      - LOGS_ACCESS_TOKEN=${LOGS_ACCESS_TOKEN}\n      - DATABASE_URL=${DATABASE_URL}\n    volumes:\n      - ./logs:/app/logs:rw\n      - ./data:/app/data:rw\n    networks:\n      - streambot-network\n    depends_on:\n      - mongodb\n    security_opt:\n      - no-new-privileges:true\n    cap_drop:\n      - ALL\n    cap_add:\n      - CHOWN\n      - SETGID\n      - SETUID\n\n  mongodb:\n    image: mongo:7\n    restart: unless-stopped\n    environment:\n      - MONGO_INITDB_ROOT_USERNAME=admin\n      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}\n    volumes:\n      - mongodb_data:/data/db\n      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro\n    networks:\n      - streambot-network\n    security_opt:\n      - no-new-privileges:true\n\nnetworks:\n  streambot-network:\n    driver: bridge\n\nvolumes:\n  mongodb_data:\n</code></pre>"},{"location":"deployment/security/#performance-vs-security-balance","title":"\ud83d\udcca Performance vs Security Balance","text":"<p>StreamBot uses selective security to maintain high performance:</p>"},{"location":"deployment/security/#download-route-dl-performance-optimized","title":"Download Route (<code>/dl/</code>) - Performance Optimized","text":"<ul> <li>\u2705 Global rate limiting (500/minute)</li> <li>\u2705 Basic input validation (lightweight)</li> <li>\u2705 Essential security headers</li> <li>\u2705 Error handling without info disclosure</li> <li>\u274c No per-client tracking (performance)</li> <li>\u274c No heavy regex validation (performance)</li> </ul>"},{"location":"deployment/security/#admin-routes-apilogs-apisecurity-full-security","title":"Admin Routes (<code>/api/logs</code>, <code>/api/security</code>) - Full Security","text":"<ul> <li>\u2705 JWT authentication with multi-factor verification</li> <li>\u2705 Complete input validation and sanitization</li> <li>\u2705 Per-IP rate limiting (10/minute)</li> <li>\u2705 Full security headers (CSP, HSTS, etc.)</li> <li>\u2705 Comprehensive logging and monitoring</li> </ul>"},{"location":"deployment/security/#security-checklist","title":"\ud83d\udea8 Security Checklist","text":""},{"location":"deployment/security/#pre-production-checklist","title":"Pre-Production Checklist","text":"<ul> <li> Secrets Generated: JWT_SECRET and LOGS_ACCESS_TOKEN (256-bit)</li> <li> HTTPS Enabled: BASE_URL uses https://</li> <li> CORS Configured: ALLOWED_ORIGINS set to specific domains (no wildcards)</li> <li> Admin Access: ADMINS and ADMIN_IPS properly configured</li> <li> Database Secured: MongoDB authentication enabled</li> <li> Firewall Active: UFW/iptables configured</li> <li> SSL Certificate: Valid SSL certificate installed</li> <li> Fail2Ban Setup: Intrusion detection configured</li> <li> Log Monitoring: Security event alerting configured</li> <li> Security Validation: <code>python -m StreamBot</code> shows \"PASSED\"</li> </ul>"},{"location":"deployment/security/#post-deployment-monitoring","title":"Post-Deployment Monitoring","text":"<ul> <li> Daily: Check <code>/api/security</code> endpoint for issues</li> <li> Weekly: Review security logs for suspicious activity</li> <li> Monthly: Update system packages and dependencies</li> <li> Quarterly: Rotate JWT_SECRET and LOGS_ACCESS_TOKEN</li> <li> As Needed: Monitor fail2ban logs and adjust rules</li> </ul>"},{"location":"deployment/security/#troubleshooting-security-issues","title":"\ud83d\udd27 Troubleshooting Security Issues","text":""},{"location":"deployment/security/#common-security-configuration-problems","title":"Common Security Configuration Problems","text":""},{"location":"deployment/security/#1-jwt-secret-too-short","title":"1. JWT Secret Too Short","text":"<pre><code># Error: JWT_SECRET too short (16 chars) - minimum 32 required\n# Solution: Generate longer secret\nJWT_SECRET=$(python3 -c \"import secrets; print(secrets.token_urlsafe(32))\")\n</code></pre>"},{"location":"deployment/security/#2-cors-wildcard-detected","title":"2. CORS Wildcard Detected","text":"<pre><code># Error: CORS wildcard '*' detected - major security risk\n# Solution: Specify exact origins\nALLOWED_ORIGINS=https://yourdomain.com,https://admin.yourdomain.com\n</code></pre>"},{"location":"deployment/security/#3-non-https-base-url","title":"3. Non-HTTPS Base URL","text":"<pre><code># Warning: BASE_URL should use HTTPS in production\n# Solution: Enable HTTPS\nBASE_URL=https://yourdomain.com\n</code></pre>"},{"location":"deployment/security/#security-testing","title":"Security Testing","text":"<pre><code># Test rate limiting\nfor i in {1..60}; do curl -s https://yourdomain.com/api/info; done\n\n# Test authentication\ncurl -H \"Authorization: Bearer invalid_token\" https://yourdomain.com/api/logs\n\n# Test CORS\ncurl -H \"Origin: https://malicious-site.com\" https://yourdomain.com/api/info\n\n# Check security headers\ncurl -I https://yourdomain.com/\n</code></pre>"},{"location":"deployment/security/#security-support","title":"\ud83c\udd98 Security Support","text":""},{"location":"deployment/security/#reporting-security-issues","title":"Reporting Security Issues","text":"<ol> <li>Critical Issues: Email security@yourdomain.com</li> <li>General Issues: Create GitHub issue with <code>security</code> label</li> <li>Questions: Contact via Telegram @your_admin_bot</li> </ol>"},{"location":"deployment/security/#security-resources","title":"Security Resources","text":"<ul> <li>OWASP Security Guidelines</li> <li>Let's Encrypt SSL Setup</li> <li>Nginx Security Best Practices</li> <li>MongoDB Security Checklist</li> </ul> <p>\ud83d\udd12 Security is not optional - it's essential for protecting your users and data! </p>"},{"location":"deployment/vps-setup/","title":"VPS Setup Guide","text":"<p>\ud83d\udea7 Coming Soon! \ud83d\udea7</p> <p>This section will provide comprehensive instructions for deploying StreamBot on various VPS providers.</p>"},{"location":"deployment/vps-setup/#whats-coming","title":"What's Coming","text":"<ul> <li>DigitalOcean Setup - Step-by-step VPS deployment</li> <li>AWS EC2 Deployment - Complete AWS setup guide  </li> <li>Google Cloud Platform - GCP deployment instructions</li> <li>Vultr &amp; Linode - Alternative VPS provider guides</li> <li>Ubuntu Server Setup - OS configuration and optimization</li> <li>SSL Certificate Setup - HTTPS configuration with Let's Encrypt</li> <li>Firewall Configuration - Security best practices</li> <li>Auto-scaling Setup - Handling high traffic loads</li> </ul>"},{"location":"deployment/vps-setup/#temporary-quick-setup","title":"Temporary Quick Setup","text":"<p>For now, you can use Docker deployment on any VPS:</p> <pre><code># Basic VPS setup (Ubuntu)\nsudo apt update &amp;&amp; sudo apt upgrade -y\nsudo apt install docker.io docker-compose -y\n\n# Clone and deploy\ngit clone https://github.com/anikethjana/Telegram-Download-Link-Generator.git\ncd Telegram-Download-Link-Generator\ncp .env.example .env\n# Edit .env with your configuration\nnano .env\n\n# Deploy with Docker\ndocker-compose up -d\n</code></pre>"},{"location":"deployment/vps-setup/#need-help","title":"Need Help?","text":"<p>While this guide is being prepared, you can:</p> <ul> <li>\ud83d\udcd6 Check the Docker Deployment guide</li> <li>\ud83d\udcac Contact me on Telegram: @ajmods_bot</li> <li>\ud83d\udc1b Open an issue on GitHub</li> </ul> <p>This documentation is actively being developed. Check back soon for detailed VPS setup instructions! </p>"},{"location":"developer-guide/architecture/","title":"Architecture Overview","text":"<p>StreamBot is built with a distributed architecture that employs a multi-client design pattern with clear separation of concerns for scalability, reliability, and maintainability.</p>"},{"location":"developer-guide/architecture/#multi-client-architecture","title":"Multi-Client Architecture","text":"<p>StreamBot uses a primary client for user interactions and multiple worker clients for file streaming operations, providing load balancing and improved throughput.</p> <pre><code>graph TD\n    subgraph StreamBot\n        subgraph \"Primary Client\"\n            PC[Primary Client]\n            PC --&gt;|User Commands| UC[User Commands]\n            PC --&gt;|File Uploads| FU[File Uploads]\n            PC --&gt;|Admin Tasks| AT[Admin Tasks]\n        end\n\n        subgraph \"Worker Clients\"\n            WC[Worker Clients]\n            WC --&gt;|Streaming| C1[Client 1]\n            WC --&gt;|Streaming| C2[Client 2]\n            WC --&gt;|Streaming| C3[Client 3]\n        end\n    end\n\n    PC --&gt;|User Interactions| UI[User Facing Operations]\n    WC --&gt;|File Serving| FS[File Serving Operations]</code></pre>"},{"location":"developer-guide/architecture/#primary-client","title":"Primary Client","text":"<ul> <li>Handles all user interactions and commands</li> <li>Manages file uploads and validation</li> <li>Processes administrative tasks and monitoring</li> </ul>"},{"location":"developer-guide/architecture/#worker-clients","title":"Worker Clients","text":"<ul> <li>Dedicated to streaming operations</li> <li>Provide load balancing for downloads</li> <li>Improve overall system throughput</li> </ul>"},{"location":"developer-guide/architecture/#application-layers","title":"Application Layers","text":"<p>The application follows a layered architecture for separation of concerns and maintainability.</p> <pre><code>flowchart TD\n    PL[Presentation Layer] --&gt; BL[Business Layer]\n    BL --&gt; DL[Data Layer]\n\n    subgraph \"Presentation Layer\"\n        TB[Telegram Bot Commands]\n        WS[Web Server Download]\n        API[REST API Endpoints]\n    end\n\n    subgraph \"Business Layer\"\n        RL[Rate Limiting]\n        BM[Bandwidth Management]\n        FH[File Handler]\n    end\n\n    subgraph \"Data Layer\"\n        DB[MongoDB Database]\n        FS[File Storage - Log Channel]\n        TA[Telegram API]\n    end</code></pre>"},{"location":"developer-guide/architecture/#presentation-layer","title":"Presentation Layer","text":"<ul> <li>Telegram Bot: User commands and interactions</li> <li>Web Server: File download functionality</li> <li>REST API: System monitoring and integration</li> </ul>"},{"location":"developer-guide/architecture/#business-layer","title":"Business Layer","text":"<ul> <li>Rate Limiting: Controls user access frequency</li> <li>Bandwidth Management: Monitors and limits data transfer</li> <li>File Handler: Processes and manages file operations</li> </ul>"},{"location":"developer-guide/architecture/#data-layer","title":"Data Layer","text":"<ul> <li>MongoDB: User data and application state</li> <li>File Storage: Uses Telegram channels for storage</li> <li>Telegram API: Core communication infrastructure</li> </ul>"},{"location":"developer-guide/architecture/#data-flow-diagrams","title":"Data Flow Diagrams","text":""},{"location":"developer-guide/architecture/#file-upload-flow","title":"File Upload Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Bot\n    participant Validation\n    participant LogChannel\n    participant Database\n\n    User-&gt;&gt;Bot: Send File\n    Bot-&gt;&gt;Validation: Validate File\n    Validation--&gt;&gt;Bot: Validation Result\n\n    alt Valid File\n        Bot-&gt;&gt;LogChannel: Forward to Log Channel\n        LogChannel--&gt;&gt;Bot: Message ID\n        Bot-&gt;&gt;Database: Create Link Record\n        Database--&gt;&gt;Bot: Record Created\n        Bot-&gt;&gt;User: Send Download Link\n    else Invalid File\n        Bot-&gt;&gt;User: Send Error Message\n    end</code></pre>"},{"location":"developer-guide/architecture/#file-download-flow","title":"File Download Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant WebServer\n    participant Validation\n    participant LogChannel\n    participant Database\n\n    User-&gt;&gt;WebServer: Request Download Link\n    WebServer-&gt;&gt;Validation: Decode and Validate Link\n\n    alt Valid Link\n        Validation-&gt;&gt;Database: Check Limitations\n        Database--&gt;&gt;Validation: Validation Result\n\n        alt Within Limits\n            Validation-&gt;&gt;LogChannel: Fetch from Log Channel\n            LogChannel--&gt;&gt;WebServer: Return File\n            WebServer-&gt;&gt;Database: Track Bandwidth\n            WebServer-&gt;&gt;User: Stream File\n        else Exceeded Limits\n            Validation-&gt;&gt;User: Return Error\n        end\n    else Invalid Link\n        Validation-&gt;&gt;User: Return Error\n    end</code></pre>"},{"location":"developer-guide/architecture/#component-details","title":"Component Details","text":""},{"location":"developer-guide/architecture/#clientmanager-client_managerpy","title":"ClientManager (<code>client_manager.py</code>)","text":"<p>The ClientManager orchestrates multiple Telegram client instances for distributed workloads.</p> <pre><code>class ClientManager:\n    def __init__(self):\n        self.primary_client = None  # Primary bot for user interactions\n        self.worker_clients = []    # List of streaming-dedicated clients\n        self._round_robin_index = 0 # Load balancer state\n        self._lock = asyncio.Lock() # Thread-safe operations\n</code></pre> <p>Key Features: - Round-robin load balancing for streaming - Automatic client health monitoring - Graceful startup/shutdown handling - Connection recovery mechanisms</p>"},{"location":"developer-guide/architecture/#configuration-management-configpy","title":"Configuration Management (<code>config.py</code>)","text":"<p>Centralized configuration with environment variable validation.</p> <p>Features: - Type-safe environment variable loading - Required/optional parameter validation - Default value handling - Sensitive data masking in logs</p>"},{"location":"developer-guide/architecture/#database-layer-databasedatabasepy","title":"Database Layer (<code>database/database.py</code>)","text":"<p>MongoDB operations for user and system management.</p> <p>Collections: - <code>users</code>: User registration and tracking - <code>bandwidth_usage</code>: Monthly bandwidth monitoring</p> <p>Features: - Connection pooling - Error handling and retry logic - Efficient query patterns</p>"},{"location":"developer-guide/architecture/#web-server-webwebpy","title":"Web Server (<code>web/web.py</code>)","text":"<p>HTTP server for file downloads and API functionality.</p> <p>Features: - Range request support (partial downloads) - CORS configuration - Rate limiting integration - Error handling and logging</p>"},{"location":"developer-guide/architecture/#utility-modules","title":"Utility Modules","text":""},{"location":"developer-guide/architecture/#rate-limiter-utilsrate_limiterpy","title":"Rate Limiter (<code>utils/rate_limiter.py</code>)","text":"<ul> <li>Algorithm: Sliding window with deque-based timestamp tracking</li> <li>Features: Per-user daily limits, thread-safe operations</li> </ul>"},{"location":"developer-guide/architecture/#bandwidth-manager-utilsbandwidthpy","title":"Bandwidth Manager (<code>utils/bandwidth.py</code>)","text":"<ul> <li>Algorithm: Monthly rolling limits with auto-reset</li> <li>Features: Real-time tracking, MongoDB persistence</li> </ul>"},{"location":"developer-guide/architecture/#memory-manager-utilsmemory_managerpy","title":"Memory Manager (<code>utils/memory_manager.py</code>)","text":"<ul> <li>Purpose: Memory leak prevention and monitoring</li> <li>Features: Periodic cleanup, usage tracking, garbage collection</li> </ul>"},{"location":"developer-guide/architecture/#stream-cleanup-utilsstream_cleanuppy","title":"Stream Cleanup (<code>utils/stream_cleanup.py</code>)","text":"<ul> <li>Purpose: HTTP stream lifecycle management</li> <li>Features: Active connection tracking, automatic cleanup on errors</li> </ul>"},{"location":"developer-guide/architecture/#scaling-considerations","title":"Scaling Considerations","text":""},{"location":"developer-guide/architecture/#horizontal-scaling","title":"Horizontal Scaling","text":"<ul> <li>Worker Clients: Add more bot tokens for increased throughput</li> <li>Database: MongoDB sharding for larger user bases</li> <li>Load Balancing: Multiple web server instances behind proxy</li> </ul>"},{"location":"developer-guide/architecture/#vertical-scaling","title":"Vertical Scaling","text":"<ul> <li>Workers: Increase Pyrogram worker threads</li> <li>Memory: Tune cleanup intervals and cache sizes</li> <li>Bandwidth: Adjust chunk sizes for optimal streaming</li> </ul>"},{"location":"developer-guide/architecture/#security-framework-architecture","title":"Security Framework Architecture","text":"<p>StreamBot includes a comprehensive, modular security framework designed for high performance and enterprise-grade protection.</p>"},{"location":"developer-guide/architecture/#security-component-overview","title":"Security Component Overview","text":"<pre><code>graph TB\n    subgraph \"Security Framework\"\n        A[AuthManager] --&gt; B[JWT Tokens]\n        A --&gt; C[Admin IP Verification]\n        A --&gt; D[Multi-factor Auth]\n\n        E[RateLimiter] --&gt; F[Global Limits]\n        E --&gt; G[Per-IP Tracking]\n        E --&gt; H[DDoS Protection]\n\n        I[InputValidator] --&gt; J[XSS Prevention]\n        I --&gt; K[Injection Protection] \n        I --&gt; L[Log Sanitization]\n\n        M[SecurityHeaders] --&gt; N[CSP Policy]\n        M --&gt; O[CORS Protection]\n        M --&gt; P[Security Headers]\n\n        Q[SecurityMiddleware] --&gt; R[Request Processing]\n        Q --&gt; S[Error Handling]\n        Q --&gt; T[Response Filtering]\n    end\n\n    subgraph \"Application Routes\"\n        U[Download Route /dl/] --&gt; V[Lightweight Security]\n        W[Admin Routes /api/] --&gt; X[Full Security]\n    end\n\n    V --&gt; F\n    V --&gt; P\n    X --&gt; A\n    X --&gt; E\n    X --&gt; I\n    X --&gt; M</code></pre>"},{"location":"developer-guide/architecture/#security-module-structure","title":"Security Module Structure","text":"<pre><code>StreamBot/security/\n\u251c\u2500\u2500 __init__.py          # Security framework initialization\n\u251c\u2500\u2500 auth.py              # JWT authentication &amp; admin verification\n\u251c\u2500\u2500 rate_limiter.py      # Advanced rate limiting &amp; DDoS protection\n\u251c\u2500\u2500 headers.py           # Security headers &amp; CORS management\n\u251c\u2500\u2500 validation.py        # Input validation &amp; XSS prevention\n\u251c\u2500\u2500 mongodb.py           # Secure database connection helper\n\u2514\u2500\u2500 config_validator.py  # Security configuration validation\n</code></pre>"},{"location":"developer-guide/architecture/#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant C as Client\n    participant B as Bot\n    participant A as AuthManager\n    participant W as WebAPI\n\n    C-&gt;&gt;B: /token command\n    B-&gt;&gt;A: generate_jwt_token(user_id)\n    A-&gt;&gt;A: Create 24h JWT with 256-bit secret\n    A-&gt;&gt;B: Return secure token\n    B-&gt;&gt;C: Token (auto-deleted after 5min)\n\n    C-&gt;&gt;W: API request with Bearer token\n    W-&gt;&gt;A: verify_jwt_token(token, request)\n    A-&gt;&gt;A: Multi-factor verification (JWT + IP + User-Agent)\n    A-&gt;&gt;W: Authentication result\n    W-&gt;&gt;C: API response</code></pre>"},{"location":"developer-guide/architecture/#rate-limiting-strategy","title":"Rate Limiting Strategy","text":"<p>StreamBot uses selective rate limiting for optimal performance:</p>"},{"location":"developer-guide/architecture/#download-routes-performance-critical","title":"Download Routes (Performance Critical)","text":"<ul> <li>Global rate limiting: 500 requests/minute across all users</li> <li>No per-client tracking: Minimal memory usage</li> <li>Simple validation: Basic input checks only</li> <li>Lightweight headers: Essential security headers only</li> </ul>"},{"location":"developer-guide/architecture/#admin-routes-security-critical","title":"Admin Routes (Security Critical)","text":"<ul> <li>Per-IP rate limiting: 10 requests/minute per IP</li> <li>JWT authentication: Multi-factor verification</li> <li>Full input validation: Complete sanitization</li> <li>Complete security headers: CSP, HSTS, etc.</li> </ul>"},{"location":"developer-guide/architecture/#security-configuration-validation","title":"Security Configuration Validation","text":"<pre><code># Automatic validation on startup\nsecurity_report = validate_security_config()\n\n# Checks include:\n# - JWT secret strength (minimum 256-bit)\n# - CORS configuration security\n# - Admin access control setup\n# - HTTPS enforcement\n# - Database security settings\n</code></pre>"},{"location":"developer-guide/architecture/#performance-optimizations","title":"Performance Optimizations","text":"<p>The security framework is designed for minimal performance impact:</p> Component Memory Usage CPU Overhead Optimization Download Route ~5MB ~2% Global counters only Admin Routes ~10MB ~5% Full security stack JWT Processing ~1MB ~1% Cached validation Rate Limiting ~8MB ~3% Sliding window cleanup"},{"location":"developer-guide/architecture/#security-event-logging","title":"Security Event Logging","text":"<pre><code># Security events are automatically logged\nlogger.warning(f\"Rate limit exceeded for IP {masked_ip}\")\nlogger.error(f\"Failed authentication attempt from {masked_ip}\")\nlogger.critical(f\"DDoS protection triggered for {masked_ip}\")\n</code></pre>"},{"location":"developer-guide/architecture/#integration-points","title":"Integration Points","text":"<p>The security framework integrates at multiple levels:</p> <ol> <li>Application Level: Middleware for all HTTP requests</li> <li>Route Level: Different security policies per endpoint  </li> <li>Database Level: Secure connection and query protection</li> <li>Bot Level: Token generation and user verification</li> <li>Infrastructure Level: Works with nginx, fail2ban, etc.</li> </ol> <p>This architecture ensures comprehensive protection while maintaining the high performance required for file streaming services.</p>"},{"location":"developer-guide/architecture/#configuration-patterns","title":"Configuration Patterns","text":""},{"location":"developer-guide/architecture/#environment-based-configuration","title":"Environment-Based Configuration","text":"<ul> <li>Development: Local settings with debug logging</li> <li>Production: Optimized settings with minimal logging</li> <li>Docker: Container-friendly configuration</li> </ul>"},{"location":"developer-guide/architecture/#feature-flags","title":"Feature Flags","text":"<ul> <li>Force Subscription: Optional channel requirement</li> <li>Rate Limiting: Configurable daily limits</li> <li>Bandwidth Limits: Optional monthly quotas</li> </ul>"},{"location":"developer-guide/architecture/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"developer-guide/architecture/#throughput","title":"Throughput","text":"<ul> <li>Single Client: ~50 concurrent downloads</li> <li>Multi-Client: Scales linearly with worker count</li> <li>Database: Optimized for read-heavy workloads</li> </ul>"},{"location":"developer-guide/architecture/#latency","title":"Latency","text":"<ul> <li>Link Generation: &lt;100ms average</li> <li>Download Start: &lt;500ms average</li> <li>API Response: &lt;50ms average</li> </ul>"},{"location":"developer-guide/architecture/#resource-usage","title":"Resource Usage","text":"<ul> <li>Memory: ~50MB base + 10MB per active client</li> <li>CPU: Low usage, I/O bound operations</li> <li>Network: Dependent on file transfer volume</li> </ul>"},{"location":"developer-guide/architecture/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"developer-guide/architecture/#single-server-deployment","title":"Single Server Deployment","text":"<pre><code>flowchart TD\n    subgraph \"StreamBot Server\"\n        subgraph \"Application\"\n            PC[Primary Client]\n            WC[Worker Clients]\n            WS[Web Server]\n        end\n    end\n\n    DB[MongoDB Database]\n\n    Application --- DB</code></pre>"},{"location":"developer-guide/architecture/#distributed-deployment","title":"Distributed Deployment","text":"<pre><code>flowchart TD\n    LB[Load Balancer] --&gt; SB1[StreamBot 1]\n    LB --&gt; SB2[StreamBot 2]\n\n    SB1 --&gt; DB[(MongoDB Cluster)]\n    SB2 --&gt; DB</code></pre> <p>This architecture provides a solid foundation for understanding how StreamBot components interact and can be extended or modified for specific deployment needs. </p>"},{"location":"developer-guide/contributing/","title":"Contributing to StreamBot","text":"<p>Thank you for considering contributing to StreamBot! \ud83c\udf89</p> <p>This guide outlines how to contribute effectively to the project and maintain code quality.</p>"},{"location":"developer-guide/contributing/#ways-to-contribute","title":"Ways to Contribute","text":""},{"location":"developer-guide/contributing/#code-contributions","title":"\ud83d\udcbb Code Contributions","text":"<ul> <li>Bug fixes and improvements</li> <li>New features and enhancements</li> <li>Performance optimizations</li> <li>Test coverage improvements</li> </ul>"},{"location":"developer-guide/contributing/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Improve existing documentation</li> <li>Add examples and tutorials</li> <li>Fix typos and clarifications</li> <li>Translate documentation</li> </ul>"},{"location":"developer-guide/contributing/#bug-reports","title":"\ud83d\udc1b Bug Reports","text":"<ul> <li>Report bugs with detailed information</li> <li>Provide steps to reproduce issues</li> <li>Share system information and logs</li> </ul>"},{"location":"developer-guide/contributing/#feature-requests","title":"\ud83d\udca1 Feature Requests","text":"<ul> <li>Suggest new features or improvements</li> <li>Discuss implementation approaches</li> <li>Share use cases and requirements</li> </ul>"},{"location":"developer-guide/contributing/#development-setup","title":"Development Setup","text":""},{"location":"developer-guide/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+</li> <li>MongoDB (local or cloud)</li> <li>Git</li> <li>Code editor (VS Code recommended)</li> </ul>"},{"location":"developer-guide/contributing/#quick-setup","title":"Quick Setup","text":"<pre><code># Fork and clone the repository\ngit clone https://github.com/your-username/StreamBot.git\ncd StreamBot\n\n# Set up virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n\n# Copy environment configuration\ncp .env.example .env\n# Edit .env with your configuration\n\n# Run the application\npython -m StreamBot\n</code></pre>"},{"location":"developer-guide/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"developer-guide/contributing/#1-create-a-branch","title":"1. Create a Branch","text":"<pre><code>git checkout -b feature/your-feature-name\n# or\ngit checkout -b fix/bug-description\n</code></pre> <p>Branch Naming Convention: - <code>feature/feature-name</code> - New features - <code>fix/bug-description</code> - Bug fixes - <code>docs/documentation-topic</code> - Documentation improvements - <code>refactor/component-name</code> - Code refactoring</p>"},{"location":"developer-guide/contributing/#2-make-changes","title":"2. Make Changes","text":"<p>Follow these guidelines:</p>"},{"location":"developer-guide/contributing/#code-style","title":"Code Style","text":"<ul> <li>Use Black for code formatting: <code>black StreamBot/</code></li> <li>Follow PEP 8 style guidelines</li> <li>Use type hints for all functions</li> <li>Write descriptive variable names</li> <li>Keep functions small and focused</li> </ul>"},{"location":"developer-guide/contributing/#documentation_1","title":"Documentation","text":"<ul> <li>Add docstrings to all public functions</li> <li>Update relevant documentation files</li> <li>Include code examples where helpful</li> <li>Keep comments concise and meaningful</li> </ul>"},{"location":"developer-guide/contributing/#testing","title":"Testing","text":"<ul> <li>Write unit tests for new functionality</li> <li>Ensure existing tests pass: <code>pytest</code></li> <li>Aim for &gt;80% code coverage</li> <li>Test error conditions and edge cases</li> </ul>"},{"location":"developer-guide/contributing/#3-commit-changes","title":"3. Commit Changes","text":"<p>Use conventional commit format:</p> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;description&gt;\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>Types: <code>feat</code>, <code>fix</code>, <code>docs</code>, <code>style</code>, <code>refactor</code>, <code>test</code>, <code>chore</code></p> <p>Examples: <pre><code>git commit -m \"feat(api): add bandwidth usage endpoint\"\ngit commit -m \"fix(bot): handle connection timeout errors\"\ngit commit -m \"docs(readme): update installation instructions\"\n</code></pre></p>"},{"location":"developer-guide/contributing/#4-test-your-changes","title":"4. Test Your Changes","text":"<pre><code># Run all tests\npytest\n\n# Check code style\nblack --check StreamBot/\nflake8 StreamBot/\n\n# Type checking\nmypy StreamBot/\n\n# Test the application\npython -m StreamBot\n</code></pre>"},{"location":"developer-guide/contributing/#5-submit-pull-request","title":"5. Submit Pull Request","text":"<ol> <li>Push your branch: <code>git push origin feature/your-feature-name</code></li> <li>Create a Pull Request on GitHub</li> <li>Fill out the PR template with:</li> <li>Clear description of changes</li> <li>Reference to related issues</li> <li>Screenshots if applicable</li> </ol>"},{"location":"developer-guide/contributing/#code-quality-standards","title":"Code Quality Standards","text":""},{"location":"developer-guide/contributing/#formatting","title":"Formatting","text":"<p>Use Black for consistent formatting:</p> <pre><code># Format all code\nblack StreamBot/\n\n# Check formatting\nblack --check StreamBot/\n</code></pre>"},{"location":"developer-guide/contributing/#linting","title":"Linting","text":"<p>Use flake8 for code quality:</p> <pre><code># Check code quality\nflake8 StreamBot/\n</code></pre>"},{"location":"developer-guide/contributing/#type-checking","title":"Type Checking","text":"<p>Use mypy for type safety:</p> <pre><code># Type checking\nmypy StreamBot/\n</code></pre>"},{"location":"developer-guide/contributing/#testing_1","title":"Testing","text":"<p>Write comprehensive tests:</p> <pre><code>import pytest\nfrom unittest.mock import Mock, patch\nfrom StreamBot.utils.utils import humanbytes\n\ndef test_humanbytes_conversion():\n    \"\"\"Test human-readable byte conversion.\"\"\"\n    assert humanbytes(1024) == \"1.00 KB\"\n    assert humanbytes(1048576) == \"1.00 MB\"\n    assert humanbytes(0) == \"0 B\"\n\n@patch('StreamBot.database.database.user_data')\nasync def test_add_user(mock_collection):\n    \"\"\"Test user addition to database.\"\"\"\n    mock_collection.find_one.return_value = None\n    mock_collection.insert_one.return_value = Mock()\n\n    from StreamBot.database.database import add_user\n    await add_user(12345)\n\n    mock_collection.insert_one.assert_called_once()\n</code></pre>"},{"location":"developer-guide/contributing/#project-structure","title":"Project Structure","text":"<p>Understanding the codebase:</p> <pre><code>StreamBot/\n\u251c\u2500\u2500 StreamBot/              # Main application\n\u2502   \u251c\u2500\u2500 __main__.py        # Entry point\n\u2502   \u251c\u2500\u2500 config.py          # Configuration\n\u2502   \u251c\u2500\u2500 bot.py             # Bot handlers\n\u2502   \u251c\u2500\u2500 client_manager.py  # Multi-client management\n\u2502   \u251c\u2500\u2500 database/          # Database operations\n\u2502   \u251c\u2500\u2500 utils/            # Utility modules\n\u2502   \u2514\u2500\u2500 web/              # Web server\n\u251c\u2500\u2500 tests/                # Test suite\n\u251c\u2500\u2500 docs/                 # Documentation\n\u2514\u2500\u2500 requirements.txt      # Dependencies\n</code></pre>"},{"location":"developer-guide/contributing/#adding-new-features","title":"Adding New Features","text":""},{"location":"developer-guide/contributing/#feature-development-process","title":"Feature Development Process","text":"<ol> <li>Discuss the feature in GitHub Issues</li> <li>Design the implementation with community input</li> <li>Create a branch following naming conventions</li> <li>Implement the feature with tests</li> <li>Update documentation as needed</li> <li>Submit a pull request for review</li> </ol>"},{"location":"developer-guide/contributing/#feature-guidelines","title":"Feature Guidelines","text":"<ul> <li>Follow existing patterns in the codebase</li> <li>Add appropriate error handling and logging</li> <li>Update configuration if needed</li> <li>Add tests for new functionality</li> <li>Update documentation accordingly</li> </ul>"},{"location":"developer-guide/contributing/#bug-reports_1","title":"Bug Reports","text":""},{"location":"developer-guide/contributing/#creating-good-bug-reports","title":"Creating Good Bug Reports","text":"<p>Include the following information:</p> <p><pre><code>**Bug Description**\nClear description of the issue.\n\n**Steps to Reproduce**\n1. Go to '...'\n2. Click on '...'\n3. See error\n\n**Expected Behavior**\nWhat should happen.\n\n**Actual Behavior**\nWhat actually happens.\n\n**Environment**\n- OS: [e.g., Ubuntu 20.04]\n- Python Version: [e.g., 3.9.5]\n- StreamBot Version: [e.g., 1.0.0]\n\n**Logs**\n</code></pre> [Paste relevant log entries] <pre><code>**Additional Context**\nAny other relevant information.\n</code></pre></p>"},{"location":"developer-guide/contributing/#community-guidelines","title":"Community Guidelines","text":""},{"location":"developer-guide/contributing/#be-respectful","title":"Be Respectful","text":"<ul> <li>Use inclusive language</li> <li>Be patient with newcomers</li> <li>Provide constructive feedback</li> <li>Celebrate contributions of all sizes</li> </ul>"},{"location":"developer-guide/contributing/#communication","title":"Communication","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>GitHub Discussions: General questions and ideas</li> <li>Pull Requests: Code review and discussion</li> </ul>"},{"location":"developer-guide/contributing/#recognition","title":"Recognition","text":"<p>Contributors will be recognized in: - Contributors section in README - Release notes for significant contributions - Documentation where applicable</p>"},{"location":"developer-guide/contributing/#getting-help","title":"Getting Help","text":"<p>If you need help:</p> <ol> <li>Check existing documentation</li> <li>Search GitHub Issues for similar problems</li> <li>Ask in GitHub Discussions</li> <li>Reach out to maintainers if needed</li> </ol> <p>Thank you for contributing to StreamBot! Every contribution helps make the project better. \ud83d\ude80 </p>"},{"location":"getting-started/configuration/","title":"Configuration Guide","text":"<p>This guide covers all configuration options for StreamBot using environment variables.</p>"},{"location":"getting-started/configuration/#environment-variables-overview","title":"Environment Variables Overview","text":"<p>StreamBot is configured entirely through environment variables, making it easy to deploy across different environments.</p>"},{"location":"getting-started/configuration/#required-variables","title":"Required Variables","text":"<pre><code># --- Telegram Core (Required) ---\nAPI_ID=12345678\nAPI_HASH=your_api_hash_here\nBOT_TOKEN=your_bot_token_here\n\n# --- Channels (Required) ---\nLOG_CHANNEL=-100xxxxxxxxxx\n\n# --- Web Server (Required) ---\nBASE_URL=https://yourdomain.com\n</code></pre>"},{"location":"getting-started/configuration/#optional-variables","title":"Optional Variables","text":"<pre><code># --- Channel Settings ---\nFORCE_SUB_CHANNEL=-100yyyyyyyyyy\n\n# --- Server Configuration ---\nPORT=8080\nBIND_ADDRESS=0.0.0.0\n\n# --- Bot Behavior ---\nLINK_EXPIRY_SECONDS=86400\nSESSION_NAME=TgDlBot\nWORKERS=4\n\n# --- Admin Access ---\nADMINS=123456789 987654321\n\n# --- Rate Limiting ---\nMAX_LINKS_PER_DAY=5\n\n# --- Bandwidth Management ---\nBANDWIDTH_LIMIT_GB=100\n\n# --- Multi-Bot Support ---\nADDITIONAL_BOT_TOKENS=token1 token2 token3\nWORKER_CLIENT_PYROGRAM_WORKERS=1\nWORKER_SESSIONS_IN_MEMORY=true\n\n# --- Database ---\nDATABASE_URL=mongodb+srv://username:password@cluster-url/database\nDATABASE_NAME=TgDlBotUsers\n\n# --- Optional ---\nGITHUB_REPO_URL=https://github.com/yourusername/your-repo\n</code></pre>"},{"location":"getting-started/configuration/#configuration-sections","title":"Configuration Sections","text":""},{"location":"getting-started/configuration/#1-telegram-core-settings","title":"1. Telegram Core Settings","text":""},{"location":"getting-started/configuration/#api_id-required","title":"<code>API_ID</code> (Required)","text":"<ul> <li>Type: Integer</li> <li>Description: Your Telegram application's API ID</li> <li>How to get: my.telegram.org</li> <li>Example: <code>12345678</code></li> </ul>"},{"location":"getting-started/configuration/#api_hash-required","title":"<code>API_HASH</code> (Required)","text":"<ul> <li>Type: String</li> <li>Description: Your Telegram application's API Hash</li> <li>How to get: my.telegram.org</li> <li>Example: <code>a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6</code></li> </ul>"},{"location":"getting-started/configuration/#bot_token-required","title":"<code>BOT_TOKEN</code> (Required)","text":"<ul> <li>Type: String</li> <li>Description: Your Telegram bot token</li> <li>How to get: @BotFather</li> <li>Example: <code>123456789:ABCdefGHIjklMNOpqrSTUvwxyz1234567890</code></li> </ul>"},{"location":"getting-started/configuration/#2-channel-configuration","title":"2. Channel Configuration","text":""},{"location":"getting-started/configuration/#log_channel-required","title":"<code>LOG_CHANNEL</code> (Required)","text":"<ul> <li>Type: Integer (Channel ID)</li> <li>Description: Private channel where files are stored</li> <li>Requirements: Bot must be admin with post messages permission</li> <li>How to get ID: @TGIdsBot</li> <li>Example: <code>-1001234567890</code></li> </ul>"},{"location":"getting-started/configuration/#force_sub_channel-optional","title":"<code>FORCE_SUB_CHANNEL</code> (Optional)","text":"<ul> <li>Type: Integer (Channel ID)</li> <li>Description: Channel users must join before using the bot</li> <li>Requirements: Bot must be admin with invite users permission</li> <li>Default: None (force subscription disabled)</li> <li>Example: <code>-1009876543210</code></li> </ul>"},{"location":"getting-started/configuration/#3-web-server-settings","title":"3. Web Server Settings","text":""},{"location":"getting-started/configuration/#base_url-required","title":"<code>BASE_URL</code> (Required)","text":"<ul> <li>Type: String (URL)</li> <li>Description: Public-facing URL for download links</li> <li>Requirements: Must NOT end with <code>/</code></li> <li>Example: <code>https://yourdomain.com</code></li> </ul>"},{"location":"getting-started/configuration/#port-optional","title":"<code>PORT</code> (Optional)","text":"<ul> <li>Type: Integer</li> <li>Description: Port for the web server to listen on</li> <li>Default: <code>8080</code></li> <li>Example: <code>8080</code></li> </ul>"},{"location":"getting-started/configuration/#bind_address-optional","title":"<code>BIND_ADDRESS</code> (Optional)","text":"<ul> <li>Type: String (IP Address)</li> <li>Description: Network address to bind the web server</li> <li>Default: <code>0.0.0.0</code> (all interfaces)</li> <li>Example: <code>127.0.0.1</code> (localhost only)</li> </ul>"},{"location":"getting-started/configuration/#4-bot-behavior","title":"4. Bot Behavior","text":""},{"location":"getting-started/configuration/#link_expiry_seconds-optional","title":"<code>LINK_EXPIRY_SECONDS</code> (Optional)","text":"<ul> <li>Type: Integer</li> <li>Description: Duration in seconds for link validity</li> <li>Default: <code>86400</code> (24 hours)</li> <li>Example: <code>172800</code> (48 hours)</li> </ul>"},{"location":"getting-started/configuration/#session_name-optional","title":"<code>SESSION_NAME</code> (Optional)","text":"<ul> <li>Type: String</li> <li>Description: Name for Pyrogram session file</li> <li>Default: <code>TgDlBot</code></li> <li>Example: <code>MyStreamBot</code></li> </ul>"},{"location":"getting-started/configuration/#workers-optional","title":"<code>WORKERS</code> (Optional)","text":"<ul> <li>Type: Integer</li> <li>Description: Number of Pyrogram worker threads</li> <li>Default: <code>4</code></li> <li>Range: <code>1-32</code></li> <li>Example: <code>8</code></li> </ul>"},{"location":"getting-started/configuration/#5-admin-access-control","title":"5. Admin Access Control","text":""},{"location":"getting-started/configuration/#admins-optional","title":"<code>ADMINS</code> (Optional)","text":"<ul> <li>Type: Space-separated integers</li> <li>Description: Telegram user IDs with admin privileges</li> <li>Default: None (no admin features)</li> <li>How to get ID: @TGIdsBot</li> <li>Example: <code>123456789 987654321 555666777</code></li> </ul> <p>Admin Features: - <code>/stats</code> - System monitoring with security status - <code>/logs</code> - Log management with filtering - <code>/broadcast</code> - Message all users</p>"},{"location":"getting-started/configuration/#6-rate-limiting","title":"6. Rate Limiting","text":""},{"location":"getting-started/configuration/#max_links_per_day-optional","title":"<code>MAX_LINKS_PER_DAY</code> (Optional)","text":"<ul> <li>Type: Integer</li> <li>Description: Maximum links per user per day</li> <li>Default: <code>5</code></li> <li>Special: <code>0</code> disables rate limiting</li> <li>Example: <code>10</code></li> </ul>"},{"location":"getting-started/configuration/#7-bandwidth-management","title":"7. Bandwidth Management","text":""},{"location":"getting-started/configuration/#bandwidth_limit_gb-optional","title":"<code>BANDWIDTH_LIMIT_GB</code> (Optional)","text":"<ul> <li>Type: Integer</li> <li>Description: Monthly bandwidth limit in GigaBytes</li> <li>Default: <code>100</code></li> <li>Special: <code>0</code> disables bandwidth limiting</li> <li>Example: <code>500</code></li> </ul>"},{"location":"getting-started/configuration/#8-multi-bot-architecture","title":"8. Multi-Bot Architecture","text":""},{"location":"getting-started/configuration/#additional_bot_tokens-optional","title":"<code>ADDITIONAL_BOT_TOKENS</code> (Optional)","text":"<ul> <li>Type: Space-separated strings</li> <li>Description: Additional bot tokens for load distribution</li> <li>Requirements: All bots must be admins in LOG_CHANNEL</li> <li>Default: None (single bot mode)</li> <li>Example: <code>bot1_token bot2_token bot3_token</code></li> </ul>"},{"location":"getting-started/configuration/#worker_client_pyrogram_workers-optional","title":"<code>WORKER_CLIENT_PYROGRAM_WORKERS</code> (Optional)","text":"<ul> <li>Type: Integer</li> <li>Description: Workers per additional bot</li> <li>Default: <code>1</code></li> <li>Example: <code>2</code></li> </ul>"},{"location":"getting-started/configuration/#worker_sessions_in_memory-optional","title":"<code>WORKER_SESSIONS_IN_MEMORY</code> (Optional)","text":"<ul> <li>Type: Boolean</li> <li>Description: Store worker sessions in memory only</li> <li>Default: <code>true</code></li> <li>Example: <code>false</code></li> </ul>"},{"location":"getting-started/configuration/#9-database-configuration","title":"9. Database Configuration","text":""},{"location":"getting-started/configuration/#database_url-optional","title":"<code>DATABASE_URL</code> (Optional)","text":"<ul> <li>Type: String (MongoDB URI)</li> <li>Description: MongoDB connection string</li> <li>Required for: Broadcast functionality</li> <li>Example: <code>mongodb+srv://user:pass@cluster.mongodb.net/database</code></li> </ul>"},{"location":"getting-started/configuration/#database_name-optional","title":"<code>DATABASE_NAME</code> (Optional)","text":"<ul> <li>Type: String</li> <li>Description: MongoDB database name</li> <li>Default: <code>TgDlBotUsers</code></li> <li>Example: <code>StreamBotUsers</code></li> </ul>"},{"location":"getting-started/configuration/#10-optional-settings","title":"10. Optional Settings","text":""},{"location":"getting-started/configuration/#github_repo_url-optional","title":"<code>GITHUB_REPO_URL</code> (Optional)","text":"<ul> <li>Type: String (URL)</li> <li>Description: GitHub repository URL for info endpoint</li> <li>Default: None</li> <li>Example: <code>https://github.com/yourusername/StreamBot</code></li> </ul>"},{"location":"getting-started/configuration/#configuration-examples","title":"Configuration Examples","text":""},{"location":"getting-started/configuration/#minimal-configuration","title":"Minimal Configuration","text":"<pre><code># Bare minimum for basic operation\nAPI_ID=12345678\nAPI_HASH=your_api_hash_here\nBOT_TOKEN=your_bot_token_here\nLOG_CHANNEL=-1001234567890\nBASE_URL=https://yourdomain.com\n</code></pre>"},{"location":"getting-started/configuration/#production-configuration","title":"Production Configuration","text":"<pre><code># --- Core Settings ---\nAPI_ID=12345678\nAPI_HASH=your_api_hash_here\nBOT_TOKEN=your_bot_token_here\n\n# --- Channels ---\nLOG_CHANNEL=-1001234567890\nFORCE_SUB_CHANNEL=-1009876543210\n\n# --- Server ---\nBASE_URL=https://streambot.yourdomain.com\nPORT=8080\nBIND_ADDRESS=0.0.0.0\n\n# --- Admin Access ---\nADMINS=123456789 987654321\n\n# --- Limits ---\nMAX_LINKS_PER_DAY=10\nBANDWIDTH_LIMIT_GB=500\nLINK_EXPIRY_SECONDS=172800\n\n# --- Performance ---\nWORKERS=8\nADDITIONAL_BOT_TOKENS=worker_bot1 worker_bot2 worker_bot3\nWORKER_CLIENT_PYROGRAM_WORKERS=2\n\n# --- Database ---\nDATABASE_URL=mongodb+srv://user:pass@cluster.mongodb.net/streambot\nDATABASE_NAME=StreamBotProd\n\n# --- Optional ---\nGITHUB_REPO_URL=https://github.com/yourusername/StreamBot\n</code></pre>"},{"location":"getting-started/configuration/#development-configuration","title":"Development Configuration","text":"<pre><code># --- Core Settings ---\nAPI_ID=12345678\nAPI_HASH=your_api_hash_here\nBOT_TOKEN=your_dev_bot_token_here\n\n# --- Channels ---\nLOG_CHANNEL=-1001111111111\n\n# --- Server ---\nBASE_URL=http://localhost:8080\nPORT=8080\nBIND_ADDRESS=127.0.0.1\n\n# --- Admin Access ---\nADMINS=123456789\n\n# --- Development Settings ---\nMAX_LINKS_PER_DAY=0\nBANDWIDTH_LIMIT_GB=0\nLINK_EXPIRY_SECONDS=3600\nWORKERS=2\nSESSION_NAME=TgDlBotDev\n</code></pre>"},{"location":"getting-started/configuration/#configuration-validation","title":"Configuration Validation","text":"<p>StreamBot automatically validates configuration on startup:</p>"},{"location":"getting-started/configuration/#required-validation","title":"Required Validation","text":"<ul> <li>\u2705 All required variables are present</li> <li>\u2705 Telegram credentials are valid</li> <li>\u2705 Channel IDs are properly formatted</li> <li>\u2705 Base URL format is correct</li> </ul>"},{"location":"getting-started/configuration/#security-validation","title":"Security Validation","text":"<ul> <li>\u2705 Admin user IDs are valid integers</li> <li>\u2705 Rate limiting values are reasonable</li> <li>\u2705 Database connection (if provided)</li> </ul>"},{"location":"getting-started/configuration/#performance-validation","title":"Performance Validation","text":"<ul> <li>\u2705 Worker counts are within limits</li> <li>\u2705 Memory usage is reasonable</li> <li>\u2705 Network binding is valid</li> </ul>"},{"location":"getting-started/configuration/#environment-file-setup","title":"Environment File Setup","text":""},{"location":"getting-started/configuration/#using-env-file","title":"Using .env File","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code># StreamBot Configuration\n# Copy this template and fill in your values\n\n# --- Telegram Core (Required) ---\nAPI_ID=\nAPI_HASH=\nBOT_TOKEN=\n\n# --- Channels (Required) ---\nLOG_CHANNEL=\n\n# --- Web Server (Required) ---\nBASE_URL=\n\n# --- Optional Settings ---\n# Remove the # to enable these options\n\n# FORCE_SUB_CHANNEL=\n# PORT=8080\n# ADMINS=\n# MAX_LINKS_PER_DAY=5\n# BANDWIDTH_LIMIT_GB=100\n</code></pre>"},{"location":"getting-started/configuration/#docker-environment","title":"Docker Environment","text":"<p>For Docker deployments:</p> <pre><code># docker-compose.yml\nversion: '3.8'\nservices:\n  streambot:\n    build: .\n    environment:\n      - API_ID=${API_ID}\n      - API_HASH=${API_HASH}\n      - BOT_TOKEN=${BOT_TOKEN}\n      - LOG_CHANNEL=${LOG_CHANNEL}\n      - BASE_URL=${BASE_URL}\n      - ADMINS=${ADMINS}\n    ports:\n      - \"8080:8080\"\n    env_file:\n      - .env\n</code></pre>"},{"location":"getting-started/configuration/#security-considerations","title":"Security Considerations","text":""},{"location":"getting-started/configuration/#sensitive-data-protection","title":"Sensitive Data Protection","text":"<ul> <li>Never commit tokens or API credentials to version control</li> <li>Use environment files that are gitignored</li> <li>Rotate tokens periodically for security</li> <li>Limit admin access to trusted users only</li> </ul>"},{"location":"getting-started/configuration/#network-security","title":"Network Security","text":"<ul> <li>Use HTTPS in production (never HTTP)</li> <li>Bind to specific interfaces when possible</li> <li>Configure firewalls appropriately</li> <li>Monitor access logs for suspicious activity</li> </ul>"},{"location":"getting-started/configuration/#database-security","title":"Database Security","text":"<ul> <li>Use strong passwords for database connections</li> <li>Enable SSL/TLS for database connections</li> <li>Limit database permissions to required operations only</li> <li>Regular backups of user data</li> </ul>"},{"location":"getting-started/configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/configuration/#common-configuration-issues","title":"Common Configuration Issues","text":""},{"location":"getting-started/configuration/#invalid-channel-id","title":"Invalid Channel ID","text":"<pre><code>Error: Could not access LOG_CHANNEL\nSolution: Ensure bot is admin with post messages permission\n</code></pre>"},{"location":"getting-started/configuration/#invalid-base-url","title":"Invalid Base URL","text":"<pre><code>Error: BASE_URL must not end with '/'\nSolution: Remove trailing slash from BASE_URL\n</code></pre>"},{"location":"getting-started/configuration/#token-format-error","title":"Token Format Error","text":"<pre><code>Error: Invalid BOT_TOKEN format\nSolution: Get new token from @BotFather\n</code></pre>"},{"location":"getting-started/configuration/#validation-commands","title":"Validation Commands","text":"<p>Test your configuration:</p> <pre><code># Test bot connectivity\npython -c \"from StreamBot.config import Config; print('Config valid!')\"\n\n# Test channel access\npython -c \"from StreamBot.utils.helpers import test_channel_access; test_channel_access()\"\n\n# Test admin configuration\npython -c \"from StreamBot.security.auth import verify_admin; print('Admin config valid!')\"\n</code></pre>"},{"location":"getting-started/configuration/#best-practices","title":"Best Practices","text":""},{"location":"getting-started/configuration/#configuration-management","title":"Configuration Management","text":"<ol> <li>Use environment files for local development</li> <li>Use container environment for production</li> <li>Document all custom values for team members</li> <li>Test configuration changes in development first</li> </ol>"},{"location":"getting-started/configuration/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Rotate tokens regularly (quarterly recommended)</li> <li>Monitor admin activity through logs</li> <li>Use strong database passwords with special characters</li> <li>Enable all security features in production</li> </ol>"},{"location":"getting-started/configuration/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Adjust worker counts based on server capacity</li> <li>Monitor memory usage and adjust limits</li> <li>Use multiple worker bots for high traffic</li> <li>Configure reasonable rate limits based on usage patterns </li> </ol>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide will walk you through installing StreamBot on your system. Choose the method that best suits your needs.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing StreamBot, ensure you have:</p> <ul> <li>Python 3.8 or higher (Download Python)</li> <li>MongoDB 4.4+ (local or cloud instance)</li> <li>Git for cloning the repository</li> <li>Telegram Bot Token from @BotFather</li> <li>Telegram API credentials from my.telegram.org</li> </ul>"},{"location":"getting-started/installation/#method-1-standard-installation","title":"Method 1: Standard Installation","text":""},{"location":"getting-started/installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/yourusername/StreamBot.git\ncd StreamBot\n</code></pre>"},{"location":"getting-started/installation/#2-create-virtual-environment","title":"2. Create Virtual Environment","text":"WindowsmacOS/Linux <pre><code>python -m venv venv\nvenv\\Scripts\\activate\n</code></pre> <pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre>"},{"location":"getting-started/installation/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#4-environment-configuration","title":"4. Environment Configuration","text":"<pre><code># Copy the example environment file\ncp .env.example .env\n\n# Edit the configuration file\nnano .env  # or use your preferred editor\n</code></pre>"},{"location":"getting-started/installation/#method-2-docker-installation","title":"Method 2: Docker Installation","text":""},{"location":"getting-started/installation/#1-using-docker-compose-recommended","title":"1. Using Docker Compose (Recommended)","text":"<pre><code># Clone repository\ngit clone https://github.com/yourusername/StreamBot.git\ncd StreamBot\n\n# Copy environment file\ncp .env.example .env\n# Edit .env with your configuration\n\n# Start with Docker Compose\ndocker-compose up -d\n</code></pre>"},{"location":"getting-started/installation/#2-using-docker-only","title":"2. Using Docker Only","text":"<pre><code># Build the image\ndocker build -t streambot .\n\n# Run the container\ndocker run -d \\\n  --name streambot \\\n  --env-file .env \\\n  -p 8080:8080 \\\n  streambot\n</code></pre>"},{"location":"getting-started/installation/#post-installation-setup","title":"Post-Installation Setup","text":""},{"location":"getting-started/installation/#1-telegram-bot-setup","title":"1. Telegram Bot Setup","text":"<ol> <li>Create a Bot:</li> <li>Message @BotFather on Telegram</li> <li>Send <code>/newbot</code> and follow the instructions</li> <li> <p>Save the bot token</p> </li> <li> <p>Create Log Channel:</p> </li> <li>Create a private Telegram channel</li> <li>Add your bot as an admin with \"Post Messages\" permission</li> <li> <p>Get the channel ID using @username_to_id_bot</p> </li> <li> <p>Get API Credentials:</p> </li> <li>Visit my.telegram.org</li> <li>Log in with your phone number</li> <li>Go to \"API Development Tools\"</li> <li>Create a new application to get API ID and Hash</li> </ol>"},{"location":"getting-started/installation/#2-mongodb-setup","title":"2. MongoDB Setup","text":"Local MongoDBMongoDB Atlas (Cloud) <pre><code># Install MongoDB (Ubuntu/Debian)\nsudo apt update\nsudo apt install mongodb\n\n# Start MongoDB service\nsudo systemctl start mongodb\nsudo systemctl enable mongodb\n</code></pre> <ol> <li>Create account at MongoDB Atlas</li> <li>Create a new cluster</li> <li>Get connection string</li> <li>Whitelist your IP address</li> </ol>"},{"location":"getting-started/installation/#3-configuration","title":"3. Configuration","text":"<p>Edit your <code>.env</code> file with the following required variables:</p> <pre><code># Telegram Configuration\nAPI_ID=your_api_id_here\nAPI_HASH=your_api_hash_here\nBOT_TOKEN=your_bot_token_here\nLOG_CHANNEL=-1001234567890\n\n# Database Configuration\nDATABASE_URL=mongodb://localhost:27017\nDATABASE_NAME=StreamBotDB\n\n# Server Configuration\nBASE_URL=http://localhost:8080\nPORT=8080\nBIND_ADDRESS=127.0.0.1\n\n# Admin Configuration\nADMINS=your_telegram_user_id\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":""},{"location":"getting-started/installation/#1-test-the-installation","title":"1. Test the Installation","text":"<pre><code># Start StreamBot\npython -m StreamBot\n</code></pre> <p>You should see output like: <pre><code>INFO - StreamBot starting up...\nINFO - Primary bot client operational as @YourBotName\nINFO - Web server started on http://127.0.0.1:8080\n</code></pre></p>"},{"location":"getting-started/installation/#2-test-bot-functionality","title":"2. Test Bot Functionality","text":"<ol> <li>Send <code>/start</code> to your bot on Telegram</li> <li>Send a file to test link generation</li> <li>Visit <code>http://localhost:8080/api/info</code> to check API status</li> </ol>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>Bot token invalid: <pre><code>ERROR - Bot token is invalid\n</code></pre> - Verify your bot token in the <code>.env</code> file - Ensure there are no extra spaces or characters</p> <p>Database connection failed: <pre><code>ERROR - Failed to connect to MongoDB\n</code></pre> - Check if MongoDB is running: <code>sudo systemctl status mongodb</code> - Verify DATABASE_URL in your <code>.env</code> file</p> <p>Port already in use: <pre><code>ERROR - Port 8080 is already in use\n</code></pre> - Change the PORT in your <code>.env</code> file - Or stop the process using port 8080</p> <p>Permission denied for log channel: <pre><code>ERROR - Bot doesn't have permission to post in log channel\n</code></pre> - Ensure the bot is added as admin to your log channel - Verify the LOG_CHANNEL ID is correct (should be negative for channels)</p>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the troubleshooting section</li> <li>Review logs for error messages</li> <li>Join our community discussions</li> <li>Report bugs on GitHub Issues</li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once installation is complete:</p> <ol> <li>Configure your bot with additional settings</li> <li>Follow the Quick Start guide for basic usage</li> <li>Review the User Guide for detailed features </li> </ol>"},{"location":"getting-started/introduction/","title":"Introduction to StreamBot","text":"<p>StreamBot is a powerful Telegram bot that generates direct download links for files sent to it. It allows you to share files of any size through Telegram, providing recipients with direct download links that don't require a Telegram account to access.</p>"},{"location":"getting-started/introduction/#what-streambot-does","title":"What StreamBot Does","text":"<p>StreamBot solves a common problem: sharing large files through Telegram in a way that anyone can access them. When you send a file to StreamBot, it:</p> <ol> <li>Processes the file securely</li> <li>Stores it using Telegram's infrastructure</li> <li>Generates a direct download link</li> <li>Manages bandwidth and download limits</li> <li>Tracks usage statistics</li> </ol>"},{"location":"getting-started/introduction/#key-benefits","title":"Key Benefits","text":"<ul> <li> <p> High Performance</p> <p>Multi-client architecture ensures fast processing and downloads even under heavy load.</p> </li> <li> <p> Controlled Access</p> <p>Configure download limits, rate limiting, and optional force subscription for greater control.</p> </li> <li> <p> Usage Monitoring</p> <p>Track bandwidth usage, user statistics, and system performance in real-time.</p> </li> <li> <p> API Integration</p> <p>REST API allows integration with your applications and services.</p> </li> </ul>"},{"location":"getting-started/introduction/#who-should-use-streambot","title":"Who Should Use StreamBot","text":"<p>StreamBot is ideal for:</p> <ul> <li>Content Creators sharing files with audiences</li> <li>Businesses distributing documents to clients</li> <li>Developers sharing builds or large code packages</li> <li>Communities managing file distribution</li> <li>Personal Users who want simple file sharing with friends and family</li> </ul>"},{"location":"getting-started/introduction/#how-it-works","title":"How It Works","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Bot\n    participant Storage\n    participant Recipient\n\n    User-&gt;&gt;Bot: Send file\n    Bot-&gt;&gt;Storage: Store file\n    Storage--&gt;&gt;Bot: File stored successfully\n    Bot-&gt;&gt;User: Return download link\n    User-&gt;&gt;Recipient: Share download link\n    Recipient-&gt;&gt;Storage: Request file via link\n    Storage--&gt;&gt;Recipient: Stream file to recipient</code></pre>"},{"location":"getting-started/introduction/#getting-started","title":"Getting Started","text":"<p>Ready to get started with StreamBot? The next sections will guide you through:</p> <ol> <li>Installation - How to set up StreamBot</li> <li>Configuration - Configuring your bot</li> <li>Quick Start - Getting up and running quickly</li> </ol>"},{"location":"getting-started/introduction/#features-at-a-glance","title":"Features at a Glance","text":"Feature Description Direct Download Links Generate shareable links for any file Multi-Client Support Distribute load across multiple Telegram clients Bandwidth Management Track and limit bandwidth usage Rate Limiting Control access frequency per user Force Subscription Require users to join channels before using the bot Admin Commands Monitor and manage the bot via Telegram REST API Integrate with your own applications Automatic Cleanup Maintain system resources efficiently"},{"location":"getting-started/introduction/#next-steps","title":"Next Steps","text":"<p>Proceed to the Installation Guide to set up your own StreamBot instance. </p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get StreamBot up and running in just a few minutes! This guide assumes you have already completed the installation.</p>"},{"location":"getting-started/quick-start/#prerequisites-check","title":"Prerequisites Check","text":"<p>Before starting, ensure you have:</p> <ul> <li> Python 3.8+ installed</li> <li> MongoDB running (local or cloud)</li> <li> StreamBot repository cloned</li> <li> Dependencies installed (<code>pip install -r requirements.txt</code>)</li> </ul>"},{"location":"getting-started/quick-start/#step-1-get-telegram-credentials","title":"Step 1: Get Telegram Credentials","text":""},{"location":"getting-started/quick-start/#create-a-telegram-bot","title":"Create a Telegram Bot","text":"<ol> <li>Open Telegram and message @BotFather</li> <li>Send <code>/newbot</code> command</li> <li>Follow the prompts to create your bot</li> <li>Save the bot token (format: <code>123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi</code>)</li> </ol>"},{"location":"getting-started/quick-start/#get-api-credentials","title":"Get API Credentials","text":"<ol> <li>Visit my.telegram.org</li> <li>Log in with your phone number</li> <li>Go to \"API Development Tools\"</li> <li>Create a new application</li> <li>Note down your <code>API ID</code> and <code>API Hash</code></li> </ol>"},{"location":"getting-started/quick-start/#create-log-channel","title":"Create Log Channel","text":"<ol> <li>Create a private Telegram channel</li> <li>Add your bot as an administrator</li> <li>Give the bot \"Post Messages\" permission</li> <li>Get the channel ID:</li> <li>Forward a message from the channel to @username_to_id_bot</li> <li>The ID will be negative (e.g., <code>-1001234567890</code>)</li> </ol>"},{"location":"getting-started/quick-start/#step-2-configure-environment","title":"Step 2: Configure Environment","text":"<p>Create your <code>.env</code> file:</p> <pre><code>cp .env.example .env\n</code></pre> <p>Edit the <code>.env</code> file with your credentials:</p> <pre><code># Replace with your actual values\nAPI_ID=12345678\nAPI_HASH=your_api_hash_here\nBOT_TOKEN=123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi\nLOG_CHANNEL=-1001234567890\n\n# Database (adjust if needed)\nDATABASE_URL=mongodb://localhost:27017\nDATABASE_NAME=StreamBotDB\n\n# Server settings\nBASE_URL=http://localhost:8080\nPORT=8080\nBIND_ADDRESS=127.0.0.1\n\n# Your Telegram user ID (get from @username_to_id_bot)\nADMINS=your_telegram_user_id\n</code></pre>"},{"location":"getting-started/quick-start/#step-3-start-streambot","title":"Step 3: Start StreamBot","text":"<pre><code># Activate virtual environment (if using one)\nsource venv/bin/activate  # Linux/macOS\n# or\nvenv\\Scripts\\activate     # Windows\n\n# Start the bot\npython -m StreamBot\n</code></pre> <p>You should see output like:</p> <pre><code>INFO - Starting Telegram Download Link Generator Bot...\nINFO - Primary bot client operational as @YourBotName\nINFO - Web server started successfully on http://127.0.0.1:8080\n</code></pre>"},{"location":"getting-started/quick-start/#step-4-test-your-bot","title":"Step 4: Test Your Bot","text":""},{"location":"getting-started/quick-start/#test-bot-commands","title":"Test Bot Commands","text":"<ol> <li>Open Telegram and find your bot</li> <li>Send <code>/start</code> command</li> <li>You should receive a welcome message</li> </ol>"},{"location":"getting-started/quick-start/#test-file-upload","title":"Test File Upload","text":"<ol> <li>Send any file to your bot (image, document, video, etc.)</li> <li>The bot should respond with a download link</li> <li>Click the link to test the download</li> </ol>"},{"location":"getting-started/quick-start/#test-api","title":"Test API","text":"<p>Open your browser and visit: <code>http://localhost:8080/api/info</code></p> <p>You should see JSON response with bot information.</p>"},{"location":"getting-started/quick-start/#step-5-verify-everything-works","title":"Step 5: Verify Everything Works","text":""},{"location":"getting-started/quick-start/#checklist","title":"\u2705 Checklist","text":"<ul> <li> Bot responds to <code>/start</code> command</li> <li> Bot generates download links for files</li> <li> Download links work in browser</li> <li> API endpoint returns bot information</li> <li> No error messages in console</li> </ul>"},{"location":"getting-started/quick-start/#common-issues","title":"Common Issues","text":"<p>Bot doesn't respond</p> <ul> <li>Check if <code>BOT_TOKEN</code> is correct</li> <li>Ensure bot is not blocked by Telegram</li> <li>Verify network connection</li> </ul> <p>Database errors</p> <ul> <li>Confirm MongoDB is running: <code>sudo systemctl status mongodb</code></li> <li>Check <code>DATABASE_URL</code> format</li> <li>Ensure database is accessible</li> </ul> <p>Download links don't work</p> <ul> <li>Verify <code>LOG_CHANNEL</code> ID is correct and negative</li> <li>Ensure bot has admin permissions in log channel</li> <li>Check if <code>BASE_URL</code> is accessible</li> </ul>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that StreamBot is running:</p>"},{"location":"getting-started/quick-start/#basic-usage","title":"Basic Usage","text":"<ol> <li>Send files to your bot to get download links</li> <li>Share links with others for easy file access</li> <li>Use admin commands like <code>/stats</code> to monitor usage</li> </ol>"},{"location":"getting-started/quick-start/#advanced-configuration","title":"Advanced Configuration","text":"<ol> <li>Enable rate limiting: Set <code>MAX_LINKS_PER_DAY=5</code> in <code>.env</code></li> <li>Add bandwidth limits: Set <code>BANDWIDTH_LIMIT_GB=100</code></li> <li>Force subscription: Set <code>FORCE_SUB_CHANNEL</code> to require users to join a channel</li> </ol>"},{"location":"getting-started/quick-start/#production-deployment","title":"Production Deployment","text":"<p>For production use:</p> <ol> <li>Get a domain name and set up HTTPS</li> <li>Use a cloud database like MongoDB Atlas</li> <li>Deploy to a VPS or cloud platform</li> <li>Set up monitoring and backup systems</li> </ol>"},{"location":"getting-started/quick-start/#useful-commands","title":"Useful Commands","text":""},{"location":"getting-started/quick-start/#bot-commands-telegram","title":"Bot Commands (Telegram)","text":"Command Description <code>/start</code> Welcome message <code>/help</code> Show help information <code>/stats</code> Show bot statistics (admin only) <code>/logs</code> View recent logs (admin only)"},{"location":"getting-started/quick-start/#admin-commands-telegram","title":"Admin Commands (Telegram)","text":"Command Description Usage <code>/stats</code> Check system statistics <code>/stats</code> <code>/logs</code> View logs with filtering <code>/logs level=ERROR limit=50</code> <code>/broadcast</code> Send message to all users Reply to message with <code>/broadcast</code>"},{"location":"getting-started/quick-start/#api-endpoints","title":"API Endpoints","text":"Endpoint Description <code>GET /api/info</code> Bot status and information <code>GET /dl/{file_id}</code> Download file via link"},{"location":"getting-started/quick-start/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check logs for error messages</li> <li>Review configuration in your <code>.env</code> file</li> <li>Consult documentation:</li> <li>Configuration Guide</li> <li>User Guide</li> <li>Troubleshooting</li> <li>Get community support:</li> <li>GitHub Discussions</li> <li>GitHub Issues</li> </ol>"},{"location":"getting-started/quick-start/#whats-next","title":"What's Next?","text":"<ul> <li>User Guide - Learn about all features</li> <li>Deployment Guide - Deploy to production</li> <li>API Reference - Integrate with your applications</li> <li>Developer Guide - Understand the architecture</li> </ul> <p>Congratulations! StreamBot is now running successfully. \ud83c\udf89 </p>"},{"location":"user-guide/bot-commands/","title":"Bot Commands Reference","text":"<p>StreamBot provides various commands for users and administrators. This page documents all available commands and their usage.</p>"},{"location":"user-guide/bot-commands/#user-commands","title":"User Commands","text":"<p>These commands are available to all users of the bot.</p>"},{"location":"user-guide/bot-commands/#basic-commands","title":"Basic Commands","text":""},{"location":"user-guide/bot-commands/#start","title":"<code>/start</code>","text":"<p>Description: Initialize interaction with the bot and display welcome message.</p> <p>Usage: <code>/start</code></p> <p>Response: Welcome message with bot information and basic instructions.</p> <p>Example: <pre><code>\ud83d\ude80 Welcome to StreamBot!\n\nI can convert your files into direct download links.\nSimply send me any file and I'll generate a shareable link for you.\n\nCommands:\n\u2022 /help - Show available commands\n\u2022 /info - Bot statistics and status\n</code></pre></p>"},{"location":"user-guide/bot-commands/#help","title":"<code>/help</code>","text":"<p>Description: Display list of available commands and their descriptions.</p> <p>Usage: <code>/help</code></p> <p>Response: Comprehensive command list with descriptions.</p>"},{"location":"user-guide/bot-commands/#info","title":"<code>/info</code>","text":"<p>Description: Show bot statistics, uptime, and current status.</p> <p>Usage: <code>/info</code></p> <p>Response:  - Bot uptime - Total users - Current bandwidth usage - Available features - Server status</p> <p>Example: <pre><code>\ud83d\udcca StreamBot Information\n\n\ud83e\udd16 Bot: @YourStreamBot\n\u23f0 Uptime: 5d 12h 34m 16s\n\ud83d\udc65 Total Users: 1,247\n\ud83d\udcc8 Bandwidth Used: 45.2 GB / 100 GB this month\n\ud83d\udd17 Links Generated Today: 127\n\nFeatures:\n\u2705 Force Subscription: Enabled\n\u2705 Link Expiry: 24 hours\n\u2705 Rate Limiting: 5 links/day\n</code></pre></p>"},{"location":"user-guide/bot-commands/#file-upload","title":"File Upload","text":""},{"location":"user-guide/bot-commands/#send-any-file","title":"Send Any File","text":"<p>Description: Upload a file to generate a direct download link.</p> <p>Usage: Simply send any file (document, image, video, audio, etc.)</p> <p>Supported Types: - Documents (PDF, DOCX, TXT, etc.) - Images (JPG, PNG, GIF, etc.) - Videos (MP4, AVI, MKV, etc.) - Audio (MP3, FLAC, OGG, etc.) - Archives (ZIP, RAR, 7Z, etc.) - Any other file type</p> <p>Response: Direct download link with file information.</p> <p>Example: <pre><code>\u2705 File uploaded successfully!\n\n\ud83d\udcc1 Filename: document.pdf\n\ud83d\udccf Size: 2.4 MB\n\ud83d\udd17 Download Link: https://yourdomain.com/dl/abc123/document.pdf\n\n\u23f0 Link expires in 24 hours\n\ud83d\udcca Daily links remaining: 4/5\n</code></pre></p>"},{"location":"user-guide/bot-commands/#utility-commands","title":"Utility Commands","text":""},{"location":"user-guide/bot-commands/#ping","title":"<code>/ping</code>","text":"<p>Description: Check bot responsiveness and connection status.</p> <p>Usage: <code>/ping</code></p> <p>Response: Simple response time indication.</p> <p>Example: <pre><code>\ud83c\udfd3 Pong! \nResponse time: 0.12s\n</code></pre></p>"},{"location":"user-guide/bot-commands/#admin-commands","title":"Admin Commands","text":"<p>These commands are only available to users configured as administrators in the <code>ADMINS</code> environment variable.</p>"},{"location":"user-guide/bot-commands/#system-monitoring","title":"System Monitoring","text":""},{"location":"user-guide/bot-commands/#stats","title":"<code>/stats</code>","text":"<p>Description: View comprehensive system statistics including memory usage, performance metrics, bandwidth tracking, and integrated security monitoring.</p> <p>Usage: <code>/stats</code></p> <p>Access: Admin only</p> <p>Response: Detailed system information including: - Memory Usage: RSS/VMS memory, percentage usage - Active Resources: Stream count, Telegram clients - Bandwidth Tracking: Monthly usage and limits - Security Status: Real-time security framework monitoring - Performance Metrics: Uptime, logger cache, timestamps</p> <p>Example: <pre><code>\ud83d\udcca System Statistics\n\n\ud83e\udde0 Memory Usage:\n\u2022 RSS Memory: 156.3 MB\n\u2022 VMS Memory: 203.7 MB  \n\u2022 Memory %: 8.2%\n\n\ud83c\udf10 Active Resources:\n\u2022 Active Streams: 23\n\u2022 Telegram Clients: 3\n\n\ud83d\udcca Bandwidth Usage:\n\u2022 Used this month: 45.234 GB\n\u2022 Limit: 100 GB (enabled)\n\u2022 Month: 2024-01\n\n\ud83d\udee1\ufe0f Security Status:\n\u2022 Authentication: Admin verification \u2705\n\u2022 Rate Limiting: Enabled \u2705\n\u2022 DDoS Protection: Active \u2705\n\u2022 Input Validation: Active \u2705\n\u2022 Security Headers: Enabled \u2705\n\u2022 HTTPS Enforcement: Active \u2705\n\u2022 File Access: Secure \u2705\n\n\ud83d\udcdd Logger Cache: 45/1000 entries\n\u23f0 Uptime: 2d 14h 23m 45s\n\ud83d\udd50 Timestamp: 2024-01-15T14:30:45.123456\n\n\ud83d\udca1 Memory cleanup runs automatically every hour\n</code></pre></p>"},{"location":"user-guide/bot-commands/#logs","title":"<code>/logs</code>","text":"<p>Description: Advanced log management with filtering, search, and direct file transmission capabilities.</p> <p>Usage:  - <code>/logs</code> - Upload complete log file as document - <code>/logs level=ERROR</code> - Filter by log level - <code>/logs limit=50</code> - Limit number of entries - <code>/logs filter=download</code> - Search for specific text - <code>/logs level=WARNING filter=rate page=1</code> - Combined filtering</p> <p>Access: Admin only</p> <p>Parameters: - <code>level</code>: Filter by log level (ALL, DEBUG, INFO, WARNING, ERROR, CRITICAL) - <code>limit</code>: Number of log entries to display (max 1000) - <code>filter</code>: Text to search for in log entries - <code>page</code>: Page number for pagination</p> <p>Features: - Automatic Sanitization: Removes sensitive data (IPs, tokens, file paths) - Multiple Formats: Direct chat display or file upload - Real-time Access: Live log streaming with filtering - Security-First: All sensitive information automatically masked</p> <p>Examples: <pre><code># Get complete log file\n/logs\n\n# Show last 100 error messages\n/logs level=ERROR limit=100\n\n# Search for download-related entries\n/logs filter=download limit=20\n\n# Find rate limiting warnings\n/logs level=WARNING filter=rate\n\n# Combined filtering with pagination\n/logs level=INFO filter=user page=2 limit=50\n</code></pre></p> <p>Response Formats:</p> <p>With Parameters (Chat Display): <pre><code>\ud83d\udccb Filtered Logs (ERROR level, 10 entries)\n\n2024-01-15 14:30:45 - ERROR - Download failed for file xxx\n2024-01-15 14:25:12 - ERROR - Rate limit exceeded for user xxx\n...\n\n\ud83d\udcca Filter: level=ERROR, limit=10\n\u23f0 Generated: 2024-01-15 14:30:45\n</code></pre></p> <p>Without Parameters (File Upload): <pre><code>\ud83d\udccb Complete Log File\n\n\ud83d\udcc1 Filename: streambot_logs_20240115.txt\n\ud83d\udccf Size: 2.4 MB\n\u23f0 Generated: 2024-01-15 14:30:45\n\nNote: All sensitive data has been sanitized\n</code></pre></p>"},{"location":"user-guide/bot-commands/#user-management","title":"User Management","text":""},{"location":"user-guide/bot-commands/#broadcast","title":"<code>/broadcast</code>","text":"<p>Description: Send messages to all users who have interacted with the bot.</p> <p>Usage: Reply to any message with <code>/broadcast</code></p> <p>Access: Admin only</p> <p>Process: 1. Reply to the message you want to broadcast with <code>/broadcast</code> 2. Bot confirms the broadcast and shows user count 3. Message is sent to all registered users 4. Completion status is reported</p> <p>Example: <pre><code>\ud83d\udce2 Broadcast initiated\n\n\ud83d\udc65 Target users: 1,247\n\ud83d\udcdd Message: \"System maintenance scheduled for tonight...\"\n\n\u2705 Broadcast completed\n\ud83d\udcca Delivered: 1,245/1,247 users\n\u26a0\ufe0f Failed: 2 users (blocked bot)\n\u23f0 Duration: 45.2 seconds\n</code></pre></p>"},{"location":"user-guide/bot-commands/#security-maintenance","title":"Security &amp; Maintenance","text":""},{"location":"user-guide/bot-commands/#revoke-if-using-api-features","title":"<code>/revoke</code> (If using API features)","text":"<p>Description: Revoke access tokens for security purposes.</p> <p>Usage: <code>/revoke</code></p> <p>Access: Admin only</p> <p>Response: Confirmation of token revocation.</p>"},{"location":"user-guide/bot-commands/#command-security","title":"Command Security","text":""},{"location":"user-guide/bot-commands/#access-control","title":"Access Control","text":"<ul> <li>User Commands: Available to all users</li> <li>Admin Commands: Restricted to configured admin user IDs</li> <li>Rate Limiting: Commands are subject to global rate limits</li> <li>Input Validation: All command inputs are validated and sanitized</li> </ul>"},{"location":"user-guide/bot-commands/#security-features","title":"Security Features","text":"<ul> <li>Admin Verification: Commands verify admin status via Telegram user ID</li> <li>Data Sanitization: Sensitive information automatically removed from logs</li> <li>Error Handling: Generic error messages prevent information disclosure</li> <li>Audit Logging: All admin command usage is logged for security</li> </ul>"},{"location":"user-guide/bot-commands/#rate-limits","title":"Rate Limits","text":"Command Type Limit Window User Commands 30/minute Per user Admin Commands 100/minute Per admin File Uploads 5/day Per user (configurable) Broadcast 1/hour Global"},{"location":"user-guide/bot-commands/#error-handling","title":"Error Handling","text":"<p>Commands include comprehensive error handling:</p> <ul> <li>Invalid Parameters: Clear error messages with usage examples</li> <li>Permission Denied: Generic security messages</li> <li>Rate Limiting: Time-remaining information</li> <li>System Errors: Sanitized error responses</li> </ul>"},{"location":"user-guide/bot-commands/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/bot-commands/#for-users","title":"For Users","text":"<ul> <li>Use descriptive filenames for better organization</li> <li>Check file sizes before uploading</li> <li>Monitor your usage to avoid hitting limits</li> <li>Keep download links secure if sensitive</li> </ul>"},{"location":"user-guide/bot-commands/#for-admins","title":"For Admins","text":"<ul> <li>Monitor system resources regularly with <code>/stats</code></li> <li>Check logs periodically for errors with <code>/logs</code></li> <li>Use broadcasting responsibly for important announcements only</li> <li>Review global stats to understand usage patterns</li> </ul>"},{"location":"user-guide/bot-commands/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/bot-commands/#command-not-working","title":"Command Not Working","text":"<ol> <li>Check spelling - Commands are case-sensitive</li> <li>Verify permissions - Some commands require admin access</li> <li>Try <code>/ping</code> to test bot connectivity</li> <li>Check bot status with <code>/info</code></li> </ol>"},{"location":"user-guide/bot-commands/#no-response-from-bot","title":"No Response from Bot","text":"<ol> <li>Check bot status by visiting the API endpoint</li> <li>Wait a moment - Bot might be under high load</li> <li>Try again in a few minutes</li> <li>Contact administrators if persistent</li> </ol> <p>For more help, see the User Guide or Troubleshooting section. </p>"},{"location":"user-guide/overview/","title":"User Guide Overview","text":"<p>StreamBot is designed to be simple yet powerful. This guide covers all features and how to use them effectively.</p>"},{"location":"user-guide/overview/#core-functionality","title":"Core Functionality","text":""},{"location":"user-guide/overview/#file-to-link-conversion","title":"File to Link Conversion","text":"<p>StreamBot's primary function is converting files sent via Telegram into direct download links that can be shared with anyone.</p> <pre><code>graph LR\n    A[User sends file] --&gt; B[Bot processes file]\n    B --&gt; C[File stored securely]\n    C --&gt; D[Download link generated]\n    D --&gt; E[Link shared with user]</code></pre>"},{"location":"user-guide/overview/#supported-file-types","title":"Supported File Types","text":"<p>StreamBot supports all file types that Telegram accepts:</p> <ul> <li>Documents: PDF, DOCX, TXT, ZIP, etc.</li> <li>Images: JPG, PNG, GIF, WebP, etc.</li> <li>Videos: MP4, AVI, MKV, etc.</li> <li>Audio: MP3, FLAC, OGG, etc.</li> <li>Archives: ZIP, RAR, 7Z, etc.</li> <li>Any other file type up to Telegram's size limits</li> </ul>"},{"location":"user-guide/overview/#basic-usage","title":"Basic Usage","text":""},{"location":"user-guide/overview/#getting-started","title":"Getting Started","text":"<ol> <li>Find your bot on Telegram (search for your bot's username)</li> <li>Send <code>/start</code> to begin using the bot</li> <li>Send any file to generate a download link</li> <li>Share the link with anyone who needs access</li> </ol>"},{"location":"user-guide/overview/#file-upload-process","title":"File Upload Process","text":"<ol> <li>Send a file to the bot via Telegram</li> <li>Wait for processing (usually instant for small files)</li> <li>Receive download link in the chat</li> <li>Copy and share the link as needed</li> </ol>"},{"location":"user-guide/overview/#download-links","title":"Download Links","text":"<p>Generated links have the format: <pre><code>https://yourdomain.com/dl/encoded_file_id/filename.ext\n</code></pre></p> <ul> <li>Links are permanent (unless expiration is enabled)</li> <li>No Telegram account required to download</li> <li>Direct downloads start immediately</li> <li>Range requests supported for partial downloads</li> </ul>"},{"location":"user-guide/overview/#user-commands","title":"User Commands","text":""},{"location":"user-guide/overview/#basic-commands","title":"Basic Commands","text":"Command Description Example <code>/start</code> Welcome message and bot info <code>/start</code> <code>/help</code> Show available commands <code>/help</code> <code>/info</code> Bot statistics and status <code>/info</code>"},{"location":"user-guide/overview/#information-commands","title":"Information Commands","text":"Command Description Access <code>/stats</code> Personal usage statistics All users <code>/ping</code> Check bot responsiveness All users"},{"location":"user-guide/overview/#features-in-detail","title":"Features in Detail","text":""},{"location":"user-guide/overview/#rate-limiting","title":"Rate Limiting","text":"<p>StreamBot implements rate limiting to prevent abuse:</p> <ul> <li>Daily limits on link generation (configurable)</li> <li>Per-user tracking of usage</li> <li>Automatic reset at midnight UTC</li> <li>Graceful handling when limits are reached</li> </ul> <p>Rate Limit Reached</p> <p>When you reach your daily limit, the bot will inform you how long until reset.</p>"},{"location":"user-guide/overview/#bandwidth-management","title":"Bandwidth Management","text":"<p>Monitor and control data usage:</p> <ul> <li>Monthly bandwidth tracking with automatic reset</li> <li>Global bandwidth limits (configurable)</li> <li>Real-time usage statistics via <code>/stats</code> command</li> <li>Automatic cleanup of old usage data (keeps 3 months)</li> <li>Protected current month data - cleanup never affects current month</li> <li>Efficient stream tracking with automatic cleanup of stale connections</li> </ul>"},{"location":"user-guide/overview/#system-management","title":"System Management","text":"<p>Automated cleanup and monitoring:</p> <ul> <li>Stream cleanup runs every 10 minutes to remove stale connections</li> <li>Memory cleanup runs hourly to optimize resource usage  </li> <li>Bandwidth cleanup runs daily to remove old records</li> <li>Maximum stream age of 4 hours for large file downloads</li> <li>Accurate stream counting prevents resource leaks</li> </ul>"},{"location":"user-guide/overview/#force-subscription","title":"Force Subscription","text":"<p>If enabled, users must join specified channels before using the bot:</p> <ul> <li>Channel verification before each use</li> <li>Automatic checking of membership status</li> <li>Graceful prompts to join required channels</li> <li>Multiple channels can be required</li> </ul>"},{"location":"user-guide/overview/#link-expiration","title":"Link Expiration","text":"<p>Optional link expiration for enhanced security:</p> <ul> <li>Configurable expiration time (default: 24 hours)</li> <li>Automatic cleanup of expired links</li> <li>Clear expiration notices in generated links</li> <li>Can be disabled for permanent links</li> </ul>"},{"location":"user-guide/overview/#admin-features","title":"Admin Features","text":""},{"location":"user-guide/overview/#admin-commands","title":"Admin Commands","text":"Command Description Usage <code>/stats</code> System statistics with memory, streams, and bandwidth <code>/stats</code> <code>/logs</code> View application logs <code>/logs level=ERROR limit=50</code> <code>/broadcast</code> Send message to all users Reply to message with <code>/broadcast</code>"},{"location":"user-guide/overview/#log-access","title":"Log Access","text":"<p>Admins can access detailed logs:</p> <pre><code>/logs level=INFO limit=100\n/logs level=ERROR limit=50\n/logs filter=download\n</code></pre> <p>Log Levels: <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>CRITICAL</code></p>"},{"location":"user-guide/overview/#broadcasting","title":"Broadcasting","text":"<p>Send announcements to all bot users:</p> <ol> <li>Compose your message in Telegram</li> <li>Reply to it with <code>/broadcast</code></li> <li>Confirm when prompted</li> <li>Message sent to all users</li> </ol>"},{"location":"user-guide/overview/#memory-monitoring","title":"Memory Monitoring","text":"<p>Track system resource usage:</p> <ul> <li>Current memory usage</li> <li>Peak memory usage</li> <li>Active connections</li> <li>Garbage collection stats</li> </ul>"},{"location":"user-guide/overview/#api-access","title":"API Access","text":""},{"location":"user-guide/overview/#public-endpoints","title":"Public Endpoints","text":"<p>Anyone can access these endpoints:</p> Endpoint Description <code>GET /api/info</code> Bot status and public information <code>GET /dl/{file_id}</code> Download files via generated links"},{"location":"user-guide/overview/#admin-endpoints","title":"Admin Endpoints","text":"<p>Require authentication:</p> Endpoint Description Authentication"},{"location":"user-guide/overview/#example-api-usage","title":"Example API Usage","text":"<pre><code># Get bot information\ncurl https://yourdomain.com/api/info\n\n# Download a file\ncurl -O https://yourdomain.com/dl/encoded_file_id/filename.pdf\n</code></pre>"},{"location":"user-guide/overview/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/overview/#common-issues","title":"Common Issues","text":"<p>Bot doesn't respond to commands</p> <p>Possible causes: - Bot is offline or restarting - You're not in a private chat with the bot - Bot is experiencing high load</p> <p>Solutions: - Wait a few minutes and try again - Check bot status at <code>/api/info</code> - Contact administrator</p> <p>File upload fails</p> <p>Possible causes: - File too large (&gt;2GB for Telegram) - Rate limit reached - Bandwidth limit exceeded - Bot storage issues</p> <p>Solutions: - Check file size limits - Wait for rate limit reset - Try again later - Contact administrator if persistent</p> <p>Download links don't work</p> <p>Possible causes: - Link has expired - Server is down - Network connectivity issues - File was removed</p> <p>Solutions: - Generate a new link - Check server status - Try from different network - Contact administrator</p> <p>Can't access admin features</p> <p>Possible causes: - Not configured as admin - IP address not whitelisted - Invalid access token</p> <p>Solutions: - Check admin configuration - Verify IP whitelist - Update access tokens</p>"},{"location":"user-guide/overview/#error-messages","title":"Error Messages","text":"Error Meaning Solution \"Rate limit exceeded\" Too many requests Wait for reset time \"File too large\" Exceeds size limits Use smaller file \"Bandwidth exceeded\" Monthly limit reached Wait for monthly reset \"Join required channels\" Subscription required Join specified channels \"Link expired\" Download link invalid Generate new link"},{"location":"user-guide/overview/#getting-support","title":"Getting Support","text":"<p>If you need help:</p> <ol> <li>Check this documentation for common solutions</li> <li>Review error messages carefully</li> <li>Test with different files to isolate issues</li> <li>Contact administrators via configured support channels</li> <li>Report bugs on GitHub Issues (if applicable)</li> </ol>"},{"location":"user-guide/overview/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/overview/#for-users","title":"For Users","text":"<ul> <li>Use descriptive filenames for better organization</li> <li>Check file sizes before uploading large files</li> <li>Share links responsibly and only with intended recipients</li> <li>Monitor your usage to avoid hitting limits</li> <li>Keep download links secure if they contain sensitive content</li> </ul>"},{"location":"user-guide/overview/#for-administrators","title":"For Administrators","text":"<ul> <li>Set appropriate limits based on your server capacity</li> <li>Monitor system resources regularly</li> <li>Keep software updated for security and features</li> <li>Backup configuration and database regularly</li> <li>Review logs for unusual activity</li> </ul>"},{"location":"user-guide/overview/#advanced-usage","title":"Advanced Usage","text":""},{"location":"user-guide/overview/#multiple-file-sharing","title":"Multiple File Sharing","text":"<p>For sharing multiple files:</p> <ol> <li>Create an archive (ZIP, RAR, etc.) containing all files</li> <li>Upload the archive to get a single download link</li> <li>Share the archive link instead of multiple individual links</li> </ol>"},{"location":"user-guide/overview/#integration-with-applications","title":"Integration with Applications","text":"<p>Use the API to integrate StreamBot with your applications:</p> <ul> <li>Automated file sharing for your services</li> <li>Programmatic link generation via API calls</li> <li>Status monitoring for system health</li> <li>Log analysis for usage patterns</li> </ul> <p>This completes the user guide overview. For specific features, see the dedicated sections in this guide. </p>"}]}