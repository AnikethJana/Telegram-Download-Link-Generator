{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"StreamBot - Telegram File Download &amp; Streaming Link Generator","text":"<ul> <li> <p> Telegram File to Link Generator</p> <p>Instantly convert Telegram files to direct download links and streaming URLs with StreamBot.</p> <p> Get started</p> </li> <li> <p> High Performance Architecture</p> <p>Built with a multi-client architecture for maximum speed and reliability with video streaming support.</p> <p> Architecture</p> </li> <li> <p> Video Streaming</p> <p>Advanced video streaming with seeking support and custom frontend integration.</p> <p> Features</p> </li> <li> <p> REST API</p> <p>Integrate StreamBot's capabilities with your applications.</p> <p> API Reference</p> </li> </ul>"},{"location":"#what-is-streambot","title":"What is StreamBot?","text":"<p>StreamBot is a high-performance Telegram bot that generates direct download links and streaming URLs for files sent to it. It's built with a modern asynchronous Python architecture featuring multi-client support, bandwidth management, video streaming with seeking support, and rate limiting.</p> <p>Whether you're sharing media, documents, or any other files, StreamBot makes it simple to distribute content via direct links without requiring recipients to use Telegram. The bot now includes advanced video streaming capabilities with custom frontend integration.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udd17 Direct Download Links - Convert Telegram files to direct download URLs</li> <li>\ud83c\udfac Video Streaming - Advanced video streaming with seeking support and custom player integration</li> <li>\u26a1 High Performance - Multi-client architecture with load balancing</li> <li>\ud83d\udcca Bandwidth Management - Built-in bandwidth tracking and limits</li> <li>\ud83d\udee1\ufe0f Rate Limiting - User-based rate limiting with configurable quotas</li> <li>\ud83d\udd12 Force Subscription - Optional channel subscription requirement</li> <li>\ud83d\udcf1 Web Interface - RESTful API with real-time status monitoring</li> <li>\ud83e\uddf9 Auto Cleanup - Automatic cleanup of expired links and resources</li> <li>\ud83d\udcc8 Admin Tools - Advanced logging, memory monitoring, and broadcast features</li> <li>\ud83c\udfaf Frontend Integration - Custom video player frontend support with default Cricster integration</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Getting started with StreamBot is easy:</p> <pre><code># Clone the repository\ngit clone https://github.com/AnikethJana/Telegram-Download-Link-Generator.git\ncd Telegram-Download-Link-Generator\n\n# Install dependencies\npip install -r requirements.txt\n\n# Configure environment\ncp .env.example .env\n# Edit .env with your configuration\n\n# Run the bot\npython -m StreamBot\n</code></pre> <p>For complete setup instructions, see the Installation Guide.</p>"},{"location":"#how-it-works","title":"How It Works","text":"<ol> <li>User sends a file to the StreamBot Telegram bot</li> <li>Bot processes the file and stores it securely in Telegram's cloud</li> <li>Direct download and streaming links are generated and sent to the user</li> <li>Recipients can download or stream the file directly via the link without needing Telegram</li> <li>For videos, users get both download and streaming options with seeking support</li> </ol>"},{"location":"#video-streaming-features","title":"Video Streaming Features","text":"<p>StreamBot now includes advanced video streaming capabilities:</p> <ul> <li>Direct Video Streaming - Stream videos directly in browsers with seeking support</li> <li>Custom Frontend Integration - Integrates with video player frontends (defaults to Cricster)</li> <li>Range Request Support - Full HTTP range request support for video seeking</li> <li>Multiple Video Formats - Supports MP4, WebM, MKV, AVI, and more</li> <li>Seamless Experience - One-click video playback with enhanced UI</li> </ul>"},{"location":"#project-status","title":"Project Status","text":"<p>StreamBot is actively maintained and regularly updated with new features and improvements.</p> <p> </p>"},{"location":"#support-community","title":"Support &amp; Community","text":"<ul> <li>GitHub Issues: Report bugs or request features</li> <li>GitHub Discussions: Ask questions and share ideas</li> <li>Telegram Support: Contact developer </li> </ul>"},{"location":"about/acknowledgements/","title":"Acknowledgements","text":"<p>StreamBot is built on the shoulders of many amazing open source projects and contributors. We'd like to acknowledge everyone who has made this project possible.</p>"},{"location":"about/acknowledgements/#core-dependencies","title":"Core Dependencies","text":"<p>We're grateful to the maintainers of these essential libraries:</p>"},{"location":"about/acknowledgements/#telegram-integration","title":"Telegram Integration","text":"<ul> <li>Pyrogram - Modern, elegant and powerful Telegram MTProto API framework</li> <li>TgCrypto - Fast and secure cryptographic library for Pyrogram</li> </ul>"},{"location":"about/acknowledgements/#web-framework","title":"Web Framework","text":"<ul> <li>aiohttp - Async HTTP client/server framework for asyncio and Python</li> <li>aiohttp-cors - CORS support for aiohttp</li> </ul>"},{"location":"about/acknowledgements/#database","title":"Database","text":"<ul> <li>PyMongo - The official MongoDB driver for Python</li> <li>MongoDB - The database platform for modern applications</li> </ul>"},{"location":"about/acknowledgements/#utilities","title":"Utilities","text":"<ul> <li>python-dotenv - Environment variable management</li> <li>psutil - System and process monitoring utilities</li> </ul>"},{"location":"about/acknowledgements/#documentation","title":"Documentation","text":"<p>Our documentation is powered by:</p> <ul> <li>MkDocs - Static site generator for project documentation</li> <li>Material for MkDocs - Beautiful, modern documentation theme</li> <li>Mermaid - Diagram and flowchart generation</li> </ul>"},{"location":"about/acknowledgements/#development-tools","title":"Development Tools","text":"<ul> <li>Python - The programming language that powers StreamBot</li> <li>Docker - Containerization platform</li> <li>GitHub - Version control and project hosting</li> <li>GitHub Actions - CI/CD automation</li> </ul>"},{"location":"about/acknowledgements/#contributors","title":"Contributors","text":"<p>Thank you to everyone who has contributed to StreamBot:</p>"},{"location":"about/acknowledgements/#code-contributors","title":"Code Contributors","text":"<ul> <li>Core Team - Initial development and architecture</li> <li>Community Contributors - Bug fixes, features, and improvements</li> </ul>"},{"location":"about/acknowledgements/#documentation-contributors","title":"Documentation Contributors","text":"<ul> <li>Writers - Documentation improvements and clarifications</li> <li>Translators - Multi-language support (future)</li> <li>Reviewers - Quality assurance and feedback</li> </ul>"},{"location":"about/acknowledgements/#community-support","title":"Community Support","text":"<ul> <li>Issue Reporters - Bug reports and feature requests</li> <li>Testers - Quality assurance and feedback</li> <li>Users - Adoption and real-world testing</li> </ul>"},{"location":"about/acknowledgements/#special-thanks","title":"Special Thanks","text":""},{"location":"about/acknowledgements/#inspiration","title":"Inspiration","text":"<p>StreamBot was inspired by the need for simple, reliable file sharing solutions and the amazing capabilities of the Telegram Bot API.</p>"},{"location":"about/acknowledgements/#open-source-community","title":"Open Source Community","text":"<p>We're grateful to the broader open source community for creating the ecosystem that makes projects like StreamBot possible.</p>"},{"location":"about/acknowledgements/#users-and-adopters","title":"Users and Adopters","text":"<p>Thank you to everyone who uses StreamBot, reports issues, and helps make it better through feedback and contributions.</p>"},{"location":"about/acknowledgements/#recognition","title":"Recognition","text":""},{"location":"about/acknowledgements/#hall-of-fame","title":"Hall of Fame","text":"<p>This section will highlight significant contributors as the project grows.</p>"},{"location":"about/acknowledgements/#contributors_1","title":"Contributors","text":"<p>All contributors are automatically recognized in our GitHub Contributors page.</p>"},{"location":"about/acknowledgements/#how-to-contribute","title":"How to Contribute","text":"<p>Interested in being acknowledged here? Check out our Contributing Guide to get started!</p>"},{"location":"about/acknowledgements/#ways-to-contribute","title":"Ways to Contribute","text":"<ul> <li>Code contributions - Bug fixes and new features</li> <li>Documentation - Improvements and translations</li> <li>Community support - Helping users and answering questions</li> <li>Testing - Quality assurance and bug reporting</li> <li>Feedback - Feature suggestions and usability improvements</li> </ul>"},{"location":"about/acknowledgements/#licensing","title":"Licensing","text":"<p>All contributions to StreamBot are made under the MIT License, ensuring the project remains free and open source.</p> <p>If you feel your contribution should be specifically acknowledged here, please don't hesitate to open an issue or submit a pull request. </p>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to StreamBot are documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"about/changelog/#210-2024-01-15","title":"[2.1.0] - 2024-01-15","text":""},{"location":"about/changelog/#added-video-streaming-release","title":"Added - Video Streaming Release \ud83c\udfac","text":"<ul> <li>Advanced Video Streaming Support: Complete video streaming infrastructure with range request support</li> <li>Cricster Frontend Integration: Default video player frontend (https://cricster.pages.dev)</li> <li>Range Request Support: Full HTTP range request implementation for video seeking</li> <li>Progressive Video Loading: Stream videos while downloading for optimal user experience</li> <li>Multiple Video Format Support: MP4, MKV, AVI, WebM, MOV with automatic detection</li> <li>Custom Video Frontend Support: Build and integrate your own video player frontends</li> <li>Video-Specific Bot Responses: Enhanced file upload responses for video files with streaming options</li> <li>Streaming Analytics: Track video streaming usage and performance</li> <li>Video Frontend Configuration: Environment variable <code>VIDEO_FRONTEND_URL</code> with smart defaults</li> </ul>"},{"location":"about/changelog/#enhanced","title":"Enhanced","text":"<ul> <li>Python Version Requirement: Now requires Python 3.11+ for optimal performance</li> <li>Video Frontend URL Parameter: <code>{VIDEO_FRONTEND_URL}?stream={encoded_stream_url}</code> format</li> <li>Bot Commands: Updated <code>/info</code> and <code>/stats</code> commands to include video streaming information</li> <li>API Endpoints: Enhanced <code>/api/info</code> with streaming service status and capabilities</li> <li>Memory Management: Improved memory handling for video streaming operations</li> <li>Stream Cleanup: Automated cleanup of stale video streams every 10 minutes</li> <li>Bandwidth Tracking: Separate tracking for download and streaming bandwidth usage</li> </ul>"},{"location":"about/changelog/#changed","title":"Changed","text":"<ul> <li>Default VIDEO_FRONTEND_URL: Now defaults to <code>https://cricster.pages.dev</code> instead of <code>None</code></li> <li>Disable Video Frontend: Set <code>VIDEO_FRONTEND_URL=false</code> to disable (case-insensitive)</li> <li>Enhanced File Processing: Video files now get both download and streaming links</li> <li>Improved User Experience: Video files show \"\ud83c\udfac Play Video\" button for direct streaming</li> <li>Documentation: Comprehensive update of all documentation including video streaming guides</li> </ul>"},{"location":"about/changelog/#technical-improvements","title":"Technical Improvements","text":"<ul> <li>Streaming Handler: New dedicated streaming service in <code>StreamBot/web/streaming.py</code></li> <li>Video Detection: Automatic video file detection and processing</li> <li>CORS Configuration: Enhanced CORS support for video streaming frontends</li> <li>Range Request Validation: Proper validation and error handling for range requests</li> <li>Stream Session Management: Track and manage active video streaming sessions</li> <li>Performance Optimization: Optimized video streaming performance and resource usage</li> </ul>"},{"location":"about/changelog/#security","title":"Security","text":"<ul> <li>Video Streaming Security: Secure encoding for streaming URLs</li> <li>Range Request Protection: Prevent abuse of range requests</li> <li>CORS Restrictions: Controlled cross-origin access for video frontends</li> <li>Stream Rate Limiting: Per-user video streaming quotas and limits</li> </ul>"},{"location":"about/changelog/#205-2024-01-10","title":"[2.0.5] - 2024-01-10","text":""},{"location":"about/changelog/#fixed","title":"Fixed","text":"<ul> <li>Database Connection: Improved MongoDB connection stability and error handling</li> <li>Memory Leaks: Fixed memory leaks in long-running bot sessions</li> <li>Rate Limiting: More accurate rate limiting calculations</li> <li>Bandwidth Cleanup: Fixed bandwidth data cleanup to preserve current month data</li> <li>Error Handling: Better error messages and graceful failure handling</li> </ul>"},{"location":"about/changelog/#enhanced_1","title":"Enhanced","text":"<ul> <li>Logging System: Improved structured logging with better error tracking</li> <li>Performance Monitoring: Enhanced system monitoring and health checks</li> <li>Resource Management: Better memory and connection pool management</li> <li>Admin Commands: Improved admin command responses and error handling</li> </ul>"},{"location":"about/changelog/#200-2024-01-01","title":"[2.0.0] - 2024-01-01","text":""},{"location":"about/changelog/#added-major-release","title":"Added - Major Release","text":"<ul> <li>Multi-Client Architecture: Support for multiple Telegram client sessions</li> <li>Advanced Bandwidth Management: Monthly bandwidth tracking with automatic cleanup</li> <li>Enhanced Security: Comprehensive security middleware and rate limiting</li> <li>Admin Dashboard: Advanced admin commands for system monitoring</li> <li>Health Checks: Comprehensive health check endpoints</li> <li>Database Optimization: Improved MongoDB operations and indexing</li> <li>Memory Management: Advanced memory monitoring and cleanup systems</li> <li>Stream Cleanup Scheduler: Automated cleanup of old and stale streams</li> </ul>"},{"location":"about/changelog/#technical-improvements_1","title":"Technical Improvements","text":"<ul> <li>Async Architecture: Fully asynchronous design for better performance</li> <li>Connection Pooling: Optimized connection pooling for database and Telegram</li> <li>Error Recovery: Improved error recovery and graceful degradation</li> <li>Resource Monitoring: Real-time monitoring of system resources</li> <li>Scalability: Enhanced architecture for horizontal scaling</li> </ul>"},{"location":"about/changelog/#150-2023-12-15","title":"[1.5.0] - 2023-12-15","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>Force Subscription: Optional channel subscription requirement</li> <li>Link Expiry: Configurable link expiration functionality</li> <li>Bandwidth Limits: Monthly bandwidth usage limits</li> <li>User Statistics: Personal usage tracking and statistics</li> <li>Admin Commands: System administration and monitoring commands</li> </ul>"},{"location":"about/changelog/#enhanced_2","title":"Enhanced","text":"<ul> <li>File Processing: Improved file upload and processing speed</li> <li>Database Performance: Optimized database queries and operations</li> <li>Error Messages: More descriptive and helpful error messages</li> <li>User Interface: Enhanced bot interaction and user experience</li> </ul>"},{"location":"about/changelog/#140-2023-12-01","title":"[1.4.0] - 2023-12-01","text":""},{"location":"about/changelog/#added_1","title":"Added","text":"<ul> <li>MongoDB Integration: Complete database integration for user and file management</li> <li>Rate Limiting: Daily rate limits for users</li> <li>User Management: User registration and activity tracking</li> <li>System Statistics: Bot usage and performance statistics</li> <li>Configuration Management: Centralized configuration system</li> </ul>"},{"location":"about/changelog/#changed_1","title":"Changed","text":"<ul> <li>Storage Backend: Migrated from file-based to database storage</li> <li>User Interface: Improved bot command responses and interactions</li> <li>Performance: Significant performance improvements across all operations</li> </ul>"},{"location":"about/changelog/#130-2023-11-15","title":"[1.3.0] - 2023-11-15","text":""},{"location":"about/changelog/#added_2","title":"Added","text":"<ul> <li>Range Request Support: HTTP range requests for partial file downloads</li> <li>File Metadata: Enhanced file information and metadata display</li> <li>Download Statistics: Basic download tracking and statistics</li> <li>Error Recovery: Improved error handling and recovery mechanisms</li> </ul>"},{"location":"about/changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Large File Handling: Better support for large file downloads</li> <li>Memory Usage: Optimized memory usage for file operations</li> <li>Connection Stability: Improved Telegram connection stability</li> </ul>"},{"location":"about/changelog/#120-2023-11-01","title":"[1.2.0] - 2023-11-01","text":""},{"location":"about/changelog/#added_3","title":"Added","text":"<ul> <li>Web Interface: HTTP web server for file downloads</li> <li>Direct Links: Generate direct download links for files</li> <li>File Validation: Basic file validation and security checks</li> <li>Logging System: Comprehensive logging and monitoring</li> </ul>"},{"location":"about/changelog/#enhanced_3","title":"Enhanced","text":"<ul> <li>Bot Commands: Expanded command set and functionality</li> <li>File Processing: Improved file upload and processing</li> <li>User Experience: Better user interactions and feedback</li> </ul>"},{"location":"about/changelog/#110-2023-10-15","title":"[1.1.0] - 2023-10-15","text":""},{"location":"about/changelog/#added_4","title":"Added","text":"<ul> <li>Multi-File Support: Support for various file types and formats</li> <li>Bot Commands: Basic bot commands and user interaction</li> <li>File Upload: File upload handling via Telegram</li> <li>Basic Security: Initial security measures and validation</li> </ul>"},{"location":"about/changelog/#changed_2","title":"Changed","text":"<ul> <li>Architecture: Improved code organization and structure</li> <li>Performance: Basic performance optimizations</li> </ul>"},{"location":"about/changelog/#100-2023-10-01","title":"[1.0.0] - 2023-10-01","text":""},{"location":"about/changelog/#added-initial-release","title":"Added - Initial Release","text":"<ul> <li>Basic Bot Functionality: Core Telegram bot implementation</li> <li>File to Link Conversion: Convert Telegram files to downloadable links</li> <li>Simple Web Server: Basic HTTP server for file serving</li> <li>Configuration System: Environment-based configuration</li> <li>Documentation: Initial documentation and setup guides</li> </ul>"},{"location":"about/changelog/#repository-information","title":"Repository Information","text":"<p>GitHub Repository: https://github.com/AnikethJana/Telegram-Download-Link-Generator</p> <p>Contributors: Thank you to all contributors who have helped improve StreamBot!</p>"},{"location":"about/changelog/#support","title":"Support","text":"<p>For support and questions: - Telegram: @ajmods_bot - Issues: GitHub Issues - Documentation: Full Documentation</p>"},{"location":"about/changelog/#upgrade-guide","title":"Upgrade Guide","text":""},{"location":"about/changelog/#upgrading-to-210-video-streaming","title":"Upgrading to 2.1.0 (Video Streaming)","text":"<ol> <li>Update Python: Ensure you're running Python 3.11 or higher</li> <li>Update Dependencies: Run <code>pip install -r requirements.txt</code></li> <li>Environment Variables: </li> <li><code>VIDEO_FRONTEND_URL</code> now defaults to <code>https://cricster.pages.dev</code></li> <li>Set to <code>false</code> if you want to disable video frontend</li> <li>Test Video Streaming: Upload a video file to test new streaming capabilities</li> <li>Update Documentation: Review updated API endpoints and features</li> </ol>"},{"location":"about/changelog/#upgrading-to-200","title":"Upgrading to 2.0.0","text":"<ol> <li>Database Migration: Ensure MongoDB is properly configured</li> <li>Environment Update: Review and update environment variables</li> <li>Admin Configuration: Set up admin users in <code>ADMINS</code> environment variable</li> <li>Resource Monitoring: Check system resources and scaling requirements</li> </ol> <p>For detailed upgrade instructions, see the Installation Guide. </p>"},{"location":"about/license/","title":"License","text":"<p>StreamBot is open source software released under the MIT License.</p>"},{"location":"about/license/#mit-license","title":"MIT License","text":"<pre><code>MIT License\n\nCopyright (c) 2023-Present StreamBot Team\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"about/license/#what-this-means","title":"What This Means","text":"<p>The MIT License is a permissive open source license that allows you to:</p> <ul> <li>\u2705 Use the software for any purpose, including commercial use</li> <li>\u2705 Modify the source code to fit your needs</li> <li>\u2705 Distribute copies of the software</li> <li>\u2705 Sublicense the software under different terms</li> <li>\u2705 Sell copies or modifications of the software</li> </ul>"},{"location":"about/license/#requirements","title":"Requirements","text":"<p>When using StreamBot, you must:</p> <ul> <li>\ud83d\udccb Include the license notice in any copies or substantial portions</li> <li>\ud83d\udccb Include the copyright notice in any copies or substantial portions</li> </ul>"},{"location":"about/license/#limitations","title":"Limitations","text":"<p>The license provides:</p> <ul> <li>\u274c No warranty - the software is provided \"as is\"</li> <li>\u274c No liability - authors are not liable for any damages</li> <li>\u274c No trademark rights - you cannot use the StreamBot name or trademarks</li> </ul>"},{"location":"about/license/#third-party-licenses","title":"Third-Party Licenses","text":"<p>StreamBot uses several open source libraries, each with their own licenses:</p>"},{"location":"about/license/#python-dependencies","title":"Python Dependencies","text":"Package License Purpose Pyrogram LGPL-3.0 Telegram client library aiohttp Apache-2.0 Async HTTP server pymongo Apache-2.0 MongoDB driver python-dotenv BSD-3-Clause Environment file support"},{"location":"about/license/#documentation-dependencies","title":"Documentation Dependencies","text":"Package License Purpose MkDocs BSD-2-Clause Documentation generator Material for MkDocs MIT Documentation theme"},{"location":"about/license/#contributing","title":"Contributing","text":"<p>By contributing to StreamBot, you agree that your contributions will be licensed under the same MIT License that covers the project.</p>"},{"location":"about/license/#license-questions","title":"License Questions","text":"<p>If you have questions about the license or need clarification:</p> <ul> <li>Check the full license text</li> <li>Review MIT License FAQ</li> <li>Open an issue on GitHub</li> </ul> <p>For the complete and authoritative license text, please refer to the LICENSE file in the project repository. </p>"},{"location":"api/authentication/","title":"API Authentication","text":"<p>StreamBot is designed with an open architecture where most endpoints are publicly accessible for file downloads and streaming. This guide explains the authentication model and available endpoints.</p>"},{"location":"api/authentication/#authentication-overview","title":"Authentication Overview","text":"<p>StreamBot uses a minimal authentication approach focused on functionality rather than restricting access:</p>"},{"location":"api/authentication/#public-endpoints-no-authentication-required","title":"Public Endpoints (No Authentication Required)","text":"<p>Most StreamBot endpoints are publicly accessible:</p> <pre><code># File downloads - no authentication needed\ncurl https://your-streambot-domain.com/dl/encoded_file_id\n\n# Video streaming - no authentication needed  \ncurl https://your-streambot-domain.com/stream/encoded_file_id\n\n# Bot information - publicly accessible\ncurl https://your-streambot-domain.com/api/info\n</code></pre>"},{"location":"api/authentication/#security-model","title":"Security Model","text":"<p>StreamBot uses encoded file IDs for access control instead of traditional authentication:</p> <ul> <li>Files are accessed via encoded message IDs that serve as secure tokens</li> <li>No user accounts or login systems required</li> <li>Access is controlled at the file level, not user level</li> <li>Rate limiting is applied based on IP address and usage patterns</li> </ul>"},{"location":"api/authentication/#available-endpoints","title":"Available Endpoints","text":""},{"location":"api/authentication/#file-access-endpoints","title":"File Access Endpoints","text":"Endpoint Authentication Description <code>GET /dl/{encoded_id}</code> None Download file via encoded ID <code>GET /stream/{encoded_id}</code> None Stream video file with seeking support <code>GET /api/info</code> None Bot status and capabilities"},{"location":"api/authentication/#encoded-file-id-security","title":"Encoded File ID Security","text":"<p>File access uses encoded IDs for security:</p> <pre><code># Example encoded file ID\nhttps://your-domain.com/dl/VGhpcyBpcyBhIGZha2UgZW5jb2RlZCBpZA\n\n# Example streaming URL\nhttps://your-domain.com/stream/VGhpcyBpcyBhIGZha2UgZW5jb2RlZCBpZA\n</code></pre> <p>How it works: 1. User uploads file to Telegram bot 2. Bot generates encoded ID based on message ID and security parameters 3. Encoded ID provides secure access without exposing internal message IDs 4. IDs can include expiration and access controls</p>"},{"location":"api/authentication/#usage-examples","title":"Usage Examples","text":""},{"location":"api/authentication/#python-example","title":"Python Example","text":"<pre><code>import requests\n\nclass StreamBotClient:\n    def __init__(self, base_url):\n        self.base_url = base_url.rstrip('/')\n        self.session = requests.Session()\n\n        # Set default headers\n        self.session.headers.update({\n            'User-Agent': 'StreamBot-Client/1.0'\n        })\n\n    def get_bot_info(self):\n        \"\"\"Get bot information - no authentication required.\"\"\"\n        try:\n            response = self.session.get(f'{self.base_url}/api/info')\n            response.raise_for_status()\n            return response.json()\n        except requests.RequestException as e:\n            print(f\"Error fetching bot info: {e}\")\n            return None\n\n    def download_file(self, encoded_id, output_path):\n        \"\"\"Download file using encoded ID.\"\"\"\n        try:\n            url = f'{self.base_url}/dl/{encoded_id}'\n            response = self.session.get(url, stream=True)\n            response.raise_for_status()\n\n            with open(output_path, 'wb') as f:\n                for chunk in response.iter_content(chunk_size=8192):\n                    f.write(chunk)\n\n            return True\n        except requests.RequestException as e:\n            print(f\"Download failed: {e}\")\n            return False\n\n    def stream_video_info(self, encoded_id):\n        \"\"\"Get video streaming information.\"\"\"\n        try:\n            url = f'{self.base_url}/stream/{encoded_id}'\n            response = self.session.head(url)\n            response.raise_for_status()\n\n            return {\n                'content_type': response.headers.get('Content-Type'),\n                'content_length': response.headers.get('Content-Length'),\n                'accept_ranges': response.headers.get('Accept-Ranges'),\n                'supports_streaming': response.headers.get('Accept-Ranges') == 'bytes'\n            }\n        except requests.RequestException as e:\n            print(f\"Stream info failed: {e}\")\n            return None\n\n# Usage\nclient = StreamBotClient(\"https://your-streambot-domain.com\")\n\n# Get bot information\ninfo = client.get_bot_info()\nif info:\n    print(f\"Bot status: {info['status']}\")\n    print(f\"Video streaming: {info.get('features', {}).get('video_streaming', False)}\")\n\n# Download a file\nsuccess = client.download_file(\"encoded_file_id\", \"download.pdf\")\n\n# Get video streaming info\nstream_info = client.stream_video_info(\"encoded_video_id\")\nif stream_info:\n    print(f\"Supports streaming: {stream_info['supports_streaming']}\")\n</code></pre>"},{"location":"api/authentication/#javascript-example","title":"JavaScript Example","text":"<pre><code>class StreamBotAPI {\n    constructor(baseUrl) {\n        this.baseUrl = baseUrl.replace(/\\/$/, '');\n    }\n\n    async getBotInfo() {\n        try {\n            const response = await fetch(`${this.baseUrl}/api/info`);\n            if (!response.ok) throw new Error('Failed to fetch bot info');\n            return await response.json();\n        } catch (error) {\n            console.error('Error:', error);\n            return null;\n        }\n    }\n\n    async downloadFile(encodedId, filename) {\n        try {\n            const response = await fetch(`${this.baseUrl}/dl/${encodedId}`);\n            if (!response.ok) throw new Error('Download failed');\n\n            const blob = await response.blob();\n\n            // Create download link\n            const url = window.URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = filename;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n\n            return true;\n        } catch (error) {\n            console.error('Download failed:', error);\n            return false;\n        }\n    }\n\n    getStreamingUrl(encodedId) {\n        return `${this.baseUrl}/stream/${encodedId}`;\n    }\n\n    getVideoPlayerUrl(encodedId, frontendUrl = 'https://cricster.pages.dev') {\n        const streamUrl = this.getStreamingUrl(encodedId);\n        return `${frontendUrl}?stream=${encodeURIComponent(streamUrl)}`;\n    }\n}\n\n// Usage\nconst api = new StreamBotAPI('https://your-streambot-domain.com');\n\n// Get bot information\napi.getBotInfo().then(info =&gt; {\n    if (info) {\n        console.log('Bot Status:', info.status);\n        console.log('Video Streaming:', info.features?.video_streaming);\n    }\n});\n\n// Setup video player\nfunction setupVideoPlayer(encodedId) {\n    const streamUrl = api.getStreamingUrl(encodedId);\n    const videoPlayerUrl = api.getVideoPlayerUrl(encodedId);\n\n    // Direct video element\n    const video = document.getElementById('videoPlayer');\n    video.src = streamUrl;\n\n    // Or open in Cricster player\n    window.open(videoPlayerUrl, '_blank');\n}\n</code></pre>"},{"location":"api/authentication/#curl-examples","title":"cURL Examples","text":"<pre><code># Get bot information\ncurl -X GET \"https://your-domain.com/api/info\"\n\n# Download a file\ncurl -O -J \"https://your-domain.com/dl/encoded_file_id\"\n\n# Stream video with range request (for seeking)\ncurl -H \"Range: bytes=0-1048575\" \\\n     \"https://your-domain.com/stream/encoded_video_id\" \\\n     -o video_chunk.mp4\n\n# Get file information\ncurl -I \"https://your-domain.com/dl/encoded_file_id\"\n\n# Check streaming capabilities\ncurl -I \"https://your-domain.com/stream/encoded_video_id\"\n</code></pre>"},{"location":"api/authentication/#error-handling","title":"Error Handling","text":""},{"location":"api/authentication/#common-errors","title":"Common Errors","text":""},{"location":"api/authentication/#404-file-not-found","title":"404 - File Not Found","text":"<pre><code>{\n    \"error\": \"File not found\",\n    \"message\": \"The requested file could not be found or has expired\"\n}\n</code></pre> <p>Causes: - Invalid encoded file ID - File has been deleted from Telegram - Link has expired (if expiration is configured)</p>"},{"location":"api/authentication/#429-rate-limited","title":"429 - Rate Limited","text":"<pre><code>{\n    \"error\": \"Rate limited\",\n    \"message\": \"Too many requests. Please try again later.\",\n    \"retry_after\": 60\n}\n</code></pre> <p>Causes: - Too many requests from the same IP - Daily download limit exceeded - Bandwidth limit reached</p>"},{"location":"api/authentication/#416-range-not-satisfiable","title":"416 - Range Not Satisfiable","text":"<pre><code>{\n    \"error\": \"Range not satisfiable\",\n    \"message\": \"The requested range is not valid for this file\"\n}\n</code></pre> <p>Causes: - Invalid range request for video streaming - Requested range exceeds file size</p>"},{"location":"api/authentication/#error-handling-example","title":"Error Handling Example","text":"<pre><code>import requests\nfrom requests.exceptions import RequestException\n\ndef safe_download(encoded_id, output_path, base_url):\n    \"\"\"Download with comprehensive error handling.\"\"\"\n    url = f\"{base_url}/dl/{encoded_id}\"\n\n    try:\n        response = requests.get(url, stream=True, timeout=30)\n\n        if response.status_code == 200:\n            with open(output_path, 'wb') as f:\n                for chunk in response.iter_content(chunk_size=8192):\n                    f.write(chunk)\n            return {\"success\": True, \"message\": \"Download completed\"}\n\n        elif response.status_code == 404:\n            return {\"success\": False, \"error\": \"File not found or expired\"}\n\n        elif response.status_code == 429:\n            retry_after = response.headers.get('Retry-After', 60)\n            return {\"success\": False, \"error\": f\"Rate limited. Try again in {retry_after}s\"}\n\n        else:\n            return {\"success\": False, \"error\": f\"HTTP {response.status_code}\"}\n\n    except RequestException as e:\n        return {\"success\": False, \"error\": f\"Request failed: {e}\"}\n\n# Usage\nresult = safe_download(\"encoded_id\", \"file.pdf\", \"https://your-domain.com\")\nif result[\"success\"]:\n    print(\"Download successful!\")\nelse:\n    print(f\"Download failed: {result['error']}\")\n</code></pre>"},{"location":"api/authentication/#rate-limiting","title":"Rate Limiting","text":"<p>StreamBot implements rate limiting to ensure fair usage:</p>"},{"location":"api/authentication/#rate-limit-headers","title":"Rate Limit Headers","text":"<p>Responses include rate limiting information:</p> <pre><code>X-RateLimit-Limit: 60\nX-RateLimit-Remaining: 45\nX-RateLimit-Reset: 1642262400\n</code></pre>"},{"location":"api/authentication/#rate-limit-handling","title":"Rate Limit Handling","text":"<pre><code>def handle_rate_limits(response):\n    \"\"\"Handle rate limit headers in responses.\"\"\"\n    if 'X-RateLimit-Remaining' in response.headers:\n        remaining = int(response.headers['X-RateLimit-Remaining'])\n        limit = int(response.headers.get('X-RateLimit-Limit', 0))\n        reset_time = int(response.headers.get('X-RateLimit-Reset', 0))\n\n        print(f\"Rate limit: {remaining}/{limit} remaining\")\n\n        if remaining &lt; 5:\n            import time\n            wait_time = reset_time - int(time.time())\n            print(f\"Warning: Only {remaining} requests remaining\")\n            if wait_time &gt; 0:\n                print(f\"Rate limit resets in {wait_time} seconds\")\n</code></pre>"},{"location":"api/authentication/#integration-patterns","title":"Integration Patterns","text":""},{"location":"api/authentication/#video-streaming-integration","title":"Video Streaming Integration","text":"<pre><code>// Complete video streaming integration\nclass VideoStreamingClient {\n    constructor(baseUrl, frontendUrl = 'https://cricster.pages.dev') {\n        this.baseUrl = baseUrl;\n        this.frontendUrl = frontendUrl;\n    }\n\n    // Get direct streaming URL\n    getStreamUrl(encodedId) {\n        return `${this.baseUrl}/stream/${encodedId}`;\n    }\n\n    // Get frontend player URL\n    getPlayerUrl(encodedId) {\n        const streamUrl = this.getStreamUrl(encodedId);\n        return `${this.frontendUrl}?stream=${encodeURIComponent(streamUrl)}`;\n    }\n\n    // Embed video player\n    embedPlayer(encodedId, containerId) {\n        const playerUrl = this.getPlayerUrl(encodedId);\n        const container = document.getElementById(containerId);\n\n        const iframe = document.createElement('iframe');\n        iframe.src = playerUrl;\n        iframe.width = '100%';\n        iframe.height = '400';\n        iframe.frameBorder = '0';\n        iframe.allowFullscreen = true;\n\n        container.appendChild(iframe);\n    }\n\n    // Direct video element setup\n    setupDirectVideo(encodedId, videoElementId) {\n        const video = document.getElementById(videoElementId);\n        video.src = this.getStreamUrl(encodedId);\n        video.controls = true;\n\n        return video;\n    }\n}\n\n// Usage\nconst streaming = new VideoStreamingClient('https://your-domain.com');\n\n// Option 1: Embed Cricster player\nstreaming.embedPlayer('video_id', 'player-container');\n\n// Option 2: Direct video element\nstreaming.setupDirectVideo('video_id', 'video-element');\n</code></pre>"},{"location":"api/authentication/#best-practices","title":"Best Practices","text":"<ol> <li>Handle Rate Limits: Always check rate limit headers and implement backoff</li> <li>Error Handling: Implement comprehensive error handling for all requests</li> <li>Use Streaming: For videos, use the <code>/stream/</code> endpoint for better performance</li> <li>Cache Responses: Cache bot info and file metadata when appropriate</li> <li>Validate IDs: Check encoded ID format before making requests</li> <li>Monitor Usage: Track your API usage to stay within limits</li> </ol> <p>For more integration examples, see the API Examples documentation. </p>"},{"location":"api/endpoints/","title":"API Endpoints Reference","text":"<p>This page provides detailed documentation for all available StreamBot API endpoints including the new video streaming capabilities.</p>"},{"location":"api/endpoints/#system-information","title":"System Information","text":""},{"location":"api/endpoints/#get-apiinfo","title":"GET <code>/api/info</code>","text":"<p>Returns comprehensive bot status and configuration information including video streaming status.</p> <p>Authentication: None required</p> <p>Request: <pre><code>GET /api/info HTTP/1.1\nHost: yourdomain.com\nAccept: application/json\n</code></pre></p> <p>Response (Success - 200): <pre><code>{\n  \"status\": \"ok\",\n  \"bot_status\": \"connected\",\n  \"bot_info\": {\n    \"id\": 123456789,\n    \"username\": \"YourBotName\",\n    \"first_name\": \"StreamBot\",\n    \"mention\": \"@YourBotName\"\n  },\n  \"features\": {\n    \"force_subscribe\": true,\n    \"force_subscribe_channel_id\": -1001234567890,\n    \"link_expiry_enabled\": true,\n    \"link_expiry_duration_seconds\": 86400,\n    \"link_expiry_duration_human\": \"24 hours\",\n    \"video_streaming\": true,\n    \"video_frontend_url\": \"https://cricster.pages.dev\"\n  },\n  \"bandwidth_info\": {\n    \"limit_gb\": 100,\n    \"used_gb\": 45.234,\n    \"used_bytes\": 48573440000,\n    \"month\": \"2024-01\",\n    \"limit_enabled\": true,\n    \"remaining_gb\": 54.766\n  },\n  \"streaming_info\": {\n    \"active_streams\": 12,\n    \"supported_formats\": [\"mp4\", \"mkv\", \"avi\", \"webm\", \"mov\"],\n    \"range_requests_supported\": true,\n    \"seeking_supported\": true\n  },\n  \"uptime\": \"2d 14h 32m 18s\",\n  \"server_time_utc\": \"2024-01-15T14:30:45.123456Z\",\n  \"totaluser\": 1250,\n  \"github_repo\": \"https://github.com/AnikethJana/Telegram-Download-Link-Generator\"\n}\n</code></pre></p> <p>Response (Error - 500): <pre><code>{\n  \"status\": \"error\",\n  \"bot_status\": \"disconnected\",\n  \"message\": \"Bot client is not currently connected to Telegram.\",\n  \"uptime\": \"0s\",\n  \"totaluser\": 0,\n  \"bandwidth_info\": {\n    \"limit_enabled\": false,\n    \"error\": \"Failed to retrieve bandwidth data\"\n  }\n}\n</code></pre></p> <p>Response Fields:</p> Field Type Description <code>status</code> string API response status (<code>ok</code> or <code>error</code>) <code>bot_status</code> string Telegram bot connection status <code>bot_info</code> object Bot identity information <code>features</code> object Enabled features and their configuration <code>bandwidth_info</code> object Current bandwidth usage and limits <code>streaming_info</code> object Video streaming status and capabilities <code>uptime</code> string Human-readable bot uptime <code>server_time_utc</code> string Current server time in UTC ISO format <code>totaluser</code> integer Total number of registered users <code>github_repo</code> string Repository URL"},{"location":"api/endpoints/#file-downloads","title":"File Downloads","text":""},{"location":"api/endpoints/#get-dlencoded_id","title":"GET <code>/dl/{encoded_id}</code>","text":"<p>Download files via generated download links with range request support.</p> <p>Authentication: None (uses encoded file IDs for security)</p> <p>Request: <pre><code>GET /dl/VGhpcyBpcyBhIGZha2UgZW5jb2RlZCBpZA HTTP/1.1\nHost: yourdomain.com\nRange: bytes=0-1023\nUser-Agent: Mozilla/5.0 (compatible)\n</code></pre></p> <p>Path Parameters:</p> Parameter Type Description <code>encoded_id</code> string Base64-encoded message ID with security transformation <p>Request Headers:</p> Header Required Description <code>Range</code> No HTTP range for partial content (e.g., <code>bytes=0-1023</code>) <code>User-Agent</code> No Client identification <p>Response (Success - 200/206): <pre><code>HTTP/1.1 206 Partial Content\nContent-Type: application/pdf\nContent-Length: 1024\nContent-Range: bytes 0-1023/2048576\nContent-Disposition: attachment; filename=\"document.pdf\"\nAccept-Ranges: bytes\n\n[Binary file content]\n</code></pre></p> <p>Response Headers:</p> Header Description <code>Content-Type</code> File MIME type <code>Content-Length</code> Content size in bytes <code>Content-Disposition</code> Download filename <code>Accept-Ranges</code> Range request support (<code>bytes</code>) <code>Content-Range</code> Range information (for partial content) <p>Error Responses:</p> <p>404 - File Not Found: <pre><code>{\n  \"error\": \"File link is invalid or the file has been deleted.\"\n}\n</code></pre></p> <p>410 - Link Expired: <pre><code>{\n  \"error\": \"This download link has expired (valid for 24 hours).\"\n}\n</code></pre></p> <p>429 - Rate Limited: <pre><code>{\n  \"error\": \"Rate limited by Telegram. Please try again in 30 seconds.\"\n}\n</code></pre></p> <p>503 - Service Unavailable: <pre><code>{\n  \"error\": \"Bot service temporarily overloaded. Please try again shortly.\"\n}\n</code></pre></p>"},{"location":"api/endpoints/#video-streaming","title":"Video Streaming","text":""},{"location":"api/endpoints/#get-streamencoded_id","title":"GET <code>/stream/{encoded_id}</code>","text":"<p>Stream video files with full seeking support and range requests.</p> <p>Authentication: None (uses encoded file IDs for security)</p> <p>Request: <pre><code>GET /stream/VGhpcyBpcyBhIGZha2UgZW5jb2RlZCBpZA HTTP/1.1\nHost: yourdomain.com\nRange: bytes=1048576-2097151\nUser-Agent: Mozilla/5.0 (compatible)\n</code></pre></p> <p>Response (Success - 200/206): <pre><code>HTTP/1.1 206 Partial Content\nContent-Type: video/mp4\nContent-Length: 1048576\nContent-Range: bytes 1048576-2097151/104857600\nAccept-Ranges: bytes\nCache-Control: public, max-age=3600\n\n[Binary video content]\n</code></pre></p> <p>Supported Video Formats:</p> Format MIME Type Description MP4 <code>video/mp4</code> Most compatible format MKV <code>video/x-matroska</code> High quality container WebM <code>video/webm</code> Web-optimized format"},{"location":"api/endpoints/#error-handling","title":"Error Handling","text":""},{"location":"api/endpoints/#common-error-responses","title":"Common Error Responses","text":"<p>All endpoints may return these common errors:</p> <p>400 - Bad Request: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Invalid request parameters\",\n  \"error_code\": \"BAD_REQUEST\"\n}\n</code></pre></p> <p>401 - Unauthorized: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Authentication required\",\n  \"error_code\": \"UNAUTHORIZED\"\n}\n</code></pre></p> <p>403 - Forbidden: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Access forbidden\",\n  \"error_code\": \"FORBIDDEN\"\n}\n</code></pre></p> <p>429 - Too Many Requests: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Rate limit exceeded\",\n  \"error_code\": \"RATE_LIMITED\",\n  \"retry_after\": 60\n}\n</code></pre></p> <p>500 - Internal Server Error: <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Internal server error\",\n  \"error_code\": \"INTERNAL_ERROR\"\n}\n</code></pre></p>"},{"location":"api/endpoints/#rate-limiting-headers","title":"Rate Limiting Headers","text":"<p>All responses include rate limiting information:</p> <pre><code>X-RateLimit-Limit: 60\nX-RateLimit-Remaining: 45\nX-RateLimit-Reset: 1642262400\nRetry-After: 60\n</code></pre> Header Description <code>X-RateLimit-Limit</code> Maximum requests per window <code>X-RateLimit-Remaining</code> Remaining requests in current window <code>X-RateLimit-Reset</code> Unix timestamp when limit resets <code>Retry-After</code> Seconds to wait before retrying (when rate limited)"},{"location":"api/endpoints/#usage-examples","title":"Usage Examples","text":""},{"location":"api/endpoints/#curl-examples","title":"cURL Examples","text":"<pre><code># Get bot information\ncurl -X GET \"https://yourdomain.com/api/info\"\n\n# Stream a video with range request\ncurl -X GET \"https://yourdomain.com/stream/encoded_id\" \\\n  -H \"Range: bytes=0-1048575\" \\\n  -o \"video_chunk.mp4\"\n</code></pre>"},{"location":"api/endpoints/#python-examples","title":"Python Examples","text":"<pre><code>import requests\n\n# Get bot information\nresponse = requests.get('https://yourdomain.com/api/info')\ndata = response.json()\nprint(f\"Video streaming: {data['features']['video_streaming']}\")\n\n# Stream video with range requests\ndef stream_video_chunk(encoded_id, start_byte, end_byte):\n    headers = {'Range': f'bytes={start_byte}-{end_byte}'}\n    response = requests.get(\n        f'https://yourdomain.com/stream/{encoded_id}',\n        headers=headers,\n        stream=True\n    )\n    return response.content\n</code></pre>"},{"location":"api/endpoints/#javascript-examples","title":"JavaScript Examples","text":"<pre><code>// Setup video streaming\nfunction setupVideoStreaming(encodedId) {\n    const video = document.getElementById('videoPlayer');\n    const streamUrl = `https://yourdomain.com/stream/${encodedId}`;\n\n    video.src = streamUrl;\n\n    // Handle seeking events\n    video.addEventListener('seeking', function() {\n        console.log('Seeking to:', video.currentTime);\n    });\n}\n</code></pre> <p>For more integration examples, see the Examples section. </p>"},{"location":"api/examples/","title":"API Examples","text":"<p>This page provides practical examples of how to use the StreamBot API in various programming languages, including the new video streaming capabilities.</p>"},{"location":"api/examples/#system-information","title":"System Information","text":""},{"location":"api/examples/#get-bot-status-and-video-streaming-info","title":"Get Bot Status and Video Streaming Info","text":"<p>Get comprehensive bot information including video streaming capabilities:</p> <pre><code>curl -X GET \"https://yourdomain.com/api/info\" \\\n  -H \"Accept: application/json\"\n</code></pre>"},{"location":"api/examples/#python-example","title":"Python Example","text":"<pre><code>import requests\nimport json\n\ndef get_bot_info():\n    \"\"\"Get comprehensive bot information including video streaming status.\"\"\"\n    url = \"https://yourdomain.com/api/info\"\n\n    try:\n        response = requests.get(url, timeout=30)\n        response.raise_for_status()\n\n        data = response.json()\n\n        print(f\"Bot Status: {data['status']}\")\n        print(f\"Bot Username: @{data['bot_info']['username']}\")\n        print(f\"Total Users: {data['totaluser']}\")\n        print(f\"Uptime: {data['uptime']}\")\n\n        # Video streaming information\n        streaming_info = data.get('streaming_info', {})\n        if streaming_info:\n            print(f\"\\nVideo Streaming Features:\")\n            print(f\"  Active Streams: {streaming_info['active_streams']}\")\n            print(f\"  Supported Formats: {', '.join(streaming_info['supported_formats'])}\")\n            print(f\"  Range Requests: {streaming_info['range_requests_supported']}\")\n            print(f\"  Seeking Support: {streaming_info['seeking_supported']}\")\n\n        # Bandwidth information\n        bandwidth = data.get('bandwidth_info', {})\n        if bandwidth:\n            print(f\"\\nBandwidth Usage:\")\n            print(f\"  Used: {bandwidth['used_gb']:.2f} GB\")\n            print(f\"  Limit: {bandwidth['limit_gb']} GB\")\n            print(f\"  Remaining: {bandwidth['remaining_gb']:.2f} GB\")\n\n        return data\n\n    except requests.RequestException as e:\n        print(f\"Error fetching bot info: {e}\")\n        return None\n\n# Usage\nbot_info = get_bot_info()\n</code></pre>"},{"location":"api/examples/#javascript-example","title":"JavaScript Example","text":"<pre><code>async function getBotInfo() {\n    try {\n        const response = await fetch('https://yourdomain.com/api/info');\n        if (!response.ok) throw new Error('Failed to fetch bot info');\n\n        const data = await response.json();\n\n        console.log('Bot Information:');\n        console.log(`Status: ${data.status}`);\n        console.log(`Username: @${data.bot_info.username}`);\n        console.log(`Total Users: ${data.totaluser}`);\n\n        // Display video streaming capabilities\n        if (data.streaming_info) {\n            console.log('\\nVideo Streaming:');\n            console.log(`Active Streams: ${data.streaming_info.active_streams}`);\n            console.log(`Supported Formats: ${data.streaming_info.supported_formats.join(', ')}`);\n            console.log(`Range Requests: ${data.streaming_info.range_requests_supported}`);\n        }\n\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        return null;\n    }\n}\n\n// Usage\ngetBotInfo();\n</code></pre>"},{"location":"api/examples/#file-downloads","title":"File Downloads","text":""},{"location":"api/examples/#basic-file-download","title":"Basic File Download","text":"<p>Download files using the download endpoint:</p> <pre><code>curl -O -J \"https://yourdomain.com/dl/encoded_file_id\"\n</code></pre>"},{"location":"api/examples/#download-with-progress-tracking","title":"Download with Progress Tracking","text":"<pre><code>import requests\nfrom tqdm import tqdm\n\ndef download_file_with_progress(file_id, output_path):\n    \"\"\"Download a file from StreamBot with progress tracking.\"\"\"\n    url = f\"https://yourdomain.com/dl/{file_id}\"\n\n    try:\n        # Get file size first\n        head_response = requests.head(url)\n        total_size = int(head_response.headers.get('Content-Length', 0))\n\n        # Download with progress bar\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n\n        with open(output_path, 'wb') as file, tqdm(\n            desc=output_path,\n            total=total_size,\n            unit='B',\n            unit_scale=True,\n            unit_divisor=1024,\n        ) as progress_bar:\n            for chunk in response.iter_content(chunk_size=8192):\n                size = file.write(chunk)\n                progress_bar.update(size)\n\n        print(f\"Downloaded: {output_path}\")\n        return True\n\n    except requests.RequestException as e:\n        print(f\"Download failed: {e}\")\n        return False\n\n# Usage\nsuccess = download_file_with_progress(\"your_file_id\", \"downloaded_file.pdf\")\n</code></pre>"},{"location":"api/examples/#range-requests-for-large-files","title":"Range Requests for Large Files","text":"<pre><code>def download_file_range(file_id, start_byte, end_byte, output_path):\n    \"\"\"Download a specific range of bytes from a file.\"\"\"\n    url = f\"https://yourdomain.com/dl/{file_id}\"\n    headers = {'Range': f'bytes={start_byte}-{end_byte}'}\n\n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n\n        with open(output_path, 'wb') as f:\n            f.write(response.content)\n\n        print(f\"Downloaded bytes {start_byte}-{end_byte} to {output_path}\")\n        return True\n\n    except requests.RequestException as e:\n        print(f\"Range download failed: {e}\")\n        return False\n\n# Download first 1MB of a file\ndownload_file_range(\"your_file_id\", 0, 1048575, \"partial_file.bin\")\n</code></pre>"},{"location":"api/examples/#video-streaming","title":"Video Streaming","text":""},{"location":"api/examples/#stream-video-with-range-requests","title":"Stream Video with Range Requests","text":"<pre><code>import requests\n\ndef stream_video_chunk(file_id, start_byte, end_byte):\n    \"\"\"Stream a specific chunk of video for seeking functionality.\"\"\"\n    url = f\"https://yourdomain.com/stream/{file_id}\"\n    headers = {'Range': f'bytes={start_byte}-{end_byte}'}\n\n    try:\n        response = requests.get(url, headers=headers, stream=True)\n        response.raise_for_status()\n\n        # Check if range request was successful\n        if response.status_code == 206:\n            print(f\"Partial content: {response.headers.get('Content-Range')}\")\n            return response.content\n        else:\n            print(\"Range request not supported\")\n            return response.content\n\n    except requests.RequestException as e:\n        print(f\"Streaming failed: {e}\")\n        return None\n\n# Stream first 2MB for video preview\nvideo_chunk = stream_video_chunk(\"your_video_id\", 0, 2097151)\n</code></pre>"},{"location":"api/examples/#javascript-video-player-integration","title":"JavaScript Video Player Integration","text":"<pre><code>class StreamBotVideoPlayer {\n    constructor(videoElement, streamUrl) {\n        this.video = videoElement;\n        this.streamUrl = streamUrl;\n        this.setupPlayer();\n    }\n\n    setupPlayer() {\n        // Set video source\n        this.video.src = this.streamUrl;\n\n        // Handle seeking events\n        this.video.addEventListener('seeking', () =&gt; {\n            console.log(`Seeking to: ${this.video.currentTime}s`);\n        });\n\n        // Handle loading events\n        this.video.addEventListener('loadstart', () =&gt; {\n            console.log('Started loading video');\n        });\n\n        this.video.addEventListener('canplay', () =&gt; {\n            console.log('Video can start playing');\n        });\n\n        // Handle errors\n        this.video.addEventListener('error', (e) =&gt; {\n            console.error('Video error:', e);\n        });\n    }\n\n    // Custom seeking method\n    seekTo(timeInSeconds) {\n        if (this.video.readyState &gt;= 2) { // HAVE_CURRENT_DATA\n            this.video.currentTime = timeInSeconds;\n        }\n    }\n}\n\n// Usage\nconst videoElement = document.getElementById('videoPlayer');\nconst encodedId = 'your_encoded_video_id';\nconst streamUrl = `https://yourdomain.com/stream/${encodedId}`;\n\nconst player = new StreamBotVideoPlayer(videoElement, streamUrl);\n\n// Seek to 30 seconds\nplayer.seekTo(30);\n</code></pre>"},{"location":"api/examples/#frontend-integration-examples","title":"Frontend Integration Examples","text":""},{"location":"api/examples/#cricster-frontend-integration","title":"Cricster Frontend Integration","text":"<pre><code>// Integrate with default Cricster frontend\nfunction playVideoWithCricster(streamUrl) {\n    const cricsterUrl = 'https://cricster.pages.dev';\n    const encodedStreamUrl = encodeURIComponent(streamUrl);\n    const frontendUrl = `${cricsterUrl}?stream=${encodedStreamUrl}`;\n\n    // Open in new window/tab\n    window.open(frontendUrl, '_blank');\n}\n\n// Usage\nconst streamUrl = 'https://yourdomain.com/stream/encoded_video_id';\nplayVideoWithCricster(streamUrl);\n</code></pre>"},{"location":"api/examples/#custom-frontend-integration","title":"Custom Frontend Integration","text":"<pre><code>// Integrate with custom video frontend\nfunction playVideoWithCustomFrontend(streamUrl, frontendUrl) {\n    const encodedStreamUrl = encodeURIComponent(streamUrl);\n    const playerUrl = `${frontendUrl}?stream=${encodedStreamUrl}`;\n\n    // Embed in iframe or open in new window\n    const iframe = document.createElement('iframe');\n    iframe.src = playerUrl;\n    iframe.width = '800';\n    iframe.height = '450';\n    iframe.frameBorder = '0';\n    iframe.allowFullscreen = true;\n\n    document.getElementById('video-container').appendChild(iframe);\n}\n\n// Usage\nconst streamUrl = 'https://yourdomain.com/stream/encoded_video_id';\nconst customFrontend = 'https://my-video-player.example.com';\nplayVideoWithCustomFrontend(streamUrl, customFrontend);\n</code></pre>"},{"location":"api/examples/#advanced-video-streaming","title":"Advanced Video Streaming","text":""},{"location":"api/examples/#adaptive-bitrate-streaming-simulation","title":"Adaptive Bitrate Streaming Simulation","text":"<pre><code>def get_video_quality_info(file_id):\n    \"\"\"Get video information for quality selection.\"\"\"\n    url = f\"https://yourdomain.com/stream/{file_id}\"\n\n    try:\n        # Head request to get video information\n        response = requests.head(url)\n        response.raise_for_status()\n\n        content_length = int(response.headers.get('Content-Length', 0))\n        content_type = response.headers.get('Content-Type', '')\n        accept_ranges = response.headers.get('Accept-Ranges', '')\n\n        return {\n            'size': content_length,\n            'type': content_type,\n            'supports_ranges': accept_ranges == 'bytes',\n            'estimated_bitrate': content_length * 8 / 1000  # Rough estimate\n        }\n\n    except requests.RequestException as e:\n        print(f\"Failed to get video info: {e}\")\n        return None\n\n# Check video capabilities\nvideo_info = get_video_quality_info(\"your_video_id\")\nif video_info:\n    print(f\"Video size: {video_info['size']:,} bytes\")\n    print(f\"Type: {video_info['type']}\")\n    print(f\"Range support: {video_info['supports_ranges']}\")\n</code></pre>"},{"location":"api/examples/#video-thumbnail-generation","title":"Video Thumbnail Generation","text":"<pre><code>def get_video_frame(file_id, timestamp_seconds):\n    \"\"\"Get a frame from video at specific timestamp (requires range requests).\"\"\"\n    # This is a simplified example - actual implementation would need\n    # video parsing libraries like opencv or ffmpeg\n    url = f\"https://yourdomain.com/stream/{file_id}\"\n\n    # Estimate byte position based on timestamp (very rough estimate)\n    # In practice, you'd need proper video indexing\n    estimated_byte_position = timestamp_seconds * 1000000  # Rough estimate\n    range_size = 1048576  # 1MB chunk\n\n    headers = {\n        'Range': f'bytes={estimated_byte_position}-{estimated_byte_position + range_size}'\n    }\n\n    try:\n        response = requests.get(url, headers=headers)\n        if response.status_code == 206:\n            # This would normally be processed with video libraries\n            # to extract actual frame data\n            return response.content\n        return None\n\n    except requests.RequestException as e:\n        print(f\"Frame extraction failed: {e}\")\n        return None\n</code></pre>"},{"location":"api/examples/#error-handling","title":"Error Handling","text":""},{"location":"api/examples/#comprehensive-error-handling","title":"Comprehensive Error Handling","text":"<pre><code>import requests\nfrom requests.exceptions import RequestException, Timeout, ConnectionError\nimport time\nimport logging\n\nclass StreamBotAPIClient:\n    def __init__(self, base_url, timeout=30):\n        self.base_url = base_url.rstrip('/')\n        self.timeout = timeout\n        self.session = requests.Session()\n\n        # Setup logging\n        logging.basicConfig(level=logging.INFO)\n        self.logger = logging.getLogger(__name__)\n\n    def _make_request(self, method, endpoint, **kwargs):\n        \"\"\"Make a request with comprehensive error handling.\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n\n        try:\n            response = self.session.request(\n                method, url, timeout=self.timeout, **kwargs\n            )\n\n            # Handle different status codes\n            if response.status_code == 200:\n                return response\n            elif response.status_code == 206:  # Partial content\n                return response\n            elif response.status_code == 404:\n                raise FileNotFoundError(\"File not found or expired\")\n            elif response.status_code == 429:\n                retry_after = int(response.headers.get('Retry-After', 60))\n                raise TooManyRequestsError(f\"Rate limited. Retry after {retry_after}s\")\n            elif response.status_code &gt;= 500:\n                raise ServerError(f\"Server error: {response.status_code}\")\n            else:\n                response.raise_for_status()\n\n        except Timeout:\n            raise TimeoutError(\"Request timed out\")\n        except ConnectionError:\n            raise ConnectionError(\"Failed to connect to server\")\n        except RequestException as e:\n            raise APIError(f\"Request failed: {e}\")\n\n    def get_bot_info(self):\n        \"\"\"Get bot information with error handling.\"\"\"\n        try:\n            response = self._make_request('GET', '/api/info')\n            return response.json()\n        except Exception as e:\n            self.logger.error(f\"Failed to get bot info: {e}\")\n            return None\n\n    def download_file(self, file_id, output_path, chunk_size=8192):\n        \"\"\"Download file with error handling and resume capability.\"\"\"\n        endpoint = f'/dl/{file_id}'\n\n        # Check if partial file exists for resume\n        start_byte = 0\n        if os.path.exists(output_path):\n            start_byte = os.path.getsize(output_path)\n            self.logger.info(f\"Resuming download from byte {start_byte}\")\n\n        headers = {}\n        if start_byte &gt; 0:\n            headers['Range'] = f'bytes={start_byte}-'\n\n        try:\n            response = self._make_request('GET', endpoint, headers=headers, stream=True)\n\n            mode = 'ab' if start_byte &gt; 0 else 'wb'\n            with open(output_path, mode) as f:\n                for chunk in response.iter_content(chunk_size=chunk_size):\n                    if chunk:\n                        f.write(chunk)\n\n            self.logger.info(f\"Download completed: {output_path}\")\n            return True\n\n        except Exception as e:\n            self.logger.error(f\"Download failed: {e}\")\n            return False\n\n# Custom exceptions\nclass APIError(Exception):\n    pass\n\nclass TooManyRequestsError(APIError):\n    pass\n\nclass ServerError(APIError):\n    pass\n\n# Usage\nclient = StreamBotAPIClient(\"https://yourdomain.com\")\ninfo = client.get_bot_info()\nsuccess = client.download_file(\"file_id\", \"output.pdf\")\n</code></pre>"},{"location":"api/examples/#batch-operations","title":"Batch Operations","text":""},{"location":"api/examples/#batch-file-downloads","title":"Batch File Downloads","text":"<pre><code>import asyncio\nimport aiohttp\nfrom concurrent.futures import ThreadPoolExecutor\n\nasync def download_multiple_files(file_ids, base_url, output_dir):\n    \"\"\"Download multiple files concurrently.\"\"\"\n    os.makedirs(output_dir, exist_ok=True)\n\n    async with aiohttp.ClientSession() as session:\n        tasks = []\n        for i, file_id in enumerate(file_ids):\n            output_path = os.path.join(output_dir, f\"file_{i}_{file_id}\")\n            task = download_single_file(session, base_url, file_id, output_path)\n            tasks.append(task)\n\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n        return results\n\nasync def download_single_file(session, base_url, file_id, output_path):\n    \"\"\"Download a single file asynchronously.\"\"\"\n    url = f\"{base_url}/dl/{file_id}\"\n\n    try:\n        async with session.get(url) as response:\n            response.raise_for_status()\n\n            with open(output_path, 'wb') as f:\n                async for chunk in response.content.iter_chunked(8192):\n                    f.write(chunk)\n\n            return f\"Downloaded: {output_path}\"\n\n    except Exception as e:\n        return f\"Failed to download {file_id}: {e}\"\n\n# Usage\nfile_ids = ['file1_id', 'file2_id', 'file3_id']\nresults = asyncio.run(download_multiple_files(\n    file_ids, \n    \"https://yourdomain.com\", \n    \"./downloads\"\n))\n\nfor result in results:\n    print(result)\n</code></pre>"},{"location":"api/examples/#integration-examples","title":"Integration Examples","text":""},{"location":"api/examples/#discord-bot-integration","title":"Discord Bot Integration","text":"<pre><code>import discord\nfrom discord.ext import commands\nimport requests\n\nclass StreamBotIntegration(commands.Cog):\n    def __init__(self, bot, streambot_url):\n        self.bot = bot\n        self.streambot_url = streambot_url\n\n    @commands.command(name='stream')\n    async def stream_video(self, ctx, file_id: str):\n        \"\"\"Stream a video from StreamBot.\"\"\"\n        stream_url = f\"{self.streambot_url}/stream/{file_id}\"\n        frontend_url = f\"https://cricster.pages.dev?stream={requests.utils.quote(stream_url)}\"\n\n        embed = discord.Embed(\n            title=\"\ud83c\udfac Video Stream\",\n            description=\"Click the link below to watch the video\",\n            color=0x00ff00\n        )\n        embed.add_field(\n            name=\"Stream Link\", \n            value=f\"[Watch Video]({frontend_url})\", \n            inline=False\n        )\n\n        await ctx.send(embed=embed)\n\n    @commands.command(name='download')\n    async def download_file(self, ctx, file_id: str):\n        \"\"\"Get download link from StreamBot.\"\"\"\n        download_url = f\"{self.streambot_url}/dl/{file_id}\"\n\n        # Verify file exists\n        try:\n            response = requests.head(download_url, timeout=10)\n            if response.status_code == 200:\n                embed = discord.Embed(\n                    title=\"\ud83d\udce5 Download Ready\",\n                    description=\"Click the link below to download\",\n                    color=0x0099ff\n                )\n                embed.add_field(\n                    name=\"Download Link\", \n                    value=f\"[Download File]({download_url})\", \n                    inline=False\n                )\n                await ctx.send(embed=embed)\n            else:\n                await ctx.send(\"\u274c File not found or expired\")\n        except requests.RequestException:\n            await ctx.send(\"\u274c Unable to verify file\")\n\n# Setup\nbot = commands.Bot(command_prefix='!')\nbot.add_cog(StreamBotIntegration(bot, \"https://yourdomain.com\"))\n</code></pre>"},{"location":"api/examples/#website-integration","title":"Website Integration","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;StreamBot File Viewer&lt;/title&gt;\n    &lt;style&gt;\n        .video-container {\n            width: 100%;\n            max-width: 800px;\n            margin: 20px auto;\n        }\n\n        .file-info {\n            background: #f5f5f5;\n            padding: 20px;\n            border-radius: 8px;\n            margin: 20px auto;\n            max-width: 800px;\n        }\n\n        video {\n            width: 100%;\n            height: auto;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;StreamBot File Viewer&lt;/h1&gt;\n\n    &lt;div class=\"file-info\"&gt;\n        &lt;h3&gt;File Information&lt;/h3&gt;\n        &lt;p id=\"file-info\"&gt;Loading...&lt;/p&gt;\n\n        &lt;h3&gt;Actions&lt;/h3&gt;\n        &lt;button onclick=\"playVideo()\"&gt;\ud83c\udfac Play Video&lt;/button&gt;\n        &lt;button onclick=\"downloadFile()\"&gt;\ud83d\udce5 Download&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"video-container\"&gt;\n        &lt;video id=\"videoPlayer\" controls style=\"display: none;\"&gt;\n            Your browser does not support video playback.\n        &lt;/video&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        const fileId = 'your_file_id_here';\n        const baseUrl = 'https://yourdomain.com';\n\n        // Load file information\n        async function loadFileInfo() {\n            try {\n                const response = await fetch(`${baseUrl}/api/info`);\n                const data = await response.json();\n\n                document.getElementById('file-info').innerHTML = `\n                    &lt;strong&gt;Bot Status:&lt;/strong&gt; ${data.status}&lt;br&gt;\n                    &lt;strong&gt;Video Streaming:&lt;/strong&gt; ${data.features?.video_streaming ? 'Enabled' : 'Disabled'}&lt;br&gt;\n                    &lt;strong&gt;Frontend:&lt;/strong&gt; ${data.features?.video_frontend_url || 'None'}\n                `;\n            } catch (error) {\n                document.getElementById('file-info').innerHTML = 'Error loading file info';\n            }\n        }\n\n        function playVideo() {\n            const video = document.getElementById('videoPlayer');\n            video.src = `${baseUrl}/stream/${fileId}`;\n            video.style.display = 'block';\n            video.load();\n        }\n\n        function downloadFile() {\n            window.open(`${baseUrl}/dl/${fileId}`, '_blank');\n        }\n\n        // Load info on page load\n        loadFileInfo();\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"api/examples/#performance-optimization","title":"Performance Optimization","text":""},{"location":"api/examples/#connection-pooling","title":"Connection Pooling","text":"<pre><code>import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\nclass OptimizedStreamBotClient:\n    def __init__(self, base_url):\n        self.base_url = base_url\n        self.session = self._create_session()\n\n    def _create_session(self):\n        \"\"\"Create optimized session with connection pooling.\"\"\"\n        session = requests.Session()\n\n        # Retry strategy\n        retry_strategy = Retry(\n            total=3,\n            backoff_factor=1,\n            status_forcelist=[429, 500, 502, 503, 504],\n        )\n\n        # HTTP adapter with connection pooling\n        adapter = HTTPAdapter(\n            pool_connections=10,\n            pool_maxsize=20,\n            max_retries=retry_strategy\n        )\n\n        session.mount(\"http://\", adapter)\n        session.mount(\"https://\", adapter)\n\n        # Set default headers\n        session.headers.update({\n            'User-Agent': 'StreamBot-Client/1.0',\n            'Accept': 'application/json',\n        })\n\n        return session\n\n    def stream_with_cache(self, file_id, use_cache=True):\n        \"\"\"Stream with client-side caching.\"\"\"\n        cache_headers = {}\n        if use_cache:\n            cache_headers['Cache-Control'] = 'max-age=3600'\n\n        response = self.session.get(\n            f\"{self.base_url}/stream/{file_id}\",\n            headers=cache_headers,\n            stream=True\n        )\n        return response\n\n# Usage\nclient = OptimizedStreamBotClient(\"https://yourdomain.com\")\n</code></pre> <p>This comprehensive API examples documentation now includes all the modern StreamBot features including video streaming, range requests, frontend integration, and advanced error handling patterns. </p>"},{"location":"api/overview/","title":"StreamBot API","text":"<p>StreamBot provides a comprehensive RESTful API for interacting with the bot's functionality, monitoring system status, accessing download/streaming endpoints, and administrative features. All endpoints return JSON responses and support CORS for web application integration.</p>"},{"location":"api/overview/#api-basics","title":"API Basics","text":"<p>Base URL: <code>https://yourdomain.com</code> (configured via <code>BASE_URL</code> environment variable)</p>"},{"location":"api/overview/#authentication-methods","title":"Authentication Methods","text":"<p>The API endpoints are generally public for file access and do not require authentication:</p>"},{"location":"api/overview/#encoded-file-ids","title":"Encoded File IDs","text":"<p>File downloads and streaming use encoded message IDs for secure access control.</p> <pre><code>GET /dl/encoded_file_id HTTP/1.1\nGET /stream/encoded_file_id HTTP/1.1\nHost: yourdomain.com\n</code></pre>"},{"location":"api/overview/#rate-limiting","title":"Rate Limiting","text":"<p>All API endpoints implement rate limiting to prevent abuse:</p> <ul> <li>Standard endpoints: 60 requests per minute</li> <li>Download/streaming endpoints: 10 requests per minute</li> <li>Range requests: Additional optimizations for video streaming</li> </ul> <p>Rate limit headers are included in all responses:</p> <pre><code>X-RateLimit-Limit: 60\nX-RateLimit-Remaining: 45\nX-RateLimit-Reset: 1619135876\n</code></pre>"},{"location":"api/overview/#response-format","title":"Response Format","text":"<p>All API responses use a consistent JSON format:</p> <pre><code>{\n  \"status\": \"ok\",\n  \"data\": {\n    // Response data here\n  }\n}\n</code></pre> <p>Error responses follow this format:</p> <pre><code>{\n  \"status\": \"error\",\n  \"error\": \"Error message\",\n  \"error_code\": \"ERROR_CODE\"\n}\n</code></pre>"},{"location":"api/overview/#available-endpoints","title":"Available Endpoints","text":"Endpoint Method Description Authentication Video Support <code>/api/info</code> GET Bot status and information None \u2705 Streaming status <code>/dl/{file_id}</code> GET Download file None* \u2705 Range requests <code>/stream/{file_id}</code> GET Stream video file None* \u2705 Full streaming <p>*File downloads and streaming use encoded IDs for access control</p>"},{"location":"api/overview/#streaming-capabilities","title":"Streaming Capabilities","text":""},{"location":"api/overview/#video-streaming-endpoints","title":"Video Streaming Endpoints","text":"<p>StreamBot now provides dedicated streaming endpoints with advanced features:</p> <p>Streaming URL Format: <pre><code>GET /stream/{encoded_file_id}\n</code></pre></p> <p>Features: - Range Request Support: Full HTTP range request support for seeking - Progressive Loading: Start playback while downloading - Multiple Formats: Support for various video containers and codecs - Efficient Buffering: Optimized for video streaming performance</p> <p>Example Range Request: <pre><code>GET /stream/abc123def456 HTTP/1.1\nRange: bytes=1048576-2097152\nHost: yourdomain.com\n</code></pre></p>"},{"location":"api/overview/#download-vs-streaming","title":"Download vs Streaming","text":"Feature Download Endpoint Streaming Endpoint URL Pattern <code>/dl/{file_id}</code> <code>/stream/{file_id}</code> Purpose Full file download Progressive video streaming Range Support \u2705 Partial downloads \u2705 Video seeking Video Optimized \u274c \u2705 File Types All types Video files"},{"location":"api/overview/#http-status-codes","title":"HTTP Status Codes","text":"Code Description 200 Success 206 Partial Content (range requests) 400 Bad Request - Invalid parameters 401 Unauthorized - Missing or invalid authentication 403 Forbidden - Insufficient permissions 404 Not Found - Resource does not exist 416 Range Not Satisfiable - Invalid range request 429 Too Many Requests - Rate limit exceeded 500 Internal Server Error - Server-side error"},{"location":"api/overview/#content-types","title":"Content Types","text":"<p>The API works with the following content types:</p> <ul> <li><code>application/json</code> for API requests and responses</li> <li>Various MIME types for file downloads and streaming:</li> <li>Video: <code>video/mp4</code>, <code>video/webm</code>, <code>video/mkv</code></li> <li>Audio: <code>audio/mp3</code>, <code>audio/aac</code>, <code>audio/ogg</code></li> <li>Images: <code>image/jpeg</code>, <code>image/png</code>, <code>image/gif</code></li> <li>Documents: <code>application/pdf</code>, <code>text/plain</code>, etc.</li> <li><code>multipart/form-data</code> for file uploads (when applicable)</li> </ul>"},{"location":"api/overview/#video-streaming-features","title":"Video Streaming Features","text":""},{"location":"api/overview/#supported-video-formats","title":"Supported Video Formats","text":"<p>Container Formats: - MP4, MKV, AVI, WebM, MOV, 3GP</p> <p>Video Codecs: - H.264 (AVC), H.265 (HEVC), VP8, VP9, AV1</p> <p>Audio Codecs: - AAC, MP3, Opus, Vorbis</p>"},{"location":"api/overview/#range-request-support","title":"Range Request Support","text":"<p>StreamBot provides full HTTP range request support for efficient video streaming:</p> <pre><code># Request first 1MB of video\nRange: bytes=0-1048575\n\n# Request from 1MB to 2MB\nRange: bytes=1048576-2097151\n\n# Request from 5MB to end of file\nRange: bytes=5242880-\n</code></pre>"},{"location":"api/overview/#response-headers","title":"Response Headers","text":"<p>Streaming responses include appropriate headers:</p> <pre><code>HTTP/1.1 206 Partial Content\nContent-Type: video/mp4\nContent-Length: 1048576\nContent-Range: bytes 0-1048575/104857600\nAccept-Ranges: bytes\nCache-Control: public, max-age=3600\n</code></pre>"},{"location":"api/overview/#versioning","title":"Versioning","text":"<p>The current API version is integrated directly into the endpoints. Future versions will use the format:</p> <pre><code>/api/v2/endpoint\n</code></pre>"},{"location":"api/overview/#cross-origin-resource-sharing-cors","title":"Cross-Origin Resource Sharing (CORS)","text":"<p>The API supports CORS for web application integration. The following headers are included in responses:</p> <pre><code>Access-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: GET, POST, OPTIONS\nAccess-Control-Allow-Headers: Content-Type, Authorization, Range\nAccess-Control-Expose-Headers: Content-Range, Accept-Ranges\n</code></pre>"},{"location":"api/overview/#frontend-integration","title":"Frontend Integration","text":""},{"location":"api/overview/#video-player-integration","title":"Video Player Integration","text":"<p>StreamBot integrates with video frontends using URL parameters:</p> <pre><code>{VIDEO_FRONTEND_URL}?stream={encoded_stream_url}\n</code></pre> <p>Default Integration (Cricster): <pre><code>https://cricster.pages.dev?stream=https%3A//yourdomain.com/stream/abc123\n</code></pre></p> <p>Custom Frontend Example: <pre><code>// Extract stream URL from query parameter\nconst urlParams = new URLSearchParams(window.location.search);\nconst streamUrl = urlParams.get('stream');\n\n// Use with HTML5 video element\nconst video = document.getElementById('videoPlayer');\nvideo.src = streamUrl;\n</code></pre></p>"},{"location":"api/overview/#api-explorer","title":"API Explorer","text":"<p>Use the sections below to explore the available API endpoints in detail:</p> <ul> <li>Endpoints Reference - Detailed documentation for each endpoint</li> <li>Examples &amp; Integration - Code examples for common scenarios</li> <li>Authentication - Authentication methods and security</li> </ul>"},{"location":"api/overview/#testing-the-api","title":"Testing the API","text":"<p>You can test the API endpoints using:</p> <ul> <li>cURL: Command line HTTP client</li> <li>Postman: GUI-based API testing tool</li> <li>Your browser: For GET endpoints like <code>/api/info</code></li> <li>Programming languages: Python, JavaScript, etc.</li> </ul>"},{"location":"api/overview/#quick-test","title":"Quick Test","text":"<pre><code># Test if the API is accessible\ncurl https://yourdomain.com/api/info\n\n# Test video streaming with range request\ncurl -H \"Range: bytes=0-1048576\" https://yourdomain.com/stream/your_file_id\n\n# Test download endpoint\ncurl -O https://yourdomain.com/dl/your_file_id\n</code></pre>"},{"location":"api/overview/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api/overview/#streaming-optimization","title":"Streaming Optimization","text":"<ul> <li>Range Requests: Use range requests for efficient video seeking</li> <li>Chunk Size: Optimal chunk sizes for different network conditions</li> <li>Caching: Implement client-side caching for better performance</li> <li>CDN Integration: Use CDN for global content delivery</li> </ul>"},{"location":"api/overview/#rate-limiting_1","title":"Rate Limiting","text":"<ul> <li>Respect Limits: Stay within rate limit boundaries</li> <li>Exponential Backoff: Implement retry logic with exponential backoff</li> <li>Multiple Clients: Use multiple client tokens for higher throughput</li> </ul>"},{"location":"api/overview/#integration-examples","title":"Integration Examples","text":""},{"location":"api/overview/#video-streaming-in-web-app","title":"Video Streaming in Web App","text":"<pre><code>&lt;video id=\"videoPlayer\" controls&gt;\n    &lt;source src=\"https://yourdomain.com/stream/file_id\" type=\"video/mp4\"&gt;\n    Your browser does not support the video tag.\n&lt;/video&gt;\n\n&lt;script&gt;\nconst video = document.getElementById('videoPlayer');\n\n// Enable seeking with range requests\nvideo.addEventListener('seeking', function() {\n    console.log('Seeking to:', video.currentTime);\n});\n\n// Handle loading events\nvideo.addEventListener('loadstart', function() {\n    console.log('Started loading video');\n});\n&lt;/script&gt;\n</code></pre>"},{"location":"api/overview/#download-progress-tracking","title":"Download Progress Tracking","text":"<pre><code>async function downloadWithProgress(fileId) {\n    const response = await fetch(`https://yourdomain.com/dl/${fileId}`);\n    const contentLength = response.headers.get('Content-Length');\n    const total = parseInt(contentLength, 10);\n\n    const reader = response.body.getReader();\n    let received = 0;\n\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        received += value.length;\n        const progress = (received / total) * 100;\n        console.log(`Progress: ${progress.toFixed(1)}%`);\n    }\n}\n</code></pre> <p>This API overview provides comprehensive information about StreamBot's REST API with full video streaming support. For detailed endpoint documentation, see the Endpoints Reference. </p>"},{"location":"deployment/cloud-platforms/","title":"Cloud Platform Deployment","text":"<p>This guide covers deploying StreamBot on major cloud platforms with comprehensive instructions for each provider, including video streaming optimizations.</p>"},{"location":"deployment/cloud-platforms/#platform-comparison","title":"Platform Comparison","text":"Platform Ease of Use Cost Performance Video Streaming Free Tier Railway \u2b50\u2b50\u2b50\u2b50\u2b50 $$ \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2705 Heroku \u2b50\u2b50\u2b50\u2b50 $$$ \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2705 DigitalOcean \u2b50\u2b50\u2b50\u2b50 $$ \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u274c AWS \u2b50\u2b50\u2b50 $ \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2705 Google Cloud \u2b50\u2b50\u2b50 $$ \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2705 Render \u2b50\u2b50\u2b50\u2b50 $$ \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2705"},{"location":"deployment/cloud-platforms/#railway-recommended-for-beginners","title":"Railway (Recommended for Beginners)","text":"<p>Railway offers the simplest deployment process with excellent performance for video streaming.</p>"},{"location":"deployment/cloud-platforms/#quick-deploy","title":"Quick Deploy","text":""},{"location":"deployment/cloud-platforms/#manual-deployment","title":"Manual Deployment","text":"<ol> <li> <p>Create Railway Account: Sign up at railway.app</p> </li> <li> <p>Connect GitHub Repository:    <pre><code># Fork the repository first\ngit clone https://github.com/AnikethJana/Telegram-Download-Link-Generator.git\ncd Telegram-Download-Link-Generator\n</code></pre></p> </li> <li> <p>Create New Project in Railway dashboard</p> </li> <li> <p>Deploy from GitHub:</p> </li> <li>Connect your GitHub account</li> <li>Select the forked repository</li> <li> <p>Railway will auto-detect the Python app</p> </li> <li> <p>Configure Environment Variables:    <pre><code>API_ID=your_api_id\nAPI_HASH=your_api_hash\nBOT_TOKEN=your_bot_token\nLOG_CHANNEL=-1001234567890\nDATABASE_URL=${{MongoDB.DATABASE_URL}}\nBASE_URL=https://your-app.railway.app\nPORT=8080\nVIDEO_FRONTEND_URL=https://cricster.pages.dev\nADMINS=your_telegram_user_id\n</code></pre></p> </li> <li> <p>Add MongoDB Service:</p> </li> <li>Click \"New Service\" \u2192 \"Database\" \u2192 \"MongoDB\"</li> <li> <p>Railway will automatically provide <code>DATABASE_URL</code></p> </li> <li> <p>Custom Domain (Optional):</p> </li> <li>Go to Settings \u2192 Custom Domain</li> <li>Add your domain and configure DNS</li> </ol>"},{"location":"deployment/cloud-platforms/#railway-optimization-for-video-streaming","title":"Railway Optimization for Video Streaming","text":"<pre><code># Railway-specific optimizations\nRAILWAY_ENVIRONMENT=production\nPYTHONUNBUFFERED=1\nWEB_CONCURRENCY=4\nMAX_WORKERS=4\n\n# Video streaming optimizations\nVIDEO_CHUNK_SIZE=1048576\nSTREAM_TIMEOUT=3600\nMAX_CONCURRENT_STREAMS=50\n</code></pre>"},{"location":"deployment/cloud-platforms/#heroku","title":"Heroku","text":"<p>Heroku provides a robust platform with excellent addon ecosystem.</p>"},{"location":"deployment/cloud-platforms/#prerequisites","title":"Prerequisites","text":"<ul> <li>Heroku CLI installed</li> <li>Git repository ready</li> </ul>"},{"location":"deployment/cloud-platforms/#deployment-steps","title":"Deployment Steps","text":"<ol> <li> <p>Install Heroku CLI:    <pre><code># Windows (using Chocolatey)\nchoco install heroku-cli\n\n# macOS (using Homebrew)\nbrew tap heroku/brew &amp;&amp; brew install heroku\n\n# Ubuntu/Debian\ncurl https://cli-assets.heroku.com/install.sh | sh\n</code></pre></p> </li> <li> <p>Login and Create App:    <pre><code>heroku login\nheroku create your-streambot-app\n</code></pre></p> </li> <li> <p>Add MongoDB Addon:    <pre><code>heroku addons:create mongolab:sandbox\n</code></pre></p> </li> <li> <p>Configure Environment Variables:    <pre><code>heroku config:set API_ID=your_api_id\nheroku config:set API_HASH=your_api_hash\nheroku config:set BOT_TOKEN=your_bot_token\nheroku config:set LOG_CHANNEL=-1001234567890\nheroku config:set BASE_URL=https://your-streambot-app.herokuapp.com\nheroku config:set VIDEO_FRONTEND_URL=https://cricster.pages.dev\nheroku config:set ADMINS=your_telegram_user_id\nheroku config:set PYTHON_VERSION=3.11.0\n</code></pre></p> </li> <li> <p>Create Procfile:    <pre><code>web: python -m StreamBot\nworker: python -m StreamBot --worker-mode\n</code></pre></p> </li> <li> <p>Deploy:    <pre><code>git add .\ngit commit -m \"Deploy to Heroku\"\ngit push heroku main\n</code></pre></p> </li> <li> <p>Scale Dynos:    <pre><code>heroku ps:scale web=1 worker=1\n</code></pre></p> </li> </ol>"},{"location":"deployment/cloud-platforms/#heroku-video-streaming-configuration","title":"Heroku Video Streaming Configuration","text":"<pre><code># Configure for video streaming\nheroku config:set MAX_REQUEST_SIZE=2147483648\nheroku config:set STREAM_CHUNK_SIZE=1048576\nheroku config:set ENABLE_RANGE_REQUESTS=true\nheroku config:set VIDEO_CACHE_TTL=3600\n</code></pre>"},{"location":"deployment/cloud-platforms/#digitalocean-app-platform","title":"DigitalOcean App Platform","text":"<p>DigitalOcean App Platform offers excellent performance for video streaming with competitive pricing.</p>"},{"location":"deployment/cloud-platforms/#deployment-via-github","title":"Deployment via GitHub","text":"<ol> <li> <p>Create DigitalOcean Account: Sign up at digitalocean.com</p> </li> <li> <p>Create App:</p> </li> <li>Go to Apps \u2192 Create App</li> <li>Connect GitHub repository</li> <li> <p>Select your StreamBot repository</p> </li> <li> <p>Configure Build Settings:    <pre><code># .do/app.yaml\nname: streambot\nservices:\n- name: web\n  source_dir: /\n  github:\n    repo: your-username/Telegram-Download-Link-Generator\n    branch: main\n  run_command: python -m StreamBot\n  environment_slug: python\n  instance_count: 1\n  instance_size_slug: basic-xxs\n  http_port: 8080\n  routes:\n  - path: /\ndatabases:\n- name: mongodb\n  engine: MONGODB\n  version: \"5\"\n</code></pre></p> </li> <li> <p>Environment Variables:    <pre><code>API_ID=${API_ID}\nAPI_HASH=${API_HASH}\nBOT_TOKEN=${BOT_TOKEN}\nLOG_CHANNEL=${LOG_CHANNEL}\nDATABASE_URL=${mongodb.DATABASE_URL}\nBASE_URL=https://your-app.ondigitalocean.app\nVIDEO_FRONTEND_URL=https://cricster.pages.dev\nADMINS=${ADMINS}\n</code></pre></p> </li> </ol>"},{"location":"deployment/cloud-platforms/#digitalocean-cdn-for-video-streaming","title":"DigitalOcean CDN for Video Streaming","text":"<pre><code># Enable CDN for better video streaming\ncurl -X POST \\\n  https://api.digitalocean.com/v2/cdn/endpoints \\\n  -H \"Authorization: Bearer $DO_API_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"origin\": \"your-app.ondigitalocean.app\",\n    \"ttl\": 3600,\n    \"custom_domain\": \"cdn.yourdomain.com\"\n  }'\n</code></pre>"},{"location":"deployment/cloud-platforms/#amazon-web-services-aws","title":"Amazon Web Services (AWS)","text":"<p>AWS provides the most comprehensive cloud infrastructure with global CDN for optimal video streaming.</p>"},{"location":"deployment/cloud-platforms/#aws-elastic-beanstalk-deployment","title":"AWS Elastic Beanstalk Deployment","text":"<ol> <li> <p>Install AWS CLI and EB CLI:    <pre><code>pip install awscli awsebcli\naws configure\n</code></pre></p> </li> <li> <p>Initialize Elastic Beanstalk:    <pre><code>eb init streambot --platform python-3.11 --region us-east-1\n</code></pre></p> </li> <li> <p>Create Environment:    <pre><code>eb create streambot-production\n</code></pre></p> </li> <li> <p>Configure Environment Variables:    <pre><code>eb setenv API_ID=your_api_id \\\n         API_HASH=your_api_hash \\\n         BOT_TOKEN=your_bot_token \\\n         LOG_CHANNEL=-1001234567890 \\\n         DATABASE_URL=mongodb://your-mongodb-url \\\n         VIDEO_FRONTEND_URL=https://cricster.pages.dev \\\n         ADMINS=your_telegram_user_id\n</code></pre></p> </li> <li> <p>Deploy:    <pre><code>eb deploy\n</code></pre></p> </li> </ol>"},{"location":"deployment/cloud-platforms/#aws-documentdb-mongodb-compatible","title":"AWS DocumentDB (MongoDB Compatible)","text":"<pre><code># Create DocumentDB cluster\naws docdb create-db-cluster \\\n    --db-cluster-identifier streambot-cluster \\\n    --engine docdb \\\n    --master-username admin \\\n    --master-user-password your-secure-password \\\n    --vpc-security-group-ids sg-xxxxxxxx\n</code></pre>"},{"location":"deployment/cloud-platforms/#aws-cloudfront-for-video-streaming","title":"AWS CloudFront for Video Streaming","text":"<pre><code>{\n  \"DistributionConfig\": {\n    \"CallerReference\": \"streambot-cdn\",\n    \"DefaultRootObject\": \"index.html\",\n    \"Origins\": {\n      \"Quantity\": 1,\n      \"Items\": [\n        {\n          \"Id\": \"streambot-origin\",\n          \"DomainName\": \"your-app.elasticbeanstalk.com\",\n          \"CustomOriginConfig\": {\n            \"HTTPPort\": 80,\n            \"HTTPSPort\": 443,\n            \"OriginProtocolPolicy\": \"https-only\"\n          }\n        }\n      ]\n    },\n    \"DefaultCacheBehavior\": {\n      \"TargetOriginId\": \"streambot-origin\",\n      \"ViewerProtocolPolicy\": \"redirect-to-https\",\n      \"CachePolicyId\": \"4135ea2d-6df8-44a3-9df3-4b5a84be39ad\",\n      \"Compress\": true\n    }\n  }\n}\n</code></pre>"},{"location":"deployment/cloud-platforms/#google-cloud-platform-gcp","title":"Google Cloud Platform (GCP)","text":"<p>GCP offers excellent global infrastructure with competitive pricing for video streaming.</p>"},{"location":"deployment/cloud-platforms/#google-cloud-run-deployment","title":"Google Cloud Run Deployment","text":"<ol> <li> <p>Install Google Cloud SDK:    <pre><code># Linux/macOS\ncurl https://sdk.cloud.google.com | bash\n\n# Windows\n# Download and install from cloud.google.com/sdk\n</code></pre></p> </li> <li> <p>Initialize Project:    <pre><code>gcloud auth login\ngcloud config set project your-project-id\ngcloud services enable run.googleapis.com\n</code></pre></p> </li> <li> <p>Create Dockerfile (if not exists):    <pre><code>FROM python:3.11-slim\n\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\n\nCMD [\"python\", \"-m\", \"StreamBot\"]\n</code></pre></p> </li> <li> <p>Build and Deploy:    <pre><code>gcloud builds submit --tag gcr.io/your-project-id/streambot\ngcloud run deploy streambot \\\n  --image gcr.io/your-project-id/streambot \\\n  --platform managed \\\n  --region us-central1 \\\n  --allow-unauthenticated \\\n  --memory 2Gi \\\n  --cpu 2 \\\n  --max-instances 10\n</code></pre></p> </li> <li> <p>Set Environment Variables:    <pre><code>gcloud run services update streambot \\\n  --set-env-vars=\"API_ID=your_api_id,API_HASH=your_api_hash,BOT_TOKEN=your_bot_token,LOG_CHANNEL=-1001234567890,VIDEO_FRONTEND_URL=https://cricster.pages.dev\"\n</code></pre></p> </li> </ol>"},{"location":"deployment/cloud-platforms/#google-cloud-cdn-for-video-streaming","title":"Google Cloud CDN for Video Streaming","text":"<pre><code># Create Cloud CDN\ngcloud compute backend-services create streambot-backend \\\n    --global \\\n    --load-balancing-scheme=EXTERNAL\n\ngcloud compute url-maps create streambot-map \\\n    --default-service streambot-backend\n\ngcloud compute target-https-proxies create streambot-proxy \\\n    --url-map streambot-map \\\n    --ssl-certificates streambot-ssl\n</code></pre>"},{"location":"deployment/cloud-platforms/#render","title":"Render","text":"<p>Render provides a modern platform with automatic SSL and easy deployments.</p>"},{"location":"deployment/cloud-platforms/#render-deployment","title":"Render Deployment","text":"<ol> <li> <p>Connect GitHub: Link your GitHub account to Render</p> </li> <li> <p>Create Web Service:</p> </li> <li>Select your repository</li> <li>Choose \"Web Service\"</li> <li> <p>Configure build settings:</p> </li> <li> <p>Build Configuration:    <pre><code># render.yaml\nservices:\n  - type: web\n    name: streambot\n    env: python\n    buildCommand: pip install -r requirements.txt\n    startCommand: python -m StreamBot\n    envVars:\n      - key: API_ID\n        value: your_api_id\n      - key: API_HASH\n        value: your_api_hash\n      - key: BOT_TOKEN\n        value: your_bot_token\n      - key: LOG_CHANNEL\n        value: -1001234567890\n      - key: VIDEO_FRONTEND_URL\n        value: https://cricster.pages.dev\n      - key: DATABASE_URL\n        fromDatabase:\n          name: streambot-db\n          property: connectionString\n\ndatabases:\n  - name: streambot-db\n    databaseName: streambot\n    user: streambot\n</code></pre></p> </li> <li> <p>Auto-Deploy: Render automatically deploys on git push</p> </li> </ol>"},{"location":"deployment/cloud-platforms/#video-streaming-optimizations","title":"Video Streaming Optimizations","text":""},{"location":"deployment/cloud-platforms/#cdn-configuration","title":"CDN Configuration","text":"<p>For optimal video streaming performance across all platforms:</p> <pre><code># Nginx configuration for video streaming\nlocation /stream/ {\n    proxy_pass http://localhost:8080;\n    proxy_buffering off;\n    proxy_request_buffering off;\n    proxy_http_version 1.1;\n    proxy_set_header Connection \"\";\n\n    # Enable range requests\n    proxy_set_header Range $http_range;\n    proxy_set_header If-Range $http_if_range;\n\n    # Optimize for video streaming\n    proxy_cache_bypass $http_range;\n    proxy_no_cache $http_range;\n}\n</code></pre>"},{"location":"deployment/cloud-platforms/#environment-variables-for-video-streaming","title":"Environment Variables for Video Streaming","text":"<pre><code># Video streaming optimizations (all platforms)\nVIDEO_CHUNK_SIZE=1048576\nMAX_CONCURRENT_STREAMS=50\nSTREAM_TIMEOUT=3600\nENABLE_RANGE_REQUESTS=true\nVIDEO_CACHE_TTL=3600\nCORS_ORIGINS=https://cricster.pages.dev,https://yourdomain.com\n</code></pre>"},{"location":"deployment/cloud-platforms/#cost-optimization","title":"Cost Optimization","text":""},{"location":"deployment/cloud-platforms/#free-tier-recommendations","title":"Free Tier Recommendations","text":"<ol> <li>Development: Railway or Render free tier</li> <li>Small Production: Heroku hobby tier</li> <li>High Traffic: DigitalOcean or AWS with reserved instances</li> </ol>"},{"location":"deployment/cloud-platforms/#cost-monitoring","title":"Cost Monitoring","text":"<pre><code># Set up billing alerts (AWS example)\naws budgets create-budget \\\n    --account-id 123456789012 \\\n    --budget '{\n        \"BudgetName\": \"StreamBot Monthly Budget\",\n        \"BudgetLimit\": {\n            \"Amount\": \"50\",\n            \"Unit\": \"USD\"\n        },\n        \"TimeUnit\": \"MONTHLY\",\n        \"BudgetType\": \"COST\"\n    }'\n</code></pre>"},{"location":"deployment/cloud-platforms/#monitoring-and-scaling","title":"Monitoring and Scaling","text":""},{"location":"deployment/cloud-platforms/#health-checks","title":"Health Checks","text":"<p>All platforms should monitor these endpoints:</p> <pre><code># Health check endpoint\ncurl https://your-app.com/api/info\n\n# Video streaming health\ncurl -I https://your-app.com/stream/test\n</code></pre>"},{"location":"deployment/cloud-platforms/#auto-scaling-configuration","title":"Auto-Scaling Configuration","text":"<pre><code># Kubernetes auto-scaling example\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: streambot-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: streambot\n  minReplicas: 2\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n</code></pre>"},{"location":"deployment/cloud-platforms/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/cloud-platforms/#common-deployment-issues","title":"Common Deployment Issues","text":"<p>Build Failures: <pre><code># Check Python version\npython --version  # Should be 3.11+\n\n# Install dependencies locally first\npip install -r requirements.txt\n</code></pre></p> <p>Environment Variable Issues: <pre><code># Test environment variables\npython -c \"import os; print(os.getenv('BOT_TOKEN'))\"\n</code></pre></p> <p>Video Streaming Issues: <pre><code># Test streaming endpoint\ncurl -I https://your-app.com/stream/test\ncurl -H \"Range: bytes=0-1023\" https://your-app.com/stream/test\n</code></pre></p>"},{"location":"deployment/cloud-platforms/#performance-optimization","title":"Performance Optimization","text":"<pre><code># Add to your deployment configuration\nimport os\n\n# Optimize for cloud deployment\nif os.getenv('CLOUD_PROVIDER') == 'heroku':\n    # Heroku-specific optimizations\n    MAX_WORKERS = int(os.getenv('WEB_CONCURRENCY', 4))\n    WORKER_TIMEOUT = 120\n\nelif os.getenv('CLOUD_PROVIDER') == 'aws':\n    # AWS-specific optimizations\n    MAX_WORKERS = int(os.getenv('AWS_LAMBDA_FUNCTION_MEMORY_SIZE', 512)) // 128\n\nelif os.getenv('CLOUD_PROVIDER') == 'gcp':\n    # GCP-specific optimizations\n    MAX_WORKERS = int(os.getenv('CLOUD_RUN_CPU', 1)) * 2\n</code></pre>"},{"location":"deployment/cloud-platforms/#next-steps","title":"Next Steps","text":"<p>After deployment:</p> <ol> <li>Configure Custom Domain: Set up your own domain for better branding</li> <li>Enable HTTPS: Ensure SSL certificates are properly configured</li> <li>Set Up Monitoring: Configure uptime monitoring and alerts</li> <li>Optimize Performance: Implement CDN and caching strategies</li> <li>Security Hardening: Follow security best practices for your platform</li> <li>Backup Strategy: Set up automated backups for your database</li> </ol> <p>For platform-specific advanced configurations, refer to: - Docker Deployment for containerized deployments - VPS Setup for self-hosted solutions - Security Configuration for hardening your deployment</p> <p>These comprehensive cloud deployment guides are currently in development. Stay tuned for detailed instructions! </p>"},{"location":"deployment/docker/","title":"Docker Deployment","text":"<p>Docker provides an easy way to deploy StreamBot with all dependencies included. This guide covers both Docker and Docker Compose deployment methods.</p>"},{"location":"deployment/docker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker 20.10+ installed</li> <li>Docker Compose v2.0+ (if using compose method)</li> <li>Git for cloning the repository</li> </ul>"},{"location":"deployment/docker/#method-1-docker-compose-recommended","title":"Method 1: Docker Compose (Recommended)","text":"<p>Docker Compose is the easiest way to deploy StreamBot with MongoDB included.</p>"},{"location":"deployment/docker/#1-clone-repository","title":"1. Clone Repository","text":"<pre><code>git clone https://github.com/yourusername/StreamBot.git\ncd StreamBot\n</code></pre>"},{"location":"deployment/docker/#2-create-environment-file","title":"2. Create Environment File","text":"<pre><code>cp .env.example .env\n</code></pre> <p>Edit <code>.env</code> with your configuration:</p> <pre><code># Telegram Configuration\nAPI_ID=your_api_id\nAPI_HASH=your_api_hash\nBOT_TOKEN=your_bot_token\nLOG_CHANNEL=-1001234567890\n\n# Database (MongoDB container)\nDATABASE_URL=mongodb://mongodb:27017\nDATABASE_NAME=StreamBotDB\n\n# Server Configuration\nBASE_URL=https://yourdomain.com\nPORT=8080\nBIND_ADDRESS=0.0.0.0\n\n# Admin Configuration\nADMINS=your_telegram_user_id\n</code></pre>"},{"location":"deployment/docker/#3-create-docker-compose-file","title":"3. Create Docker Compose File","text":"<p>Create <code>docker-compose.yml</code>:</p> <pre><code>version: '3.8'\n\nservices:\n  streambot:\n    build: .\n    container_name: streambot\n    restart: unless-stopped\n    ports:\n      - \"8080:8080\"\n    environment:\n      - DATABASE_URL=mongodb://mongodb:27017\n    env_file:\n      - .env\n    depends_on:\n      - mongodb\n    volumes:\n      - ./sessions:/app/sessions\n    networks:\n      - streambot-network\n\n  mongodb:\n    image: mongo:6.0\n    container_name: streambot-mongodb\n    restart: unless-stopped\n    ports:\n      - \"27017:27017\"\n    volumes:\n      - mongodb_data:/data/db\n    environment:\n      - MONGO_INITDB_DATABASE=StreamBotDB\n    networks:\n      - streambot-network\n\nvolumes:\n  mongodb_data:\n\nnetworks:\n  streambot-network:\n    driver: bridge\n</code></pre>"},{"location":"deployment/docker/#4-deploy","title":"4. Deploy","text":"<pre><code># Build and start services\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f streambot\n\n# Stop services\ndocker-compose down\n</code></pre>"},{"location":"deployment/docker/#method-2-docker-only","title":"Method 2: Docker Only","text":"<p>If you have an existing MongoDB instance, you can run just the StreamBot container.</p>"},{"location":"deployment/docker/#1-build-image","title":"1. Build Image","text":"<pre><code># Clone repository\ngit clone https://github.com/yourusername/StreamBot.git\ncd StreamBot\n\n# Build Docker image\ndocker build -t streambot:latest .\n</code></pre>"},{"location":"deployment/docker/#2-run-container","title":"2. Run Container","text":"<pre><code>docker run -d \\\n  --name streambot \\\n  --restart unless-stopped \\\n  -p 8080:8080 \\\n  --env-file .env \\\n  -v $(pwd)/sessions:/app/sessions \\\n  streambot:latest\n</code></pre>"},{"location":"deployment/docker/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"deployment/docker/#production-docker-compose","title":"Production Docker Compose","text":"<p>For production deployment with additional services:</p> <pre><code>version: '3.8'\n\nservices:\n  streambot:\n    build: .\n    container_name: streambot\n    restart: unless-stopped\n    environment:\n      - DATABASE_URL=mongodb://mongodb:27017\n    env_file:\n      - .env\n    depends_on:\n      - mongodb\n    volumes:\n      - ./sessions:/app/sessions\n      - ./logs:/app/logs\n    networks:\n      - streambot-network\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.streambot.rule=Host(`files.yourdomain.com`)\"\n      - \"traefik.http.routers.streambot.tls.certresolver=letsencrypt\"\n\n  mongodb:\n    image: mongo:6.0\n    container_name: streambot-mongodb\n    restart: unless-stopped\n    volumes:\n      - mongodb_data:/data/db\n      - ./backups:/backups\n    environment:\n      - MONGO_INITDB_DATABASE=StreamBotDB\n    networks:\n      - streambot-network\n\n  nginx:\n    image: nginx:alpine\n    container_name: streambot-nginx\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - streambot\n    networks:\n      - streambot-network\n\nvolumes:\n  mongodb_data:\n\nnetworks:\n  streambot-network:\n    driver: bridge\n</code></pre>"},{"location":"deployment/docker/#environment-variables-for-docker","title":"Environment Variables for Docker","text":"<pre><code># Docker-specific settings\nBIND_ADDRESS=0.0.0.0\nDATABASE_URL=mongodb://mongodb:27017\n\n# Production settings\nWORKERS=4\nSESSION_NAME=StreamBotProd\n</code></pre>"},{"location":"deployment/docker/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":""},{"location":"deployment/docker/#view-logs","title":"View Logs","text":"<pre><code># StreamBot logs\ndocker-compose logs -f streambot\n\n# MongoDB logs\ndocker-compose logs -f mongodb\n\n# All services\ndocker-compose logs -f\n</code></pre>"},{"location":"deployment/docker/#health-checks","title":"Health Checks","text":"<p>Add health checks to your <code>docker-compose.yml</code>:</p> <pre><code>services:\n  streambot:\n    # ... other configuration\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/api/info\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n</code></pre>"},{"location":"deployment/docker/#backup-mongodb","title":"Backup MongoDB","text":"<pre><code># Create backup\ndocker exec streambot-mongodb mongodump --db StreamBotDB --out /backups/$(date +%Y%m%d_%H%M%S)\n\n# Restore backup\ndocker exec streambot-mongodb mongorestore --db StreamBotDB /backups/backup_folder\n</code></pre>"},{"location":"deployment/docker/#update-deployment","title":"Update Deployment","text":"<pre><code># Pull latest changes\ngit pull origin main\n\n# Rebuild and restart\ndocker-compose down\ndocker-compose build --no-cache\ndocker-compose up -d\n</code></pre>"},{"location":"deployment/docker/#reverse-proxy-configuration","title":"Reverse Proxy Configuration","text":""},{"location":"deployment/docker/#nginx-configuration","title":"Nginx Configuration","text":"<p>Create <code>nginx.conf</code>:</p> <pre><code>events {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream streambot {\n        server streambot:8080;\n    }\n\n    server {\n        listen 80;\n        server_name files.yourdomain.com;\n\n        # Redirect HTTP to HTTPS\n        return 301 https://$server_name$request_uri;\n    }\n\n    server {\n        listen 443 ssl http2;\n        server_name files.yourdomain.com;\n\n        ssl_certificate /etc/nginx/ssl/cert.pem;\n        ssl_certificate_key /etc/nginx/ssl/key.pem;\n\n        client_max_body_size 2G;\n\n        location / {\n            proxy_pass http://streambot;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n}\n</code></pre>"},{"location":"deployment/docker/#traefik-configuration","title":"Traefik Configuration","text":"<pre><code>version: '3.8'\n\nservices:\n  traefik:\n    image: traefik:v2.9\n    container_name: traefik\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./traefik.yml:/etc/traefik/traefik.yml\n      - ./acme.json:/acme.json\n    networks:\n      - streambot-network\n\n  streambot:\n    # ... existing configuration\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.streambot.rule=Host(`files.yourdomain.com`)\"\n      - \"traefik.http.routers.streambot.tls.certresolver=letsencrypt\"\n</code></pre>"},{"location":"deployment/docker/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/docker/#common-issues","title":"Common Issues","text":"<p>Container won't start: <pre><code># Check logs for errors\ndocker-compose logs streambot\n\n# Verify environment variables\ndocker-compose exec streambot env | grep -E \"(API_ID|BOT_TOKEN|DATABASE_URL)\"\n</code></pre></p> <p>Database connection fails: <pre><code># Check MongoDB status\ndocker-compose exec mongodb mongo --eval \"db.adminCommand('ismaster')\"\n\n# Verify network connectivity\ndocker-compose exec streambot ping mongodb\n</code></pre></p> <p>Permission issues: <pre><code># Fix session directory permissions\nsudo chown -R 1000:1000 sessions/\n\n# Fix log directory permissions\nsudo chown -R 1000:1000 logs/\n</code></pre></p>"},{"location":"deployment/docker/#performance-tuning","title":"Performance Tuning","text":"<pre><code>services:\n  streambot:\n    # ... other configuration\n    deploy:\n      resources:\n        limits:\n          cpus: '2.0'\n          memory: 1G\n        reservations:\n          cpus: '0.5'\n          memory: 512M\n</code></pre>"},{"location":"deployment/docker/#security-considerations","title":"Security Considerations","text":""},{"location":"deployment/docker/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use secrets for sensitive data: <pre><code>secrets:\n  bot_token:\n    file: ./secrets/bot_token.txt\n\nservices:\n  streambot:\n    secrets:\n      - bot_token\n</code></pre></p> </li> <li> <p>Limit container capabilities: <pre><code>services:\n  streambot:\n    cap_drop:\n      - ALL\n    cap_add:\n      - CHOWN\n      - SETUID\n      - SETGID\n</code></pre></p> </li> <li> <p>Use non-root user: <pre><code>FROM python:3.9-slim\nRUN useradd -m -s /bin/bash streambot\nUSER streambot\n# ... rest of Dockerfile\n</code></pre></p> </li> </ol> <p>This Docker deployment method provides a robust, scalable way to run StreamBot in production environments. </p>"},{"location":"deployment/overview/","title":"Deployment Overview","text":"<p>StreamBot is a highly flexible application that can be deployed in various environments. This guide helps you choose the best deployment method for your needs.</p>"},{"location":"deployment/overview/#prerequisites","title":"Prerequisites","text":"<p>Before deploying StreamBot, ensure you have:</p> <ul> <li>Python 3.11 or higher installed</li> <li>MongoDB 4.4+ (local or cloud instance like MongoDB Atlas)</li> <li>Telegram Bot Token from @BotFather</li> <li>Telegram API credentials from my.telegram.org</li> <li>Domain name with SSL certificate (for production)</li> <li>Sufficient storage for temporary file caching</li> <li>Adequate bandwidth for video streaming capabilities</li> </ul>"},{"location":"deployment/overview/#system-requirements","title":"System Requirements","text":""},{"location":"deployment/overview/#minimum-requirements","title":"Minimum Requirements","text":"Resource Requirement Notes CPU 1 vCPU For basic usage RAM 512 MB Minimum for bot operation Storage 5 GB For application and logs Bandwidth 100 Mbps For download/streaming functionality OS Linux/Windows/macOS Ubuntu 20.04+ recommended"},{"location":"deployment/overview/#recommended-requirements","title":"Recommended Requirements","text":"Resource Requirement Notes CPU 2+ vCPU For optimal video streaming performance RAM 2 GB+ Better for multiple concurrent streams Storage 20 GB+ For caching and better performance Bandwidth 1 Gbps+ For high-quality video streaming OS Ubuntu 22.04 LTS Most tested environment"},{"location":"deployment/overview/#deployment-methods","title":"Deployment Methods","text":"<ul> <li> <p> Docker Deployment</p> <p>The easiest and most reliable way to deploy StreamBot with consistent environments and easy scaling.</p> <p> Docker Guide</p> </li> <li> <p> Cloud Platforms</p> <p>Deploy on popular cloud platforms like AWS, Google Cloud, DigitalOcean, or Railway with pre-configured templates.</p> <p> Cloud Guide</p> </li> <li> <p> VPS/Dedicated Server</p> <p>Full control deployment on your own Virtual Private Server or dedicated hardware.</p> <p> VPS Guide</p> </li> <li> <p> Development Setup</p> <p>Local development environment for testing and customization.</p> <p> Dev Guide</p> </li> </ul>"},{"location":"deployment/overview/#quick-deployment-options","title":"Quick Deployment Options","text":""},{"location":"deployment/overview/#1-docker-recommended","title":"1. Docker (Recommended)","text":"<p>Best for: Production deployments, consistent environments, easy updates</p> <pre><code># Clone repository\ngit clone https://github.com/AnikethJana/Telegram-Download-Link-Generator.git\ncd Telegram-Download-Link-Generator\n\n# Configure environment\ncp .env.example .env\n# Edit .env with your credentials\n\n# Deploy with Docker Compose\ndocker-compose up -d\n</code></pre> <p>Advantages: - \u2705 Consistent environment across platforms - \u2705 Easy updates and rollbacks - \u2705 Isolated dependencies - \u2705 Built-in health checks - \u2705 Simple scaling with compose - \u2705 Video streaming optimized configuration</p>"},{"location":"deployment/overview/#2-cloud-platform-one-click","title":"2. Cloud Platform (One-Click)","text":"<p>Best for: Beginners, quick setup, managed infrastructure</p> <p>Supported Platforms: - Railway (One-click deploy) - Heroku (Buildpack available) - DigitalOcean App Platform - Google Cloud Run - AWS Elastic Beanstalk</p> <p>Railway Quick Deploy: </p>"},{"location":"deployment/overview/#3-vpsserver","title":"3. VPS/Server","text":"<p>Best for: Custom configurations, high performance, full control</p> <pre><code># Install dependencies\nsudo apt update &amp;&amp; sudo apt install python3.11 python3.11-pip mongodb\n\n# Clone and setup\ngit clone https://github.com/AnikethJana/Telegram-Download-Link-Generator.git\ncd Telegram-Download-Link-Generator\npip install -r requirements.txt\n\n# Configure and run\ncp .env.example .env\n# Edit .env file\npython -m StreamBot\n</code></pre>"},{"location":"deployment/overview/#environment-configuration","title":"Environment Configuration","text":""},{"location":"deployment/overview/#required-environment-variables","title":"Required Environment Variables","text":"<pre><code># Telegram Configuration\nAPI_ID=12345678\nAPI_HASH=your_api_hash_from_my_telegram_org\nBOT_TOKEN=123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi\nLOG_CHANNEL=-1001234567890\n\n# Database\nDATABASE_URL=mongodb://localhost:27017/streambot\n\n# Server Configuration\nBASE_URL=https://yourdomain.com\nPORT=8080\n\n# Video Streaming (NEW)\nVIDEO_FRONTEND_URL=https://cricster.pages.dev\n# Set to 'false' to disable video frontend\n\n# Optional Features\nFORCE_SUB_CHANNELS=-1001234567890\nLINK_EXPIRY_DURATION=86400\nMONTHLY_BANDWIDTH_LIMIT_GB=100\nUSERS_DAILY_LIMIT=5\n</code></pre>"},{"location":"deployment/overview/#video-streaming-configuration","title":"Video Streaming Configuration","text":"<p>StreamBot now includes advanced video streaming capabilities:</p> <p>Default Configuration: - Video Frontend: <code>https://cricster.pages.dev</code> (automatically enabled) - Range Requests: Fully supported for seeking - Supported Formats: MP4, MKV, AVI, WebM, MOV - Streaming Optimization: Automatic buffering and progressive loading</p> <p>To disable video frontend: <pre><code>VIDEO_FRONTEND_URL=false\n</code></pre></p> <p>To use custom video frontend: <pre><code>VIDEO_FRONTEND_URL=https://your-custom-player.pages.dev\n</code></pre></p>"},{"location":"deployment/overview/#performance-considerations","title":"Performance Considerations","text":""},{"location":"deployment/overview/#video-streaming-optimization","title":"Video Streaming Optimization","text":"<p>For optimal video streaming performance:</p> <p>Server Configuration: - Use SSD storage for faster I/O - Configure adequate RAM for file caching - Ensure high bandwidth capacity - Use CDN for global content delivery</p> <p>Network Optimization: - Enable HTTP/2 for better streaming - Configure proper caching headers - Use compression for metadata - Implement rate limiting for stream protection</p>"},{"location":"deployment/overview/#resource-planning","title":"Resource Planning","text":"<p>Concurrent Users Estimation:</p> Users CPU RAM Bandwidth Storage 1-100 1 vCPU 1 GB 100 Mbps 10 GB 100-500 2 vCPU 2 GB 500 Mbps 20 GB 500-1000 4 vCPU 4 GB 1 Gbps 50 GB 1000+ 8+ vCPU 8+ GB 2+ Gbps 100+ GB <p>Video Streaming Specific: - Each active stream: ~50-100 MB RAM - HD video streaming: ~5-10 Mbps per user - 4K video streaming: ~25-40 Mbps per user</p>"},{"location":"deployment/overview/#security-considerations","title":"Security Considerations","text":""},{"location":"deployment/overview/#essential-security-measures","title":"Essential Security Measures","text":"<ol> <li>SSL/TLS Certificate: Required for production deployment</li> <li>Environment Variables: Keep credentials secure and never commit them</li> <li>Rate Limiting: Prevent abuse with proper limits</li> <li>Access Control: Use force subscription and admin controls</li> <li>Regular Updates: Keep dependencies and base images updated</li> <li>Video Frontend Security: Validate streaming URLs and implement CORS properly</li> </ol>"},{"location":"deployment/overview/#network-security","title":"Network Security","text":"<pre><code># Example Nginx configuration for video streaming\nserver {\n    listen 443 ssl http2;\n    server_name yourdomain.com;\n\n    # SSL configuration\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/key.pem;\n\n    # Proxy to StreamBot\n    location / {\n        proxy_pass http://localhost:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n\n    # Optimize for video streaming\n    location /stream/ {\n        proxy_pass http://localhost:8080;\n        proxy_buffering off;\n        proxy_request_buffering off;\n        proxy_http_version 1.1;\n        proxy_set_header Connection \"\";\n    }\n}\n</code></pre>"},{"location":"deployment/overview/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":""},{"location":"deployment/overview/#health-checks","title":"Health Checks","text":"<p>StreamBot provides several endpoints for monitoring:</p> <pre><code># Basic health check\ncurl https://yourdomain.com/api/info\n\n# Check streaming service\ncurl -I https://yourdomain.com/stream/test\n\n# Memory and performance\ncurl https://yourdomain.com/api/info | jq '.streaming_info'\n</code></pre>"},{"location":"deployment/overview/#log-monitoring","title":"Log Monitoring","text":"<pre><code># Docker logs\ndocker logs streambot-app -f\n\n# File logs (if configured)\ntail -f logs/streambot.log\n\n# Filter for errors\ndocker logs streambot-app 2&gt;&amp;1 | grep ERROR\n</code></pre>"},{"location":"deployment/overview/#backup-strategy","title":"Backup Strategy","text":"<p>Critical Data to Backup: - Environment configuration (<code>.env</code>) - MongoDB database - Application logs - SSL certificates - Custom configurations</p> <p>Automated Backup Script: <pre><code>#!/bin/bash\n# backup.sh\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_DIR=\"/backups/$DATE\"\n\n# Create backup directory\nmkdir -p $BACKUP_DIR\n\n# Backup MongoDB\nmongodump --db streambot --out $BACKUP_DIR/mongodb\n\n# Backup configuration\ncp .env $BACKUP_DIR/\ncp docker-compose.yml $BACKUP_DIR/\n\n# Compress\ntar -czf \"backup_$DATE.tar.gz\" -C /backups $DATE\nrm -rf $BACKUP_DIR\n\necho \"Backup completed: backup_$DATE.tar.gz\"\n</code></pre></p>"},{"location":"deployment/overview/#scaling-considerations","title":"Scaling Considerations","text":""},{"location":"deployment/overview/#horizontal-scaling","title":"Horizontal Scaling","text":"<p>For high-traffic deployments:</p> <ol> <li>Load Balancer: Distribute traffic across multiple instances</li> <li>Database Clustering: Use MongoDB replica sets</li> <li>CDN Integration: Offload static content and video streaming</li> <li>Caching Layer: Implement Redis for session management</li> <li>Queue System: Use Celery for background processing</li> </ol>"},{"location":"deployment/overview/#multi-region-deployment","title":"Multi-Region Deployment","text":"<pre><code># docker-compose.prod.yml example\nversion: '3.8'\nservices:\n  streambot-us:\n    image: streambot:latest\n    environment:\n      - REGION=us-east-1\n      - VIDEO_CDN_URL=https://us.yourcdn.com\n\n  streambot-eu:\n    image: streambot:latest\n    environment:\n      - REGION=eu-west-1\n      - VIDEO_CDN_URL=https://eu.yourcdn.com\n\n  nginx-lb:\n    image: nginx:alpine\n    ports:\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n</code></pre>"},{"location":"deployment/overview/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/overview/#common-deployment-issues","title":"Common Deployment Issues","text":"<p>Port Conflicts: <pre><code># Check port usage\nnetstat -tulpn | grep :8080\n\n# Change port in .env\nPORT=8081\n</code></pre></p> <p>Permission Issues: <pre><code># Fix file permissions\nchmod +x StreamBot/__main__.py\nchown -R $USER:$USER .\n</code></pre></p> <p>MongoDB Connection: <pre><code># Test MongoDB connection\nmongosh \"mongodb://localhost:27017/streambot\"\n\n# Check MongoDB logs\nsudo journalctl -u mongodb\n</code></pre></p> <p>Video Streaming Issues: <pre><code># Test streaming endpoint\ncurl -I https://yourdomain.com/stream/test\n\n# Check video frontend URL\ncurl -I https://cricster.pages.dev\n\n# Verify CORS headers\ncurl -H \"Origin: https://cricster.pages.dev\" \\\n     -H \"Access-Control-Request-Method: GET\" \\\n     -X OPTIONS https://yourdomain.com/stream/test\n</code></pre></p>"},{"location":"deployment/overview/#next-steps","title":"Next Steps","text":"<ol> <li>Choose your deployment method from the options above</li> <li>Follow the specific guide for your chosen platform</li> <li>Configure security measures including SSL and rate limiting</li> <li>Set up monitoring and backup procedures</li> <li>Test video streaming functionality thoroughly</li> <li>Scale as your user base grows</li> </ol> <p>For detailed platform-specific instructions, see: - Docker Deployment - Cloud Platform Setup - VPS Configuration - Security Best Practices </p>"},{"location":"deployment/security/","title":"Security Configuration","text":"<p>This comprehensive guide provides security guidelines and best practices for production StreamBot deployments, including video streaming security considerations.</p>"},{"location":"deployment/security/#complete-security-implementation-guide","title":"Complete Security Implementation Guide","text":""},{"location":"deployment/security/#server-security","title":"Server Security","text":""},{"location":"deployment/security/#operating-system-hardening","title":"Operating System Hardening","text":"<p>Ubuntu/Debian Hardening: <pre><code># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install security updates automatically\nsudo apt install unattended-upgrades -y\nsudo dpkg-reconfigure -plow unattended-upgrades\n\n# Disable unnecessary services\nsudo systemctl disable bluetooth\nsudo systemctl disable cups\nsudo systemctl disable avahi-daemon\n\n# Configure automatic security updates\necho 'Unattended-Upgrade::Automatic-Reboot \"false\";' | sudo tee -a /etc/apt/apt.conf.d/20auto-upgrades\necho 'Unattended-Upgrade::Remove-Unused-Dependencies \"true\";' | sudo tee -a /etc/apt/apt.conf.d/20auto-upgrades\n</code></pre></p> <p>System Hardening Configuration: <pre><code># Configure kernel parameters for security\nsudo nano /etc/sysctl.conf\n</code></pre></p> <pre><code># Network security\nnet.ipv4.conf.default.rp_filter = 1\nnet.ipv4.conf.all.rp_filter = 1\nnet.ipv4.conf.all.accept_redirects = 0\nnet.ipv6.conf.all.accept_redirects = 0\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.all.accept_source_route = 0\nnet.ipv6.conf.all.accept_source_route = 0\nnet.ipv4.conf.all.log_martians = 1\nnet.ipv4.icmp_echo_ignore_broadcasts = 1\nnet.ipv4.icmp_ignore_bogus_error_responses = 1\nnet.ipv4.tcp_syncookies = 1\n\n# Apply settings\nsudo sysctl -p\n</code></pre>"},{"location":"deployment/security/#firewall-setup-ufw","title":"Firewall Setup (UFW)","text":"<pre><code># Reset UFW to defaults\nsudo ufw --force reset\n\n# Set default policies\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\n\n# Allow SSH (change port if customized)\nsudo ufw allow 22/tcp\n\n# Allow HTTP and HTTPS\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\n\n# Allow MongoDB only from localhost\nsudo ufw allow from 127.0.0.1 to any port 27017\n\n# Enable UFW\nsudo ufw enable\n\n# Check status\nsudo ufw status verbose\n</code></pre> <p>Advanced Firewall Rules: <pre><code># Rate limiting for SSH\nsudo ufw limit ssh\n\n# Allow specific IP ranges for admin access\nsudo ufw allow from 192.168.1.0/24 to any port 22\n\n# Block common attack ports\nsudo ufw deny 23\nsudo ufw deny 135\nsudo ufw deny 445\nsudo ufw deny 1433\nsudo ufw deny 3389\n</code></pre></p>"},{"location":"deployment/security/#ssh-security-hardening","title":"SSH Security Hardening","text":"<pre><code># Backup original SSH config\nsudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup\n\n# Configure SSH security\nsudo nano /etc/ssh/sshd_config\n</code></pre> <pre><code># SSH Security Configuration\nPort 2222  # Change from default port 22\nProtocol 2\n\n# Authentication\nPermitRootLogin no\nPasswordAuthentication no\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys\nChallengeResponseAuthentication no\nUsePAM no\n\n# Connection settings\nClientAliveInterval 300\nClientAliveCountMax 2\nMaxAuthTries 3\nMaxSessions 2\nMaxStartups 2\n\n# Disable dangerous features\nX11Forwarding no\nAllowTcpForwarding no\nGatewayPorts no\nPermitTunnel no\n\n# Allow only specific users\nAllowUsers streambot\n\n# Logging\nLogLevel VERBOSE\nSyslogFacility AUTH\n</code></pre> <pre><code># Restart SSH service\nsudo systemctl restart ssh\n</code></pre>"},{"location":"deployment/security/#application-security","title":"Application Security","text":""},{"location":"deployment/security/#environment-variables-security","title":"Environment Variables Security","text":"<p>Secure .env File Management: <pre><code># Set proper permissions for .env file\nchmod 600 .env\nchown streambot:streambot .env\n\n# Create encrypted backup\ngpg --cipher-algo AES256 --compress-algo 1 --s2k-mode 3 \\\n    --s2k-digest-algo SHA512 --s2k-count 65536 \\\n    --symmetric --output .env.gpg .env\n\n# Securely delete original if needed\nshred -vfz -n 3 .env.backup\n</code></pre></p> <p>Environment Variable Validation: <pre><code># Add to StreamBot/config.py\nimport os\nimport sys\nfrom typing import Optional\n\ndef validate_security_config():\n    \"\"\"Validate critical security configuration.\"\"\"\n    required_vars = [\n        'API_ID', 'API_HASH', 'BOT_TOKEN', \n        'DATABASE_URL', 'ADMINS'\n    ]\n\n    missing_vars = []\n    for var in required_vars:\n        if not os.getenv(var):\n            missing_vars.append(var)\n\n    if missing_vars:\n        print(f\"SECURITY ERROR: Missing required environment variables: {missing_vars}\")\n        sys.exit(1)\n\n    # Validate admin IDs format\n    admin_ids = os.getenv('ADMINS', '').split(',')\n    for admin_id in admin_ids:\n        if admin_id.strip() and not admin_id.strip().isdigit():\n            print(f\"SECURITY ERROR: Invalid admin ID format: {admin_id}\")\n            sys.exit(1)\n\n    # Validate JWT secret strength\n    jwt_secret = os.getenv('JWT_SECRET', '')\n    if len(jwt_secret) &lt; 32:\n        print(\"SECURITY WARNING: JWT_SECRET should be at least 32 characters\")\n</code></pre></p>"},{"location":"deployment/security/#api-security-implementation","title":"API Security Implementation","text":"<p>Rate Limiting Configuration: <pre><code># StreamBot/security/rate_limiter.py\nimport time\nfrom collections import defaultdict\nfrom typing import Dict, Tuple\n\nclass AdvancedRateLimiter:\n    def __init__(self):\n        self.requests: Dict[str, list] = defaultdict(list)\n        self.blocked_ips: Dict[str, float] = {}\n\n    def is_allowed(self, identifier: str, limit: int = 60, window: int = 3600) -&gt; Tuple[bool, int]:\n        \"\"\"Check if request is allowed under rate limit.\"\"\"\n        current_time = time.time()\n\n        # Check if IP is temporarily blocked\n        if identifier in self.blocked_ips:\n            if current_time &lt; self.blocked_ips[identifier]:\n                return False, 0\n            else:\n                del self.blocked_ips[identifier]\n\n        # Clean old requests\n        self.requests[identifier] = [\n            req_time for req_time in self.requests[identifier]\n            if current_time - req_time &lt; window\n        ]\n\n        # Check rate limit\n        if len(self.requests[identifier]) &gt;= limit:\n            # Block IP for escalating time based on violations\n            block_duration = min(3600, len(self.requests[identifier]) * 60)\n            self.blocked_ips[identifier] = current_time + block_duration\n            return False, 0\n\n        # Allow request\n        self.requests[identifier].append(current_time)\n        remaining = limit - len(self.requests[identifier])\n        return True, remaining\n</code></pre></p>"},{"location":"deployment/security/#file-upload-security","title":"File Upload Security","text":"<p>Malware Scanning Integration: <pre><code># StreamBot/security/file_scanner.py\nimport hashlib\nimport magic\nimport requests\nfrom typing import Optional, Dict, Any\n\nclass FileSecurityScanner:\n    def __init__(self):\n        self.max_file_size = 2 * 1024 * 1024 * 1024  # 2GB\n        self.allowed_mime_types = {\n            'image/*', 'video/*', 'audio/*', 'text/*',\n            'application/pdf', 'application/zip',\n            'application/x-rar-compressed'\n        }\n        self.dangerous_extensions = {\n            '.exe', '.bat', '.cmd', '.com', '.pif', '.scr',\n            '.vbs', '.js', '.jar', '.ps1', '.sh'\n        }\n\n    def scan_file(self, file_path: str, file_size: int) -&gt; Dict[str, Any]:\n        \"\"\"Comprehensive file security scan.\"\"\"\n        results = {\n            'safe': True,\n            'issues': [],\n            'file_type': None,\n            'hash': None\n        }\n\n        # Size check\n        if file_size &gt; self.max_file_size:\n            results['safe'] = False\n            results['issues'].append('File size exceeds maximum limit')\n            return results\n\n        # MIME type detection\n        try:\n            mime_type = magic.from_file(file_path, mime=True)\n            results['file_type'] = mime_type\n\n            # Check allowed MIME types\n            if not any(mime_type.startswith(allowed.rstrip('*')) \n                      for allowed in self.allowed_mime_types):\n                results['safe'] = False\n                results['issues'].append(f'Dangerous file type: {mime_type}')\n\n        except Exception as e:\n            results['issues'].append(f'MIME type detection failed: {str(e)}')\n\n        # File hash calculation\n        try:\n            with open(file_path, 'rb') as f:\n                file_hash = hashlib.sha256(f.read()).hexdigest()\n                results['hash'] = file_hash\n        except Exception as e:\n            results['issues'].append(f'Hash calculation failed: {str(e)}')\n\n        return results\n</code></pre></p>"},{"location":"deployment/security/#network-security","title":"Network Security","text":""},{"location":"deployment/security/#httpstls-configuration","title":"HTTPS/TLS Configuration","text":"<p>Nginx SSL Configuration: <pre><code># /etc/nginx/sites-available/streambot-ssl\nserver {\n    listen 443 ssl http2;\n    server_name yourdomain.com;\n\n    # SSL Configuration\n    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;\n\n    # Modern SSL configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # SSL session settings\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    ssl_session_tickets off;\n\n    # OCSP stapling\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    ssl_trusted_certificate /etc/letsencrypt/live/yourdomain.com/chain.pem;\n    resolver 8.8.8.8 8.8.4.4 valid=300s;\n    resolver_timeout 5s;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always;\n    add_header X-Frame-Options DENY always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n    add_header Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' https://cricster.pages.dev; media-src 'self'\" always;\n\n    # Rate limiting\n    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\n    limit_req_zone $binary_remote_addr zone=download:10m rate=5r/s;\n    limit_req_zone $binary_remote_addr zone=stream:10m rate=20r/s;\n\n    # Main application\n    location / {\n        limit_req zone=api burst=20 nodelay;\n        proxy_pass http://127.0.0.1:8080;\n        include /etc/nginx/proxy_params;\n    }\n\n    # Download endpoint\n    location /dl/ {\n        limit_req zone=download burst=10 nodelay;\n        proxy_pass http://127.0.0.1:8080;\n        include /etc/nginx/proxy_params;\n    }\n\n    # Streaming endpoint with special handling\n    location /stream/ {\n        limit_req zone=stream burst=50 nodelay;\n        proxy_pass http://127.0.0.1:8080;\n        proxy_buffering off;\n        proxy_request_buffering off;\n        include /etc/nginx/proxy_params;\n    }\n}\n</code></pre></p>"},{"location":"deployment/security/#ddos-protection","title":"DDoS Protection","text":"<p>Fail2Ban Configuration for StreamBot: <pre><code># Create custom filter\nsudo nano /etc/fail2ban/filter.d/streambot.conf\n</code></pre></p> <pre><code>[Definition]\nfailregex = ^.*\"GET /(?:dl|stream)/.*\" 429.*$\n            ^.*\"POST /api/.*\" 429.*$\n            ^.*StreamBot.*Rate limit exceeded.*&lt;HOST&gt;.*$\nignoreregex =\n</code></pre> <pre><code># Configure jail\nsudo nano /etc/fail2ban/jail.d/streambot.conf\n</code></pre> <pre><code>[streambot-rate-limit]\nenabled = true\nport = http,https\nfilter = streambot\nlogpath = /var/log/nginx/access.log\nmaxretry = 10\nfindtime = 300\nbantime = 3600\naction = iptables-multiport[name=streambot, port=\"http,https\", protocol=tcp]\n\n[streambot-api-abuse]\nenabled = true\nport = http,https\nfilter = streambot\nlogpath = /home/streambot/Telegram-Download-Link-Generator/logs/streambot.log\nmaxretry = 5\nfindtime = 600\nbantime = 7200\n</code></pre>"},{"location":"deployment/security/#database-security","title":"Database Security","text":""},{"location":"deployment/security/#mongodb-security-hardening","title":"MongoDB Security Hardening","text":"<pre><code># Create MongoDB admin user\nmongosh --eval \"\nuse admin\ndb.createUser({\n  user: 'admin',\n  pwd: 'your-secure-admin-password',\n  roles: [{role: 'userAdminAnyDatabase', db: 'admin'}]\n})\n\"\n\n# Create StreamBot database user\nmongosh --eval \"\nuse streambot\ndb.createUser({\n  user: 'streambot_user',\n  pwd: 'your-secure-database-password',\n  roles: [{role: 'readWrite', db: 'streambot'}]\n})\n\"\n</code></pre> <p>MongoDB Configuration: <pre><code># /etc/mongod.conf\nstorage:\n  dbPath: /var/lib/mongodb\n  journal:\n    enabled: true\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 1\n    collectionConfig:\n      blockCompressor: snappy\n    indexConfig:\n      prefixCompression: true\n\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.log\n  logRotate: rename\n\nnet:\n  port: 27017\n  bindIp: 127.0.0.1\n\nsecurity:\n  authorization: enabled\n\nprocessManagement:\n  timeZoneInfo: /usr/share/zoneinfo\n\noperationProfiling:\n  slowOpThresholdMs: 100\n  mode: slowOp\n\nsetParameter:\n  authenticationMechanisms: SCRAM-SHA-1,SCRAM-SHA-256\n</code></pre></p>"},{"location":"deployment/security/#database-encryption","title":"Database Encryption","text":"<pre><code># Enable encryption at rest (MongoDB Enterprise)\n# Add to mongod.conf:\nsecurity:\n  enableEncryption: true\n  encryptionKeyFile: /etc/mongodb-keyfile\n\n# Create keyfile\nopenssl rand -base64 32 &gt; /etc/mongodb-keyfile\nchmod 400 /etc/mongodb-keyfile\nchown mongodb:mongodb /etc/mongodb-keyfile\n</code></pre>"},{"location":"deployment/security/#quick-security-checklist","title":"Quick Security Checklist","text":"<p>While comprehensive guides are being prepared, here's a basic security checklist:</p>"},{"location":"deployment/security/#essential-security-steps","title":"\u2705 Essential Security Steps","text":"<pre><code># 1. Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# 2. Configure firewall\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow ssh\nsudo ufw allow 80\nsudo ufw allow 443\nsudo ufw enable\n\n# 3. Secure SSH (if using SSH)\nsudo nano /etc/ssh/sshd_config\n# Set: PasswordAuthentication no\n# Set: PermitRootLogin no\nsudo systemctl restart ssh\n\n# 4. Install fail2ban\nsudo apt install fail2ban -y\nsudo systemctl enable fail2ban\n</code></pre>"},{"location":"deployment/security/#environment-security","title":"\ud83d\udd10 Environment Security","text":"<pre><code># Use strong, unique passwords and tokens\nJWT_SECRET=use_a_very_long_random_string_here_64_chars_minimum\nBOT_TOKEN=your_secure_bot_token_from_botfather\n\n# Restrict admin access\nADMIN_IDS=your_user_id_only\n\n# Use secure database connections\nDATABASE_URL=mongodb://username:password@localhost:27017/streambot?authSource=admin\n\n# Enable HTTPS\nBASE_URL=https://yourdomain.com\n</code></pre>"},{"location":"deployment/security/#file-security","title":"\ud83d\udee1\ufe0f File Security","text":"<pre><code># Set proper file permissions\nchmod 600 .env\nchmod 755 /path/to/upload/directory\nchown -R streambot:streambot /app\n\n# Create dedicated user\nsudo useradd -m -s /bin/bash streambot\nsudo usermod -aG docker streambot  # if using Docker\n</code></pre>"},{"location":"deployment/security/#security-features-in-development","title":"Security Features in Development","text":""},{"location":"deployment/security/#planned-security-enhancements","title":"Planned Security Enhancements","text":"<ul> <li>File Encryption - End-to-end encryption for uploaded files</li> <li>Two-Factor Authentication - 2FA for admin access</li> <li>Audit Logging - Comprehensive security event logging</li> <li>Malware Scanning - Automatic file scanning</li> <li>Rate Limiting - Advanced rate limiting per user/IP</li> <li>Access Tokens - Granular permission system</li> </ul>"},{"location":"deployment/security/#monitoring-alerting","title":"Monitoring &amp; Alerting","text":"<ul> <li>Security Dashboards - Real-time security monitoring</li> <li>Threat Detection - Automated threat identification</li> <li>Incident Response - Security incident procedures</li> <li>Compliance Tools - GDPR and privacy compliance</li> </ul>"},{"location":"deployment/security/#common-security-vulnerabilities","title":"Common Security Vulnerabilities","text":""},{"location":"deployment/security/#what-were-protecting-against","title":"What We're Protecting Against","text":"<ul> <li>File Upload Attacks - Malicious file uploads</li> <li>Path Traversal - Directory traversal attacks</li> <li>Rate Limit Bypass - API abuse prevention</li> <li>Credential Theft - Token and password security</li> <li>DDoS Attacks - Service availability protection</li> <li>Data Breaches - User data protection</li> </ul>"},{"location":"deployment/security/#security-resources","title":"Security Resources","text":"<p>While detailed guides are in development:</p>"},{"location":"deployment/security/#immediate-security-help","title":"Immediate Security Help","text":"<ul> <li>\ud83d\udcac Contact me on Telegram: @ajmods_bot</li> <li>\ud83d\udc1b Report security issues on GitHub</li> <li>\ud83d\udcd6 Check current deployment guides</li> </ul>"},{"location":"deployment/security/#external-security-resources","title":"External Security Resources","text":"<ul> <li>OWASP Security Guidelines</li> <li>CIS Security Benchmarks</li> <li>Let's Encrypt SSL Certificates</li> <li>Fail2Ban Documentation</li> </ul>"},{"location":"deployment/security/#security-update-schedule","title":"Security Update Schedule","text":"<ul> <li>Critical Security Updates: Immediate release</li> <li>Security Patches: Within 48 hours</li> <li>Security Documentation: Weekly updates</li> <li>Security Audits: Monthly reviews</li> </ul>"},{"location":"deployment/security/#reporting-security-issues","title":"Reporting Security Issues","text":"<p>If you discover a security vulnerability:</p> <ol> <li>DO NOT create a public GitHub issue</li> <li>Contact me privately on Telegram: @ajmods_bot</li> <li>Use GitHub's Security Advisory feature</li> <li>Provide detailed information about the vulnerability</li> <li>Allow time for patch development before public disclosure</li> </ol> <p>Comprehensive security documentation is actively being developed. Your security is our priority! </p>"},{"location":"deployment/vps-setup/","title":"VPS Setup Guide","text":"<p>This comprehensive guide covers deploying StreamBot on Virtual Private Servers (VPS) from various providers, with optimizations for video streaming performance.</p>"},{"location":"deployment/vps-setup/#vps-provider-comparison","title":"VPS Provider Comparison","text":"Provider CPU Performance Network Speed Storage Type Price Range Video Streaming DigitalOcean \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 SSD $5-40/month \u2b50\u2b50\u2b50\u2b50\u2b50 Vultr \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 SSD/NVMe $3-40/month \u2b50\u2b50\u2b50\u2b50\u2b50 Linode \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 SSD $5-40/month \u2b50\u2b50\u2b50\u2b50 AWS EC2 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 EBS/NVMe $5-100+/month \u2b50\u2b50\u2b50\u2b50\u2b50 Google Cloud \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 SSD $5-100+/month \u2b50\u2b50\u2b50\u2b50\u2b50 Hetzner \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 SSD/NVMe $3-50/month \u2b50\u2b50\u2b50\u2b50"},{"location":"deployment/vps-setup/#system-requirements","title":"System Requirements","text":""},{"location":"deployment/vps-setup/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>CPU: 1 vCPU (2.4GHz+)</li> <li>RAM: 1 GB</li> <li>Storage: 20 GB SSD</li> <li>Bandwidth: 1 TB/month</li> <li>OS: Ubuntu 22.04 LTS or CentOS 8+</li> </ul>"},{"location":"deployment/vps-setup/#recommended-for-video-streaming","title":"Recommended for Video Streaming","text":"<ul> <li>CPU: 2+ vCPU (3.0GHz+)</li> <li>RAM: 4 GB+</li> <li>Storage: 50 GB+ SSD/NVMe</li> <li>Bandwidth: 5 TB/month</li> <li>Network: 1 Gbps port speed</li> </ul>"},{"location":"deployment/vps-setup/#digitalocean-deployment","title":"DigitalOcean Deployment","text":""},{"location":"deployment/vps-setup/#1-create-droplet","title":"1. Create Droplet","text":"<pre><code># Using DigitalOcean CLI (doctl)\ndoctl compute droplet create streambot \\\n  --image ubuntu-22-04-x64 \\\n  --size s-2vcpu-4gb \\\n  --region nyc1 \\\n  --ssh-keys your-ssh-key-id \\\n  --enable-monitoring \\\n  --enable-backups\n</code></pre>"},{"location":"deployment/vps-setup/#2-initial-server-setup","title":"2. Initial Server Setup","text":"<pre><code># Connect to your droplet\nssh root@your-droplet-ip\n\n# Update system packages\napt update &amp;&amp; apt upgrade -y\n\n# Create a new user for StreamBot\nadduser streambot\nusermod -aG sudo streambot\nusermod -aG docker streambot\n\n# Switch to new user\nsu - streambot\n</code></pre>"},{"location":"deployment/vps-setup/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code># Install Python 3.11\nsudo apt install software-properties-common -y\nsudo add-apt-repository ppa:deadsnakes/ppa -y\nsudo apt update\nsudo apt install python3.11 python3.11-pip python3.11-venv python3.11-dev -y\n\n# Install system dependencies\nsudo apt install git curl wget nginx certbot python3-certbot-nginx -y\n\n# Install MongoDB\nwget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -\necho \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list\nsudo apt update\nsudo apt install mongodb-org -y\nsudo systemctl enable mongod\nsudo systemctl start mongod\n</code></pre>"},{"location":"deployment/vps-setup/#4-install-docker-optional-but-recommended","title":"4. Install Docker (Optional but Recommended)","text":"<pre><code># Install Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsh get-docker.sh\nsudo usermod -aG docker $USER\n\n# Install Docker Compose\nsudo curl -L \"https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n\n# Logout and login to apply docker group changes\nexit\nssh streambot@your-droplet-ip\n</code></pre>"},{"location":"deployment/vps-setup/#5-deploy-streambot","title":"5. Deploy StreamBot","text":"<pre><code># Clone repository\ngit clone https://github.com/AnikethJana/Telegram-Download-Link-Generator.git\ncd Telegram-Download-Link-Generator\n\n# Create virtual environment\npython3.11 -m venv venv\nsource venv/bin/activate\n\n# Install Python dependencies\npip install --upgrade pip\npip install -r requirements.txt\n\n# Create environment file\ncp .env.example .env\nnano .env\n</code></pre>"},{"location":"deployment/vps-setup/#6-configure-environment-variables","title":"6. Configure Environment Variables","text":"<pre><code># Telegram Configuration\nAPI_ID=your_api_id\nAPI_HASH=your_api_hash\nBOT_TOKEN=your_bot_token\nLOG_CHANNEL=-1001234567890\n\n# Database Configuration\nDATABASE_URL=mongodb://localhost:27017/streambot\n\n# Server Configuration\nBASE_URL=https://yourdomain.com\nPORT=8080\nBIND_ADDRESS=0.0.0.0\n\n# Video Streaming Configuration\nVIDEO_FRONTEND_URL=https://cricster.pages.dev\nVIDEO_CHUNK_SIZE=1048576\nMAX_CONCURRENT_STREAMS=50\nSTREAM_TIMEOUT=3600\n\n# Admin Configuration\nADMINS=your_telegram_user_id\n\n# Performance Optimizations\nWORKERS=4\nMAX_CONNECTIONS=1000\nKEEPALIVE_TIMEOUT=65\n</code></pre>"},{"location":"deployment/vps-setup/#7-create-systemd-service","title":"7. Create Systemd Service","text":"<pre><code># Create service file\nsudo nano /etc/systemd/system/streambot.service\n</code></pre> <pre><code>[Unit]\nDescription=StreamBot Telegram File to Link Generator\nAfter=network.target mongod.service\nWants=mongod.service\n\n[Service]\nType=simple\nUser=streambot\nGroup=streambot\nWorkingDirectory=/home/streambot/Telegram-Download-Link-Generator\nEnvironment=PATH=/home/streambot/Telegram-Download-Link-Generator/venv/bin\nExecStart=/home/streambot/Telegram-Download-Link-Generator/venv/bin/python -m StreamBot\nRestart=always\nRestartSec=10\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=streambot\n\n# Resource limits\nLimitNOFILE=65536\nLimitNPROC=4096\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/home/streambot/Telegram-Download-Link-Generator\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <pre><code># Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable streambot\nsudo systemctl start streambot\nsudo systemctl status streambot\n</code></pre>"},{"location":"deployment/vps-setup/#nginx-configuration-for-video-streaming","title":"Nginx Configuration for Video Streaming","text":""},{"location":"deployment/vps-setup/#1-configure-nginx","title":"1. Configure Nginx","text":"<pre><code># Create Nginx configuration\nsudo nano /etc/nginx/sites-available/streambot\n</code></pre> <pre><code># Nginx configuration optimized for video streaming\nserver {\n    listen 80;\n    server_name yourdomain.com www.yourdomain.com;\n\n    # Redirect HTTP to HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name yourdomain.com www.yourdomain.com;\n\n    # SSL Configuration\n    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n\n    # Security headers\n    add_header X-Frame-Options DENY;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n\n    # General proxy settings\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n\n    # Main application\n    location / {\n        proxy_pass http://127.0.0.1:8080;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_cache_bypass $http_upgrade;\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n\n    # Optimized configuration for video streaming\n    location /stream/ {\n        proxy_pass http://127.0.0.1:8080;\n\n        # Disable buffering for streaming\n        proxy_buffering off;\n        proxy_request_buffering off;\n        proxy_http_version 1.1;\n        proxy_set_header Connection \"\";\n\n        # Enable range requests for video seeking\n        proxy_set_header Range $http_range;\n        proxy_set_header If-Range $http_if_range;\n\n        # Bypass cache for range requests\n        proxy_cache_bypass $http_range;\n        proxy_no_cache $http_range;\n\n        # Increase timeouts for large video files\n        proxy_connect_timeout 300s;\n        proxy_send_timeout 300s;\n        proxy_read_timeout 300s;\n\n        # Handle large files\n        client_max_body_size 2G;\n        proxy_max_temp_file_size 0;\n\n        # CORS headers for video frontend\n        add_header Access-Control-Allow-Origin \"https://cricster.pages.dev\" always;\n        add_header Access-Control-Allow-Methods \"GET, HEAD, OPTIONS\" always;\n        add_header Access-Control-Allow-Headers \"Range, If-Range, Accept-Encoding\" always;\n        add_header Access-Control-Expose-Headers \"Content-Range, Accept-Ranges, Content-Length\" always;\n\n        # Handle preflight requests\n        if ($request_method = 'OPTIONS') {\n            add_header Access-Control-Allow-Origin \"https://cricster.pages.dev\";\n            add_header Access-Control-Allow-Methods \"GET, HEAD, OPTIONS\";\n            add_header Access-Control-Allow-Headers \"Range, If-Range, Accept-Encoding\";\n            add_header Access-Control-Max-Age 86400;\n            add_header Content-Type \"text/plain charset=UTF-8\";\n            add_header Content-Length 0;\n            return 204;\n        }\n    }\n\n    # Download endpoint optimization\n    location /dl/ {\n        proxy_pass http://127.0.0.1:8080;\n        proxy_buffering on;\n        proxy_buffer_size 128k;\n        proxy_buffers 4 256k;\n        proxy_busy_buffers_size 256k;\n\n        # Enable range requests\n        proxy_set_header Range $http_range;\n        proxy_set_header If-Range $http_if_range;\n\n        # Timeouts for large downloads\n        proxy_connect_timeout 300s;\n        proxy_send_timeout 300s;\n        proxy_read_timeout 300s;\n\n        # Handle large files\n        client_max_body_size 2G;\n    }\n\n    # API endpoints\n    location /api/ {\n        proxy_pass http://127.0.0.1:8080;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n</code></pre> <pre><code># Enable site and restart Nginx\nsudo ln -s /etc/nginx/sites-available/streambot /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl restart nginx\n</code></pre>"},{"location":"deployment/vps-setup/#2-ssl-certificate-setup","title":"2. SSL Certificate Setup","text":"<pre><code># Install SSL certificate using Certbot\nsudo certbot --nginx -d yourdomain.com -d www.yourdomain.com\n\n# Set up automatic renewal\nsudo crontab -e\n# Add this line:\n# 0 12 * * * /usr/bin/certbot renew --quiet\n</code></pre>"},{"location":"deployment/vps-setup/#firewall-configuration","title":"Firewall Configuration","text":"<pre><code># Configure UFW firewall\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\n\n# Allow SSH (change 22 to your custom SSH port if different)\nsudo ufw allow 22\n\n# Allow HTTP and HTTPS\nsudo ufw allow 80\nsudo ufw allow 443\n\n# Allow MongoDB (only if external access needed)\n# sudo ufw allow from your-trusted-ip to any port 27017\n\n# Enable firewall\nsudo ufw enable\nsudo ufw status\n</code></pre>"},{"location":"deployment/vps-setup/#performance-optimization","title":"Performance Optimization","text":""},{"location":"deployment/vps-setup/#1-system-optimizations","title":"1. System Optimizations","text":"<pre><code># Optimize system settings for video streaming\nsudo nano /etc/sysctl.conf\n</code></pre> <pre><code># Network optimizations\nnet.core.rmem_max = 16777216\nnet.core.wmem_max = 16777216\nnet.ipv4.tcp_rmem = 4096 12582912 16777216\nnet.ipv4.tcp_wmem = 4096 12582912 16777216\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_congestion_control = bbr\n\n# File system optimizations\nfs.file-max = 65536\nfs.inotify.max_user_watches = 524288\n\n# Virtual memory optimizations\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\n</code></pre> <pre><code># Apply settings\nsudo sysctl -p\n</code></pre>"},{"location":"deployment/vps-setup/#2-mongodb-optimization","title":"2. MongoDB Optimization","text":"<pre><code># Configure MongoDB for better performance\nsudo nano /etc/mongod.conf\n</code></pre> <pre><code># MongoDB configuration for StreamBot\nstorage:\n  dbPath: /var/lib/mongodb\n  journal:\n    enabled: true\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 1  # Adjust based on available RAM\n    collectionConfig:\n      blockCompressor: snappy\n    indexConfig:\n      prefixCompression: true\n\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.log\n  logRotate: rename\n  verbosity: 1\n\nnet:\n  port: 27017\n  bindIp: 127.0.0.1\n\nprocessManagement:\n  timeZoneInfo: /usr/share/zoneinfo\n\nsecurity:\n  authorization: enabled\n\noperationProfiling:\n  slowOpThresholdMs: 100\n  mode: slowOp\n</code></pre> <pre><code># Restart MongoDB\nsudo systemctl restart mongod\n</code></pre>"},{"location":"deployment/vps-setup/#3-nginx-optimization","title":"3. Nginx Optimization","text":"<pre><code># Optimize Nginx for high performance\nsudo nano /etc/nginx/nginx.conf\n</code></pre> <pre><code># Nginx optimization for video streaming\nuser www-data;\nworker_processes auto;\nworker_rlimit_nofile 65535;\npid /run/nginx.pid;\n\nevents {\n    worker_connections 4096;\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Basic Settings\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    keepalive_requests 1000;\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    # File size limits for video streaming\n    client_max_body_size 2G;\n    client_body_buffer_size 128k;\n    client_header_buffer_size 3m;\n    large_client_header_buffers 4 256k;\n\n    # Timeout settings\n    client_body_timeout 60s;\n    client_header_timeout 60s;\n    send_timeout 60s;\n\n    # Proxy settings\n    proxy_connect_timeout 300s;\n    proxy_send_timeout 300s;\n    proxy_read_timeout 300s;\n    proxy_buffer_size 128k;\n    proxy_buffers 4 256k;\n    proxy_busy_buffers_size 256k;\n\n    # Compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/json\n        application/javascript\n        application/xml+rss\n        application/atom+xml\n        image/svg+xml;\n\n    # Rate limiting\n    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\n    limit_req_zone $binary_remote_addr zone=download:10m rate=5r/s;\n\n    # Include site configurations\n    include /etc/nginx/mime.types;\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\n</code></pre>"},{"location":"deployment/vps-setup/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"deployment/vps-setup/#1-system-monitoring","title":"1. System Monitoring","text":"<pre><code># Install monitoring tools\nsudo apt install htop iotop nethogs -y\n\n# Install and configure fail2ban\nsudo apt install fail2ban -y\nsudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local\nsudo nano /etc/fail2ban/jail.local\n</code></pre> <pre><code>[DEFAULT]\nbantime = 3600\nfindtime = 600\nmaxretry = 3\n\n[sshd]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\n\n[nginx-http-auth]\nenabled = true\nfilter = nginx-http-auth\nport = http,https\nlogpath = /var/log/nginx/error.log\n\n[nginx-limit-req]\nenabled = true\nfilter = nginx-limit-req\nport = http,https\nlogpath = /var/log/nginx/error.log\nmaxretry = 10\n</code></pre> <pre><code>sudo systemctl enable fail2ban\nsudo systemctl start fail2ban\n</code></pre>"},{"location":"deployment/vps-setup/#2-log-management","title":"2. Log Management","text":"<pre><code># Configure log rotation for StreamBot\nsudo nano /etc/logrotate.d/streambot\n</code></pre> <pre><code>/home/streambot/Telegram-Download-Link-Generator/logs/*.log {\n    daily\n    missingok\n    rotate 30\n    compress\n    delaycompress\n    notifempty\n    copytruncate\n    su streambot streambot\n}\n</code></pre>"},{"location":"deployment/vps-setup/#3-backup-strategy","title":"3. Backup Strategy","text":"<pre><code># Create backup script\nnano /home/streambot/backup.sh\n</code></pre> <pre><code>#!/bin/bash\n# StreamBot backup script\n\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_DIR=\"/home/streambot/backups\"\nAPP_DIR=\"/home/streambot/Telegram-Download-Link-Generator\"\n\n# Create backup directory\nmkdir -p $BACKUP_DIR\n\n# Backup MongoDB\nmongodump --db streambot --out $BACKUP_DIR/mongodb_$DATE\n\n# Backup application files\ntar -czf $BACKUP_DIR/app_$DATE.tar.gz -C $APP_DIR .env sessions/\n\n# Backup Nginx configuration\nsudo cp /etc/nginx/sites-available/streambot $BACKUP_DIR/nginx_$DATE.conf\n\n# Clean old backups (keep last 7 days)\nfind $BACKUP_DIR -name \"*.tar.gz\" -mtime +7 -delete\nfind $BACKUP_DIR -name \"mongodb_*\" -mtime +7 -exec rm -rf {} \\;\n\necho \"Backup completed: $DATE\"\n</code></pre> <pre><code># Make executable and add to crontab\nchmod +x /home/streambot/backup.sh\ncrontab -e\n# Add: 0 2 * * * /home/streambot/backup.sh\n</code></pre>"},{"location":"deployment/vps-setup/#security-hardening","title":"Security Hardening","text":""},{"location":"deployment/vps-setup/#1-ssh-security","title":"1. SSH Security","text":"<pre><code># Configure SSH security\nsudo nano /etc/ssh/sshd_config\n</code></pre> <pre><code># SSH security configuration\nPort 2222  # Change default port\nPermitRootLogin no\nPasswordAuthentication no\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys\nChallengeResponseAuthentication no\nUsePAM no\nX11Forwarding no\nPrintMotd no\nClientAliveInterval 300\nClientAliveCountMax 2\nMaxAuthTries 3\nMaxSessions 2\nProtocol 2\n</code></pre> <pre><code>sudo systemctl restart ssh\n</code></pre>"},{"location":"deployment/vps-setup/#2-intrusion-detection","title":"2. Intrusion Detection","text":"<pre><code># Install and configure AIDE\nsudo apt install aide -y\nsudo aideinit\nsudo mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n\n# Add to crontab for daily checks\necho \"0 1 * * * /usr/bin/aide --check\" | sudo crontab -\n</code></pre>"},{"location":"deployment/vps-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/vps-setup/#common-issues","title":"Common Issues","text":"<p>Service Won't Start: <pre><code># Check service status\nsudo systemctl status streambot\nsudo journalctl -u streambot -f\n\n# Check logs\ntail -f /home/streambot/Telegram-Download-Link-Generator/logs/streambot.log\n</code></pre></p> <p>High Memory Usage: <pre><code># Monitor memory usage\nhtop\nfree -h\n\n# Restart service if needed\nsudo systemctl restart streambot\n</code></pre></p> <p>Video Streaming Issues: <pre><code># Test streaming endpoint\ncurl -I http://localhost:8080/stream/test\ncurl -H \"Range: bytes=0-1023\" http://localhost:8080/stream/test\n\n# Check Nginx logs\nsudo tail -f /var/log/nginx/error.log\nsudo tail -f /var/log/nginx/access.log\n</code></pre></p> <p>Database Connection Issues: <pre><code># Check MongoDB status\nsudo systemctl status mongod\nmongosh --eval \"db.adminCommand('ping')\"\n\n# Check MongoDB logs\nsudo tail -f /var/log/mongodb/mongod.log\n</code></pre></p>"},{"location":"deployment/vps-setup/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Monitor system resources\nhtop\niotop\nnethogs\n\n# Monitor disk usage\ndf -h\ndu -sh /home/streambot/*\n\n# Monitor network connections\nss -tuln\nnetstat -tlnp | grep :8080\n</code></pre>"},{"location":"deployment/vps-setup/#scaling-considerations","title":"Scaling Considerations","text":""},{"location":"deployment/vps-setup/#vertical-scaling-upgrade-vps","title":"Vertical Scaling (Upgrade VPS)","text":"<pre><code># Before upgrading, backup everything\n./backup.sh\n\n# After upgrade, optimize for new resources\n# Update MongoDB cache size\nsudo nano /etc/mongod.conf\n# Increase cacheSizeGB based on new RAM\n\n# Update Nginx worker processes\nsudo nano /etc/nginx/nginx.conf\n# Set worker_processes to match new CPU cores\n\n# Update StreamBot workers\nnano .env\n# Increase WORKERS based on new CPU cores\n</code></pre>"},{"location":"deployment/vps-setup/#horizontal-scaling-multiple-servers","title":"Horizontal Scaling (Multiple Servers)","text":"<p>For high-traffic deployments, consider:</p> <ol> <li>Load Balancer: Use Nginx or HAProxy</li> <li>Database Clustering: MongoDB replica sets</li> <li>CDN: CloudFlare or AWS CloudFront</li> <li>Monitoring: Prometheus + Grafana</li> </ol>"},{"location":"deployment/vps-setup/#next-steps","title":"Next Steps","text":"<p>After successful deployment:</p> <ol> <li>Monitor Performance: Set up monitoring dashboards</li> <li>Regular Backups: Ensure backup script is working</li> <li>Security Updates: Keep system and dependencies updated</li> <li>SSL Renewal: Verify automatic SSL certificate renewal</li> <li>Scaling: Monitor usage and scale as needed</li> </ol> <p>For additional deployment options, see: - Docker Deployment for containerized setup - Cloud Platforms for managed services - Security Configuration for advanced security</p> <p>This documentation is actively being developed. Check back soon for detailed VPS setup instructions! </p>"},{"location":"developer-guide/architecture/","title":"StreamBot Architecture","text":"<p>StreamBot is built with a modern, scalable architecture designed for high-performance file downloads and video streaming. This document provides a comprehensive overview of the system's components, data flow, and technical implementation.</p>"},{"location":"developer-guide/architecture/#system-overview","title":"System Overview","text":"<pre><code>graph TB\n    subgraph \"Client Layer\"\n        TG[Telegram API]\n        USER[Users]\n        ADMIN[Administrators]\n    end\n\n    subgraph \"Bot Layer\"\n        BOT[Bot Handler]\n        CLIENT[Client Manager]\n        MULTI[Multi-Client Pool]\n    end\n\n    subgraph \"Application Core\"\n        APP[Main Application]\n        CONFIG[Configuration Manager]\n        SECURITY[Security Middleware]\n        RATE[Rate Limiter]\n        BANDWIDTH[Bandwidth Manager]\n    end\n\n    subgraph \"Web Services\"\n        WEB[Web Server]\n        API[REST API]\n        DOWNLOAD[Download Handler]\n        STREAM[Video Streaming Service]\n        CORS[CORS Handler]\n    end\n\n    subgraph \"Storage &amp; Database\"\n        DB[(MongoDB Database)]\n        CACHE[File Cache]\n        SESSION[Session Storage]\n        LOGS[Log Storage]\n    end\n\n    subgraph \"Video Frontend Integration\"\n        CRICSTER[Cricster Player]\n        CUSTOM[Custom Frontend]\n        CDN[Content Delivery Network]\n    end\n\n    subgraph \"Monitoring &amp; Utils\"\n        LOGGER[Smart Logger]\n        MEMORY[Memory Manager]\n        CLEANUP[Cleanup Scheduler]\n        MONITOR[Health Monitor]\n    end\n\n    USER --&gt; TG\n    ADMIN --&gt; TG\n    TG &lt;--&gt; BOT\n    BOT &lt;--&gt; CLIENT\n    CLIENT &lt;--&gt; MULTI\n\n    BOT &lt;--&gt; APP\n    APP &lt;--&gt; CONFIG\n    APP &lt;--&gt; SECURITY\n    APP &lt;--&gt; RATE\n    APP &lt;--&gt; BANDWIDTH\n\n    APP &lt;--&gt; WEB\n    WEB &lt;--&gt; API\n    WEB &lt;--&gt; DOWNLOAD\n    WEB &lt;--&gt; STREAM\n    WEB &lt;--&gt; CORS\n\n    APP &lt;--&gt; DB\n    APP &lt;--&gt; CACHE\n    APP &lt;--&gt; SESSION\n    APP &lt;--&gt; LOGS\n\n    STREAM -.-&gt; CRICSTER\n    STREAM -.-&gt; CUSTOM\n    STREAM -.-&gt; CDN\n\n    APP &lt;--&gt; LOGGER\n    APP &lt;--&gt; MEMORY\n    APP &lt;--&gt; CLEANUP\n    APP &lt;--&gt; MONITOR</code></pre>"},{"location":"developer-guide/architecture/#core-components","title":"Core Components","text":""},{"location":"developer-guide/architecture/#1-application-entry-point","title":"1. Application Entry Point","text":"<p>Main Module (<code>StreamBot/__main__.py</code>) <pre><code># Application lifecycle management\n- Environment validation and configuration loading\n- Service initialization and dependency injection\n- Graceful shutdown handling with cleanup\n- Signal handling for production deployments\n- Health check initialization\n</code></pre></p> <p>Configuration Manager (<code>StreamBot/config.py</code>) <pre><code># Centralized configuration management\n- Environment variable validation and parsing\n- Video streaming configuration with Cricster defaults\n- Python 3.11+ requirement enforcement\n- Feature flag management\n- Runtime configuration updates\n</code></pre></p>"},{"location":"developer-guide/architecture/#2-bot-layer-architecture","title":"2. Bot Layer Architecture","text":"<p>Bot Handler (<code>StreamBot/bot.py</code>) <pre><code># Core bot functionality\nclass StreamBot:\n    - Message processing and command handling\n    - File upload detection and processing\n    - Video format detection and optimization\n    - Link generation for downloads and streaming\n    - User interaction and response formatting\n    - Admin command processing\n    - Error handling and user feedback\n</code></pre></p> <p>Client Manager (<code>StreamBot/client_manager.py</code>) <pre><code># Multi-client session management\nclass ClientManager:\n    - Primary and secondary client coordination\n    - Load balancing across multiple bot tokens\n    - Connection pooling and optimization\n    - Failover and redundancy handling\n    - Session persistence and recovery\n</code></pre></p>"},{"location":"developer-guide/architecture/#3-web-services-layer","title":"3. Web Services Layer","text":"<p>Web Server (<code>StreamBot/web/web.py</code>) <pre><code># HTTP server implementation\nclass WebServer:\n    - aiohttp-based async web server\n    - Route registration and middleware setup\n    - CORS configuration for video streaming\n    - Request/response lifecycle management\n    - Static file serving and optimization\n</code></pre></p> <p>Video Streaming Service (<code>StreamBot/web/streaming.py</code>) <pre><code># Advanced video streaming implementation\nclass StreamingHandler:\n    - HTTP range request processing\n    - Video seeking and progressive loading\n    - Multiple format support (MP4, MKV, AVI, WebM, MOV)\n    - Bandwidth optimization and throttling\n    - Frontend integration with URL parameters\n    - Caching strategy and performance optimization\n</code></pre></p> <p>Download Handler (<code>StreamBot/web/</code>) <pre><code># File download management\nclass DownloadHandler:\n    - Direct file download processing\n    - Range request support for large files\n    - Resume capability implementation\n    - Bandwidth tracking and limiting\n    - Error handling and retry logic\n</code></pre></p>"},{"location":"developer-guide/architecture/#4-database-layer","title":"4. Database Layer","text":"<p>Database Manager (<code>StreamBot/database/database.py</code>) <pre><code># MongoDB operations and data management\nclass DatabaseManager:\n    - User registration and management\n    - File metadata storage and retrieval\n    - Bandwidth usage tracking and analytics\n    - Session management and persistence\n    - Automatic cleanup and maintenance\n</code></pre></p> <p>Data Models: <pre><code># User document structure\n{\n    \"_id\": ObjectId,\n    \"user_id\": int,\n    \"username\": str,\n    \"first_name\": str,\n    \"join_date\": datetime,\n    \"last_active\": datetime,\n    \"bandwidth_used\": int,\n    \"files_shared\": int,\n    \"is_banned\": bool\n}\n\n# File document structure\n{\n    \"_id\": ObjectId,\n    \"message_id\": int,\n    \"user_id\": int,\n    \"file_name\": str,\n    \"file_size\": int,\n    \"file_type\": str,\n    \"mime_type\": str,\n    \"is_video\": bool,\n    \"upload_date\": datetime,\n    \"download_count\": int,\n    \"stream_count\": int,\n    \"expires_at\": datetime\n}\n</code></pre></p>"},{"location":"developer-guide/architecture/#5-security-layer","title":"5. Security Layer","text":"<p>Security Middleware (<code>StreamBot/security/middleware.py</code>) <pre><code># Request/response security processing\nclass SecurityMiddleware:\n    - Input validation and sanitization\n    - Rate limiting enforcement\n    - CORS policy implementation\n    - Security header injection\n    - Request logging and monitoring\n</code></pre></p> <p>Rate Limiter (<code>StreamBot/security/rate_limiter.py</code>) <pre><code># Advanced rate limiting system\nclass RateLimiter:\n    - Per-user request limiting\n    - IP-based rate limiting\n    - Bandwidth-aware throttling\n    - Exponential backoff implementation\n    - Whitelist and blacklist management\n</code></pre></p> <p>Validator (<code>StreamBot/security/validator.py</code>) <pre><code># Input validation and security checks\nclass Validator:\n    - File type validation\n    - Size limit enforcement\n    - Malicious content detection\n    - URL validation for frontends\n    - User permission verification\n</code></pre></p>"},{"location":"developer-guide/architecture/#6-utility-services","title":"6. Utility Services","text":"<p>Smart Logger (<code>StreamBot/utils/smart_logger.py</code>) <pre><code># Advanced logging system\nclass SmartLogger:\n    - Structured logging with JSON format\n    - Log level management and filtering\n    - Performance metrics collection\n    - Error tracking and alerting\n    - Log rotation and archival\n</code></pre></p> <p>Memory Manager (<code>StreamBot/utils/memory_manager.py</code>) <pre><code># Memory optimization and monitoring\nclass MemoryManager:\n    - Memory usage tracking and optimization\n    - Garbage collection management\n    - Cache management and cleanup\n    - Memory leak detection\n    - Resource allocation monitoring\n</code></pre></p> <p>Cleanup Scheduler (<code>StreamBot/utils/cleanup_scheduler.py</code>) <pre><code># Automated maintenance tasks\nclass CleanupScheduler:\n    - Expired file cleanup\n    - Database maintenance\n    - Log file rotation\n    - Session cleanup\n    - Cache optimization\n</code></pre></p>"},{"location":"developer-guide/architecture/#technology-stack","title":"Technology Stack","text":""},{"location":"developer-guide/architecture/#core-technologies","title":"Core Technologies","text":"Component Technology Version Purpose Runtime Python 3.11+ Core application language Bot Framework Pyrogram 2.0+ Telegram API integration Web Framework aiohttp 3.8+ HTTP server and client Database MongoDB 4.4+ Data persistence Async Runtime asyncio Built-in Asynchronous operations"},{"location":"developer-guide/architecture/#supporting-libraries","title":"Supporting Libraries","text":"Library Purpose Features motor Async MongoDB driver Non-blocking database operations aiofiles Async file operations Efficient file I/O python-dotenv Environment management Configuration loading psutil System monitoring Resource usage tracking uvloop Performance optimization Enhanced event loop"},{"location":"developer-guide/architecture/#data-flow-architecture","title":"Data Flow Architecture","text":""},{"location":"developer-guide/architecture/#file-upload-flow","title":"File Upload Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Bot\n    participant ClientManager\n    participant Database\n    participant Storage\n    participant WebServer\n\n    User-&gt;&gt;Bot: Upload file\n    Bot-&gt;&gt;Bot: Detect file type\n    Bot-&gt;&gt;ClientManager: Process file\n    ClientManager-&gt;&gt;Storage: Store in Telegram\n    Storage--&gt;&gt;ClientManager: File stored\n    ClientManager--&gt;&gt;Bot: File ID &amp; metadata\n    Bot-&gt;&gt;Database: Save file record\n    Database--&gt;&gt;Bot: Record saved\n    Bot-&gt;&gt;Bot: Generate download/stream URLs\n    Bot-&gt;&gt;User: Send links\n\n    Note over Bot,User: For videos: Both download and streaming links</code></pre>"},{"location":"developer-guide/architecture/#video-streaming-flow","title":"Video Streaming Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant WebServer\n    participant StreamingHandler\n    participant TelegramAPI\n    participant VideoFrontend\n\n    Client-&gt;&gt;VideoFrontend: Access video URL\n    VideoFrontend-&gt;&gt;WebServer: Request stream with range\n    WebServer-&gt;&gt;StreamingHandler: Process range request\n    StreamingHandler-&gt;&gt;TelegramAPI: Fetch file chunk\n    TelegramAPI--&gt;&gt;StreamingHandler: Return chunk data\n    StreamingHandler--&gt;&gt;WebServer: Process and optimize\n    WebServer--&gt;&gt;VideoFrontend: Stream chunk with headers\n    VideoFrontend--&gt;&gt;Client: Video playback\n\n    Note over Client,VideoFrontend: Supports seeking and progressive loading</code></pre>"},{"location":"developer-guide/architecture/#api-request-flow","title":"API Request Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant WebServer\n    participant SecurityMiddleware\n    participant RateLimiter\n    participant Handler\n    participant Database\n\n    Client-&gt;&gt;WebServer: API Request\n    WebServer-&gt;&gt;SecurityMiddleware: Validate request\n    SecurityMiddleware-&gt;&gt;RateLimiter: Check limits\n    RateLimiter--&gt;&gt;SecurityMiddleware: Allowed/Denied\n    SecurityMiddleware-&gt;&gt;Handler: Process request\n    Handler-&gt;&gt;Database: Query data\n    Database--&gt;&gt;Handler: Return data\n    Handler--&gt;&gt;WebServer: Response\n    WebServer--&gt;&gt;Client: JSON response</code></pre>"},{"location":"developer-guide/architecture/#video-streaming-architecture","title":"Video Streaming Architecture","text":""},{"location":"developer-guide/architecture/#streaming-infrastructure","title":"Streaming Infrastructure","text":"<p>Range Request Processing: <pre><code># HTTP range request handling\nclass RangeRequestHandler:\n    - Parse range headers (bytes=start-end)\n    - Validate range against file size\n    - Stream partial content with 206 status\n    - Support multiple range requests\n    - Optimize chunk sizes for performance\n</code></pre></p> <p>Video Format Support: - Container Formats: MP4, MKV, AVI, WebM, MOV, 3GP - Video Codecs: H.264, H.265, VP8, VP9, AV1 - Audio Codecs: AAC, MP3, Opus, Vorbis - Streaming Protocols: HTTP progressive download with range support</p> <p>Frontend Integration: <pre><code># Video frontend URL generation\ndef generate_video_url(stream_url, frontend_url):\n    return f\"{frontend_url}?stream={urllib.parse.quote(stream_url)}\"\n\n# Default: https://cricster.pages.dev?stream=...\n# Custom: https://your-player.com?stream=...\n</code></pre></p>"},{"location":"developer-guide/architecture/#performance-optimizations","title":"Performance Optimizations","text":"<p>Caching Strategy: <pre><code># Multi-level caching implementation\n- Browser caching with appropriate headers\n- CDN integration for global distribution\n- Application-level caching for metadata\n- Database query optimization\n- Memory-based session caching\n</code></pre></p> <p>Bandwidth Management: <pre><code># Intelligent bandwidth allocation\n- Per-user bandwidth tracking\n- Quality-based streaming optimization\n- Adaptive bitrate simulation\n- Concurrent stream limiting\n- Peak usage load balancing\n</code></pre></p>"},{"location":"developer-guide/architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"developer-guide/architecture/#multi-layer-security","title":"Multi-Layer Security","text":"<p>Request Security: 1. Input Validation: Comprehensive input sanitization 2. Rate Limiting: Multiple rate limiting strategies 3. Authentication: Encoded file ID security 4. Authorization: User permission verification 5. Encryption: HTTPS enforcement and secure headers</p> <p>File Security: <pre><code># File validation pipeline\nclass FileSecurityPipeline:\n    - File type validation\n    - Size limit enforcement\n    - Malicious content scanning\n    - Virus scanning integration (optional)\n    - Content policy enforcement\n</code></pre></p> <p>API Security: <pre><code># API protection mechanisms\n- CORS policy enforcement\n- Security header injection\n- Request size limiting\n- Response sanitization\n- Error message sanitization\n</code></pre></p>"},{"location":"developer-guide/architecture/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"developer-guide/architecture/#benchmarks-and-capabilities","title":"Benchmarks and Capabilities","text":"Metric Performance Notes Concurrent Downloads 100+ per instance With proper resource allocation Video Streams 50+ simultaneous Depends on bandwidth and storage Response Time &lt;100ms API calls Excluding file transfer time Memory Usage 1-4 GB typical Scales with concurrent operations CPU Usage 10-30% average Spikes during file processing Database Ops 1000+ ops/sec MongoDB with proper indexing"},{"location":"developer-guide/architecture/#scalability-patterns","title":"Scalability Patterns","text":"<p>Horizontal Scaling: <pre><code># Multi-instance deployment\n- Load balancer distribution\n- Shared database cluster\n- Session affinity handling\n- Cross-instance communication\n- Distributed caching\n</code></pre></p> <p>Vertical Scaling: <pre><code># Resource optimization\n- Worker process scaling\n- Memory allocation tuning\n- Database connection pooling\n- Cache size optimization\n- Concurrent operation limits\n</code></pre></p>"},{"location":"developer-guide/architecture/#development-environment","title":"Development Environment","text":""},{"location":"developer-guide/architecture/#local-development-setup","title":"Local Development Setup","text":"<pre><code># Development configuration\nENVIRONMENT = \"development\"\nDEBUG = True\nLOG_LEVEL = \"DEBUG\"\nAUTO_RELOAD = True\nDEVELOPMENT_FEATURES = True\n</code></pre>"},{"location":"developer-guide/architecture/#testing-architecture","title":"Testing Architecture","text":"<p>Unit Testing: <pre><code># Test coverage areas\n- Component isolation testing\n- Mock external dependencies\n- Database operation testing\n- API endpoint validation\n- Security feature testing\n</code></pre></p> <p>Integration Testing: <pre><code># End-to-end testing\n- Full workflow testing\n- Multi-client scenarios\n- Video streaming validation\n- Performance benchmarking\n- Error condition handling\n</code></pre></p>"},{"location":"developer-guide/architecture/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"developer-guide/architecture/#production-deployment","title":"Production Deployment","text":"<p>Container Architecture: <pre><code># Docker composition\nservices:\n  streambot:\n    - Application container\n    - Health check endpoints\n    - Resource limits\n    - Environment configuration\n    - Volume mounts for persistence\n\n  mongodb:\n    - Database container\n    - Data persistence\n    - Backup configuration\n    - Performance tuning\n    - Security hardening\n</code></pre></p> <p>Monitoring Integration: <pre><code># Production monitoring\n- Health check endpoints\n- Metrics collection\n- Error tracking\n- Performance monitoring\n- Alerting configuration\n</code></pre></p>"},{"location":"developer-guide/architecture/#future-architecture-considerations","title":"Future Architecture Considerations","text":""},{"location":"developer-guide/architecture/#planned-enhancements","title":"Planned Enhancements","text":"<p>Microservices Migration: - Service decomposition strategy - API gateway implementation - Service mesh integration - Independent scaling capabilities - Fault isolation improvements</p> <p>Advanced Video Features: - Adaptive bitrate streaming - Video transcoding pipeline - Quality optimization - CDN integration - Edge caching strategies</p> <p>Enhanced Security: - End-to-end encryption - Advanced threat detection - Audit logging system - Compliance frameworks - Zero-trust architecture</p>"},{"location":"developer-guide/architecture/#repository-information","title":"Repository Information","text":"<p>GitHub Repository: https://github.com/AnikethJana/Telegram-Download-Link-Generator</p> <p>Architecture Documentation: This document is part of the comprehensive StreamBot documentation suite.</p> <p>For implementation details, see: - Installation Guide - Configuration Reference - API Documentation - Contributing Guide </p>"},{"location":"developer-guide/contributing/","title":"Contributing to StreamBot","text":"<p>Thank you for considering contributing to StreamBot! \ud83c\udf89</p> <p>This guide outlines how to contribute effectively to the project and maintain code quality while working with both file sharing and advanced video streaming features.</p>"},{"location":"developer-guide/contributing/#ways-to-contribute","title":"Ways to Contribute","text":""},{"location":"developer-guide/contributing/#code-contributions","title":"\ud83d\udcbb Code Contributions","text":"<ul> <li>Bug fixes and improvements</li> <li>New features and enhancements (including video streaming features)</li> <li>Performance optimizations</li> <li>Test coverage improvements</li> <li>Video frontend integrations</li> </ul>"},{"location":"developer-guide/contributing/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Improve existing documentation</li> <li>Add examples and tutorials (especially for video streaming)</li> <li>Fix typos and clarifications</li> <li>Translate documentation</li> </ul>"},{"location":"developer-guide/contributing/#bug-reports","title":"\ud83d\udc1b Bug Reports","text":"<ul> <li>Report bugs with detailed information</li> <li>Provide steps to reproduce issues</li> <li>Share system information and logs</li> <li>Test video streaming functionality</li> </ul>"},{"location":"developer-guide/contributing/#feature-requests","title":"\ud83d\udca1 Feature Requests","text":"<ul> <li>Suggest new features or improvements</li> <li>Discuss implementation approaches</li> <li>Share use cases and requirements</li> <li>Propose video streaming enhancements</li> </ul>"},{"location":"developer-guide/contributing/#development-setup","title":"Development Setup","text":""},{"location":"developer-guide/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+ (required for optimal performance)</li> <li>MongoDB (local or cloud)</li> <li>Git</li> <li>Code editor (VS Code recommended with Python extension)</li> <li>FFmpeg (optional, for video testing)</li> </ul>"},{"location":"developer-guide/contributing/#quick-setup","title":"Quick Setup","text":"<pre><code># Fork and clone the repository\ngit clone https://github.com/your-username/Telegram-Download-Link-Generator.git\ncd Telegram-Download-Link-Generator\n\n# Set up virtual environment with Python 3.11+\npython3.11 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install dependencies\npip install --upgrade pip\npip install -r requirements.txt\n\n# Install development dependencies\npip install -r requirements-dev.txt  # If exists\n\n# Copy environment configuration\ncp .env.example .env\n# Edit .env with your configuration including video frontend settings\n\n# Run the application\npython -m StreamBot\n</code></pre>"},{"location":"developer-guide/contributing/#development-environment-configuration","title":"Development Environment Configuration","text":"<pre><code># Development-specific settings\nAPI_ID=your_dev_api_id\nAPI_HASH=your_dev_api_hash\nBOT_TOKEN=your_dev_bot_token\nLOG_CHANNEL=-1001234567890\nDATABASE_URL=mongodb://localhost:27017\nDATABASE_NAME=StreamBotDev\nBASE_URL=http://localhost:8080\nPORT=8080\nBIND_ADDRESS=127.0.0.1\n\n# Video streaming development\nVIDEO_FRONTEND_URL=https://cricster.pages.dev\n# Or use local frontend for testing: http://localhost:3000\n\n# Development features\nDEBUG=true\nLOG_LEVEL=DEBUG\nDEVELOPMENT_MODE=true\n</code></pre>"},{"location":"developer-guide/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"developer-guide/contributing/#1-create-a-branch","title":"1. Create a Branch","text":"<pre><code>git checkout -b feature/your-feature-name\n# or\ngit checkout -b fix/bug-description\n# or\ngit checkout -b video/streaming-enhancement\n</code></pre> <p>Branch Naming Convention: - <code>feature/feature-name</code> - New features - <code>fix/bug-description</code> - Bug fixes - <code>video/streaming-feature</code> - Video streaming specific features - <code>docs/documentation-topic</code> - Documentation improvements - <code>refactor/component-name</code> - Code refactoring - <code>perf/optimization-area</code> - Performance improvements</p>"},{"location":"developer-guide/contributing/#2-make-changes","title":"2. Make Changes","text":"<p>Follow these guidelines:</p>"},{"location":"developer-guide/contributing/#code-style","title":"Code Style","text":"<p>Python Code Standards: <pre><code># Use Black for code formatting\nblack StreamBot/\n\n# Use isort for import sorting\nisort StreamBot/\n\n# Use flake8 for linting\nflake8 StreamBot/\n</code></pre></p> <p>Code Quality Requirements: - Follow PEP 8 style guidelines - Use type hints for all functions and methods - Write descriptive variable and function names - Keep functions small and focused (max 50 lines) - Use async/await for I/O operations - Handle exceptions appropriately</p>"},{"location":"developer-guide/contributing/#video-streaming-development","title":"Video Streaming Development","text":"<p>Video Feature Guidelines: <pre><code># Example: Adding a new video streaming feature\nasync def process_video_stream(\n    file_id: str, \n    range_header: Optional[str] = None,\n    quality: str = \"auto\"\n) -&gt; StreamingResponse:\n    \"\"\"\n    Process video streaming request with range support.\n\n    Args:\n        file_id: Encoded file identifier\n        range_header: HTTP range header for seeking\n        quality: Video quality preference\n\n    Returns:\n        StreamingResponse with video data\n\n    Raises:\n        FileNotFoundError: If file doesn't exist\n        RangeNotSatisfiableError: If range is invalid\n    \"\"\"\n    # Implementation here\n</code></pre></p> <p>Video Testing Requirements: - Test with multiple video formats (MP4, MKV, WebM) - Verify range request functionality - Test seeking capabilities - Validate frontend integration - Check performance with large files</p>"},{"location":"developer-guide/contributing/#documentation_1","title":"Documentation","text":"<p>Documentation Standards: - Add docstrings to all public functions and classes - Update relevant documentation files - Include code examples where helpful - Keep comments concise and meaningful - Document video streaming features thoroughly</p> <p>Example Documentation: <pre><code>class VideoStreamingHandler:\n    \"\"\"\n    Handles video streaming requests with range support.\n\n    This class provides advanced video streaming capabilities including:\n    - HTTP range request processing\n    - Video seeking support\n    - Multiple format handling\n    - Frontend integration\n\n    Example:\n        ```python\n        handler = VideoStreamingHandler()\n        response = await handler.stream_video(file_id, range_header)\n        ```\n    \"\"\"\n</code></pre></p>"},{"location":"developer-guide/contributing/#testing","title":"Testing","text":"<p>Testing Requirements: - Write unit tests for new functionality - Ensure existing tests pass: <code>pytest</code> - Aim for &gt;80% code coverage - Test error conditions and edge cases - Include video streaming tests</p> <p>Video Streaming Tests: <pre><code>import pytest\nfrom unittest.mock import Mock, patch\nfrom StreamBot.web.streaming import VideoStreamingHandler\n\nclass TestVideoStreaming:\n\n    async def test_range_request_processing(self):\n        \"\"\"Test HTTP range request handling.\"\"\"\n        handler = VideoStreamingHandler()\n        range_header = \"bytes=0-1023\"\n\n        result = await handler.process_range_request(\n            file_id=\"test_video\",\n            range_header=range_header\n        )\n\n        assert result.status_code == 206\n        assert \"Content-Range\" in result.headers\n\n    async def test_video_seeking_functionality(self):\n        \"\"\"Test video seeking capabilities.\"\"\"\n        handler = VideoStreamingHandler()\n\n        # Test seeking to specific timestamp\n        result = await handler.seek_to_timestamp(\n            file_id=\"test_video\",\n            timestamp=30.5\n        )\n\n        assert result is not None\n        assert result.content_length &gt; 0\n\n    async def test_frontend_integration(self):\n        \"\"\"Test video frontend URL generation.\"\"\"\n        from StreamBot.utils.video import generate_frontend_url\n\n        stream_url = \"https://example.com/stream/abc123\"\n        frontend_url = generate_frontend_url(\n            stream_url, \n            \"https://cricster.pages.dev\"\n        )\n\n        assert \"cricster.pages.dev\" in frontend_url\n        assert \"stream=\" in frontend_url\n</code></pre></p>"},{"location":"developer-guide/contributing/#3-commit-changes","title":"3. Commit Changes","text":"<p>Use conventional commit format:</p> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;description&gt;\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>Types: <code>feat</code>, <code>fix</code>, <code>docs</code>, <code>style</code>, <code>refactor</code>, <code>test</code>, <code>chore</code>, <code>perf</code></p> <p>Examples: <pre><code>git commit -m \"feat(video): add seeking support for video streaming\"\ngit commit -m \"fix(api): handle range request edge cases\"\ngit commit -m \"docs(streaming): update video frontend integration guide\"\ngit commit -m \"perf(streaming): optimize video chunk processing\"\ngit commit -m \"test(video): add comprehensive streaming test suite\"\n</code></pre></p>"},{"location":"developer-guide/contributing/#4-test-your-changes","title":"4. Test Your Changes","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=StreamBot --cov-report=html\n\n# Run specific test categories\npytest -m \"video_streaming\"  # Video streaming tests\npytest -m \"api\"              # API tests\npytest -m \"integration\"      # Integration tests\n\n# Check code style\nblack --check StreamBot/\nisort --check-only StreamBot/\nflake8 StreamBot/\n\n# Type checking\nmypy StreamBot/\n\n# Test the application manually\npython -m StreamBot\n</code></pre> <p>Video Streaming Manual Testing: <pre><code># Test video upload and streaming\n# 1. Start StreamBot\n# 2. Upload various video formats to bot\n# 3. Test download links\n# 4. Test streaming links with seeking\n# 5. Verify frontend integration\n</code></pre></p>"},{"location":"developer-guide/contributing/#5-submit-pull-request","title":"5. Submit Pull Request","text":"<ol> <li>Push your branch: <code>git push origin feature/your-feature-name</code></li> <li>Create a Pull Request on GitHub</li> <li>Fill out the PR template with:</li> <li>Clear description of changes</li> <li>Reference to related issues</li> <li>Screenshots/videos if applicable (especially for video features)</li> <li>Testing performed</li> </ol> <p>Pull Request Template: <pre><code>## Description\nBrief description of changes made.\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Video streaming enhancement\n- [ ] Documentation update\n- [ ] Performance improvement\n\n## Testing\n- [ ] Unit tests added/updated\n- [ ] Integration tests passed\n- [ ] Manual testing performed\n- [ ] Video streaming functionality tested\n\n## Video Streaming (if applicable)\n- [ ] Range requests working\n- [ ] Seeking functionality tested\n- [ ] Frontend integration verified\n- [ ] Multiple formats tested\n\n## Screenshots/Videos\nInclude screenshots or videos demonstrating the changes.\n</code></pre></p>"},{"location":"developer-guide/contributing/#code-quality-standards","title":"Code Quality Standards","text":""},{"location":"developer-guide/contributing/#formatting-and-linting","title":"Formatting and Linting","text":"<p>Automated Code Quality: <pre><code># Setup pre-commit hooks (recommended)\npip install pre-commit\npre-commit install\n\n# This will run automatically on git commit:\n# - Black formatting\n# - isort import sorting\n# - flake8 linting\n# - mypy type checking\n</code></pre></p> <p>Manual Quality Checks: <pre><code># Format all code\nblack StreamBot/\n\n# Sort imports\nisort StreamBot/\n\n# Check code quality\nflake8 StreamBot/ --max-line-length=88 --extend-ignore=E203,W503\n\n# Type checking\nmypy StreamBot/ --ignore-missing-imports\n</code></pre></p>"},{"location":"developer-guide/contributing/#performance-guidelines","title":"Performance Guidelines","text":"<p>General Performance: - Use async/await for I/O operations - Implement proper caching strategies - Optimize database queries - Use connection pooling - Monitor memory usage</p> <p>Video Streaming Performance: <pre><code># Example: Optimized video streaming\nasync def stream_video_optimized(\n    file_id: str,\n    range_header: Optional[str] = None\n) -&gt; AsyncIterator[bytes]:\n    \"\"\"Optimized video streaming with proper buffering.\"\"\"\n\n    chunk_size = 1024 * 1024  # 1MB chunks\n\n    async with get_file_stream(file_id) as stream:\n        if range_header:\n            start, end = parse_range_header(range_header)\n            await stream.seek(start)\n            remaining = end - start + 1\n        else:\n            remaining = await stream.get_size()\n\n        while remaining &gt; 0:\n            chunk_size_to_read = min(chunk_size, remaining)\n            chunk = await stream.read(chunk_size_to_read)\n\n            if not chunk:\n                break\n\n            yield chunk\n            remaining -= len(chunk)\n</code></pre></p>"},{"location":"developer-guide/contributing/#project-structure","title":"Project Structure","text":"<p>Understanding the codebase:</p> <pre><code>StreamBot/\n\u251c\u2500\u2500 StreamBot/              # Main application\n\u2502   \u251c\u2500\u2500 __main__.py        # Entry point\n\u2502   \u251c\u2500\u2500 config.py          # Configuration management\n\u2502   \u251c\u2500\u2500 bot.py             # Bot handlers and logic\n\u2502   \u251c\u2500\u2500 client_manager.py  # Multi-client management\n\u2502   \u251c\u2500\u2500 database/          # Database operations\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 database.py\n\u2502   \u251c\u2500\u2500 security/          # Security middleware\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 middleware.py\n\u2502   \u2502   \u251c\u2500\u2500 rate_limiter.py\n\u2502   \u2502   \u2514\u2500\u2500 validator.py\n\u2502   \u251c\u2500\u2500 utils/            # Utility modules\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 bandwidth.py\n\u2502   \u2502   \u251c\u2500\u2500 cleanup_scheduler.py\n\u2502   \u2502   \u251c\u2500\u2500 custom_dl.py\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u251c\u2500\u2500 file_properties.py\n\u2502   \u2502   \u251c\u2500\u2500 memory_manager.py\n\u2502   \u2502   \u251c\u2500\u2500 smart_logger.py\n\u2502   \u2502   \u251c\u2500\u2500 stream_cleanup.py\n\u2502   \u2502   \u2514\u2500\u2500 utils.py\n\u2502   \u2514\u2500\u2500 web/              # Web server and streaming\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 streaming.py  # Video streaming handler\n\u2502       \u2514\u2500\u2500 web.py        # Main web server\n\u251c\u2500\u2500 tests/                # Test suite\n\u251c\u2500\u2500 docs/                 # Documentation\n\u251c\u2500\u2500 requirements.txt      # Dependencies\n\u251c\u2500\u2500 .env.example         # Environment template\n\u251c\u2500\u2500 Dockerfile           # Container configuration\n\u2514\u2500\u2500 docker-compose.yml  # Multi-service setup\n</code></pre>"},{"location":"developer-guide/contributing/#adding-new-features","title":"Adding New Features","text":""},{"location":"developer-guide/contributing/#feature-development-process","title":"Feature Development Process","text":"<ol> <li>Discuss the feature in GitHub Issues or Discussions</li> <li>Design the implementation with community input</li> <li>Create a branch following naming conventions</li> <li>Implement the feature with comprehensive tests</li> <li>Update documentation as needed</li> <li>Submit a pull request for review</li> </ol>"},{"location":"developer-guide/contributing/#feature-guidelines","title":"Feature Guidelines","text":"<p>General Guidelines: - Follow existing patterns in the codebase - Add appropriate error handling and logging - Update configuration if needed - Add tests for new functionality - Update documentation accordingly</p> <p>Video Streaming Feature Guidelines: - Maintain compatibility with existing video frontends - Support range requests for seeking functionality - Optimize for performance and memory usage - Test with multiple video formats - Document frontend integration requirements</p>"},{"location":"developer-guide/contributing/#example-adding-a-new-video-feature","title":"Example: Adding a New Video Feature","text":"<pre><code># StreamBot/web/video_transcoding.py\nfrom typing import Optional, Dict, Any\nimport asyncio\nfrom .streaming import VideoStreamingHandler\n\nclass VideoTranscodingService:\n    \"\"\"\n    Service for video transcoding and quality optimization.\n\n    This service provides:\n    - Multiple quality transcoding\n    - Format conversion\n    - Adaptive bitrate preparation\n    \"\"\"\n\n    def __init__(self, streaming_handler: VideoStreamingHandler):\n        self.streaming_handler = streaming_handler\n        self.supported_qualities = [\"240p\", \"480p\", \"720p\", \"1080p\"]\n\n    async def transcode_video(\n        self, \n        file_id: str, \n        target_quality: str = \"720p\"\n    ) -&gt; Dict[str, Any]:\n        \"\"\"\n        Transcode video to specified quality.\n\n        Args:\n            file_id: Source video file identifier\n            target_quality: Target quality (240p, 480p, 720p, 1080p)\n\n        Returns:\n            Dict containing transcoded file information\n\n        Raises:\n            UnsupportedQualityError: If quality not supported\n            TranscodingError: If transcoding fails\n        \"\"\"\n        if target_quality not in self.supported_qualities:\n            raise UnsupportedQualityError(f\"Quality {target_quality} not supported\")\n\n        # Implementation here\n        pass\n</code></pre>"},{"location":"developer-guide/contributing/#bug-reports_1","title":"Bug Reports","text":""},{"location":"developer-guide/contributing/#creating-good-bug-reports","title":"Creating Good Bug Reports","text":"<p>Include the following information:</p> <p><pre><code>**Bug Description**\nClear description of the issue.\n\n**Steps to Reproduce**\n1. Go to '...'\n2. Click on '...'\n3. Upload video file\n4. See error\n\n**Expected Behavior**\nWhat should happen.\n\n**Actual Behavior**\nWhat actually happens.\n\n**Environment**\n- OS: [e.g., Ubuntu 22.04]\n- Python Version: [e.g., 3.11.5]\n- StreamBot Version: [e.g., 2.1.0]\n- Browser (for video streaming): [e.g., Chrome 118]\n\n**Video Streaming Specific (if applicable)**\n- Video format: [e.g., MP4, MKV]\n- Video size: [e.g., 500MB]\n- Frontend used: [e.g., Cricster, Custom]\n- Range request working: [Yes/No]\n\n**Logs**\n</code></pre> [Paste relevant log entries] <pre><code>**Additional Context**\nAny other relevant information.\n</code></pre></p>"},{"location":"developer-guide/contributing/#community-guidelines","title":"Community Guidelines","text":""},{"location":"developer-guide/contributing/#be-respectful","title":"Be Respectful","text":"<ul> <li>Use inclusive language</li> <li>Be patient with newcomers</li> <li>Provide constructive feedback</li> <li>Celebrate contributions of all sizes</li> </ul>"},{"location":"developer-guide/contributing/#communication","title":"Communication","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>GitHub Discussions: General questions and ideas</li> <li>Pull Requests: Code review and discussion</li> <li>Telegram: @ajmods_bot for direct support</li> </ul>"},{"location":"developer-guide/contributing/#video-streaming-community","title":"Video Streaming Community","text":"<ul> <li>Share video frontend integrations</li> <li>Discuss performance optimizations</li> <li>Help test new video features</li> <li>Contribute to video streaming documentation</li> </ul>"},{"location":"developer-guide/contributing/#recognition","title":"Recognition","text":"<p>Contributors will be recognized in: - Contributors section in README - Release notes for significant contributions - Documentation where applicable - Hall of Fame for major contributions</p>"},{"location":"developer-guide/contributing/#development-resources","title":"Development Resources","text":""},{"location":"developer-guide/contributing/#useful-tools","title":"Useful Tools","text":"<p>Python Development: - VS Code with Python extension - PyCharm Professional/Community - Black for code formatting - isort for import sorting - mypy for type checking</p> <p>Video Development: - FFmpeg for video testing and analysis - VLC for video format testing - Browser DevTools for streaming debugging - Postman for API testing</p> <p>Testing Tools: - pytest for unit testing - pytest-asyncio for async testing - pytest-cov for coverage reporting - locust for load testing</p>"},{"location":"developer-guide/contributing/#learning-resources","title":"Learning Resources","text":"<p>Python &amp; AsyncIO: - Real Python AsyncIO Tutorial - Python Type Hints Guide</p> <p>Video Streaming: - HTTP Range Requests - Video Streaming Fundamentals</p> <p>Telegram Bot Development: - Pyrogram Documentation - Telegram Bot API</p>"},{"location":"developer-guide/contributing/#getting-help","title":"Getting Help","text":"<p>If you need help:</p> <ol> <li>Check existing documentation</li> <li>Search GitHub Issues for similar problems</li> <li>Ask in GitHub Discussions</li> <li>Contact maintainers via Telegram</li> </ol>"},{"location":"developer-guide/contributing/#development-support","title":"Development Support","text":"<p>For development-specific help: - Architecture questions: Review Architecture Guide - Setup issues: Check Installation Guide - Video streaming: Review API Documentation - Configuration: See Configuration Guide</p>"},{"location":"developer-guide/contributing/#release-process","title":"Release Process","text":""},{"location":"developer-guide/contributing/#version-numbering","title":"Version Numbering","text":"<p>StreamBot follows Semantic Versioning: - Major (X.0.0): Breaking changes - Minor (X.Y.0): New features, video streaming enhancements - Patch (X.Y.Z): Bug fixes, security updates</p>"},{"location":"developer-guide/contributing/#release-checklist","title":"Release Checklist","text":"<ul> <li> All tests passing</li> <li> Documentation updated</li> <li> Video streaming features tested</li> <li> Performance benchmarks verified</li> <li> Security review completed</li> <li> Changelog updated</li> <li> Version bumped appropriately</li> </ul> <p>Thank you for contributing to StreamBot! Every contribution helps make the project better and brings advanced video streaming capabilities to more users. \ud83d\ude80 </p>"},{"location":"getting-started/configuration/","title":"Configuration Guide","text":"<p>StreamBot uses environment variables for configuration. This guide covers all available options and their purposes.</p>"},{"location":"getting-started/configuration/#environment-file-setup","title":"Environment File Setup","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code>cp .env.example .env\n</code></pre>"},{"location":"getting-started/configuration/#required-configuration","title":"Required Configuration","text":""},{"location":"getting-started/configuration/#telegram-settings","title":"Telegram Settings","text":"<pre><code># Telegram API credentials (required)\nAPI_ID=12345678\nAPI_HASH=your_api_hash_from_my_telegram_org\nBOT_TOKEN=123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi\nLOG_CHANNEL=-1001234567890\n</code></pre> Variable Description How to Get <code>API_ID</code> Telegram API ID Get from my.telegram.org <code>API_HASH</code> Telegram API Hash Get from my.telegram.org <code>BOT_TOKEN</code> Bot token from BotFather Message @BotFather <code>LOG_CHANNEL</code> Channel ID for file storage Create private channel, add bot as admin"},{"location":"getting-started/configuration/#database-configuration","title":"Database Configuration","text":"<pre><code># MongoDB connection (required)\nDATABASE_URL=mongodb://localhost:27017\nDATABASE_NAME=StreamBotDB\n</code></pre> Variable Description Examples <code>DATABASE_URL</code> MongoDB connection string <code>mongodb://localhost:27017</code> (local)<code>mongodb+srv://user:pass@cluster.mongodb.net/</code> (Atlas) <code>DATABASE_NAME</code> Database name <code>StreamBotDB</code>, <code>MyStreamBot</code>"},{"location":"getting-started/configuration/#server-configuration","title":"Server Configuration","text":"<pre><code># Web server settings (required)\nBASE_URL=https://yourdomain.com\nPORT=8080\nBIND_ADDRESS=0.0.0.0\n</code></pre> Variable Description Examples <code>BASE_URL</code> Public URL for download/streaming links <code>https://files.yourdomain.com</code>, <code>http://localhost:8080</code> <code>PORT</code> Port for web server <code>8080</code>, <code>3000</code>, <code>80</code> <code>BIND_ADDRESS</code> IP address to bind server <code>127.0.0.1</code> (local), <code>0.0.0.0</code> (public)"},{"location":"getting-started/configuration/#video-streaming-frontend","title":"Video Streaming Frontend","text":"<pre><code># Video streaming frontend (defaults to Cricster)\nVIDEO_FRONTEND_URL=https://cricster.pages.dev\n</code></pre> Variable Description Default Disable <code>VIDEO_FRONTEND_URL</code> Video player frontend URL <code>https://cricster.pages.dev</code> Set to <code>false</code>"},{"location":"getting-started/configuration/#optional-configuration","title":"Optional Configuration","text":""},{"location":"getting-started/configuration/#admin-settings","title":"Admin Settings","text":"<pre><code># Admin users and access\nADMINS=123456789 987654321\n</code></pre> Variable Description Format <code>ADMINS</code> Space-separated admin user IDs <code>123456789 987654321</code>"},{"location":"getting-started/configuration/#multi-client-support","title":"Multi-Client Support","text":"<pre><code># Additional bot tokens for load balancing\nADDITIONAL_BOT_TOKENS=token1,token2,token3\nWORKER_CLIENT_PYROGRAM_WORKERS=1\nWORKER_SESSIONS_IN_MEMORY=true\n</code></pre> Variable Description Benefits <code>ADDITIONAL_BOT_TOKENS</code> Comma-separated additional bot tokens Increases download/streaming throughput, load balancing <code>WORKER_CLIENT_PYROGRAM_WORKERS</code> Workers per additional client Keep at 1 for stability <code>WORKER_SESSIONS_IN_MEMORY</code> Store sessions in memory Reduces disk I/O"},{"location":"getting-started/configuration/#rate-limiting","title":"Rate Limiting","text":"<pre><code># User rate limiting\nMAX_LINKS_PER_DAY=5\nBANDWIDTH_LIMIT_GB=100\n</code></pre> Variable Description Default Disable <code>MAX_LINKS_PER_DAY</code> Daily link generation limit per user <code>5</code> <code>0</code> (unlimited) <code>BANDWIDTH_LIMIT_GB</code> Monthly bandwidth limit in GB <code>100</code> <code>0</code> (unlimited)"},{"location":"getting-started/configuration/#force-subscription","title":"Force Subscription","text":"<pre><code># Require channel subscription\nFORCE_SUB_CHANNEL=-1009876543210\n</code></pre> Variable Description Usage <code>FORCE_SUB_CHANNEL</code> Channel ID for required subscription Users must join channel before using bot"},{"location":"getting-started/configuration/#performance-tuning","title":"Performance Tuning","text":"<pre><code># Application performance settings\nWORKERS=4\nSESSION_NAME=StreamBot\n</code></pre> Variable Description Default Recommendations <code>WORKERS</code> Number of worker threads <code>4</code> 2-8 depending on server <code>SESSION_NAME</code> Session file prefix <code>TgDlBot</code> Unique name per instance"},{"location":"getting-started/configuration/#link-management","title":"Link Management","text":"<pre><code># Link expiration settings\nLINK_EXPIRY_SECONDS=86400\n</code></pre> Variable Description Default Notes <code>LINK_EXPIRY_SECONDS</code> Link validity duration <code>86400</code> (24 hours) In seconds, affects both download and streaming links"},{"location":"getting-started/configuration/#external-integrations","title":"External Integrations","text":"<pre><code># Optional external services\nGITHUB_REPO_URL=https://github.com/AnikethJana/Telegram-Download-Link-Generator\n</code></pre> Variable Description Usage <code>GITHUB_REPO_URL</code> Repository URL for info display Shown in <code>/info</code> command and API"},{"location":"getting-started/configuration/#environment-specific-configurations","title":"Environment-Specific Configurations","text":""},{"location":"getting-started/configuration/#development-environment","title":"Development Environment","text":"<pre><code># Development settings\nAPI_ID=12345678\nAPI_HASH=your_dev_api_hash\nBOT_TOKEN=your_dev_bot_token\nLOG_CHANNEL=-1001234567890\nDATABASE_URL=mongodb://localhost:27017\nDATABASE_NAME=StreamBotDev\nBASE_URL=http://localhost:8080\nPORT=8080\nBIND_ADDRESS=127.0.0.1\nVIDEO_FRONTEND_URL=https://cricster.pages.dev\nADMINS=your_telegram_user_id\nMAX_LINKS_PER_DAY=0\nBANDWIDTH_LIMIT_GB=0\nSESSION_NAME=StreamBotDev\nWORKERS=2\n</code></pre>"},{"location":"getting-started/configuration/#production-environment","title":"Production Environment","text":"<pre><code># Production settings\nAPI_ID=12345678\nAPI_HASH=your_production_api_hash\nBOT_TOKEN=your_production_bot_token\nLOG_CHANNEL=-1001234567890\nDATABASE_URL=mongodb+srv://user:password@cluster.mongodb.net/\nDATABASE_NAME=StreamBotProd\nBASE_URL=https://files.yourdomain.com\nPORT=8080\nBIND_ADDRESS=0.0.0.0\nVIDEO_FRONTEND_URL=https://cricster.pages.dev\nADMINS=your_telegram_user_id\nMAX_LINKS_PER_DAY=5\nBANDWIDTH_LIMIT_GB=100\nFORCE_SUB_CHANNEL=-1009876543210\nADDITIONAL_BOT_TOKENS=token1,token2\nSESSION_NAME=StreamBotProd\nWORKERS=4\nLINK_EXPIRY_SECONDS=86400\n</code></pre>"},{"location":"getting-started/configuration/#video-frontend-configuration","title":"Video Frontend Configuration","text":""},{"location":"getting-started/configuration/#default-cricster-integration","title":"Default Cricster Integration","text":"<p>StreamBot comes with Cricster integration by default:</p> <pre><code># Uses Cricster as default video frontend\nVIDEO_FRONTEND_URL=https://cricster.pages.dev\n</code></pre>"},{"location":"getting-started/configuration/#custom-frontend","title":"Custom Frontend","text":"<p>To use your own video frontend:</p> <pre><code># Your custom video frontend\nVIDEO_FRONTEND_URL=https://my-video-player.example.com\n</code></pre> <p>Your frontend will receive streaming URLs as: <code>{VIDEO_FRONTEND_URL}?stream={encoded_stream_url}</code></p>"},{"location":"getting-started/configuration/#disable-video-frontend","title":"Disable Video Frontend","text":"<pre><code># Disable video frontend entirely\nVIDEO_FRONTEND_URL=false\n</code></pre>"},{"location":"getting-started/configuration/#configuration-validation","title":"Configuration Validation","text":"<p>StreamBot validates your configuration on startup. Common validation errors:</p> <p>Missing Required Variables</p> <p><pre><code>ERROR - Missing required environment variable: BOT_TOKEN\n</code></pre> Solution: Ensure all required variables are set in your <code>.env</code> file.</p> <p>Invalid Bot Token</p> <p><pre><code>ERROR - Bot token format is invalid\n</code></pre> Solution: Check your bot token format. It should look like <code>123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi</code></p> <p>Database Connection Failed</p> <p><pre><code>ERROR - Failed to connect to MongoDB\n</code></pre> Solution: Verify your <code>DATABASE_URL</code> and ensure MongoDB is running.</p> <p>Invalid Channel ID</p> <p><pre><code>ERROR - LOG_CHANNEL must be a negative integer\n</code></pre> Solution: Channel IDs should be negative numbers like <code>-1001234567890</code></p> <p>Video Frontend Not Accessible</p> <p><pre><code>WARNING - Video frontend URL not accessible\n</code></pre> Solution: Check your <code>VIDEO_FRONTEND_URL</code> or set to <code>false</code> to disable.</p>"},{"location":"getting-started/configuration/#security-best-practices","title":"Security Best Practices","text":""},{"location":"getting-started/configuration/#environment-variables-security","title":"Environment Variables Security","text":"<ol> <li>Never commit <code>.env</code> files to version control</li> <li>Use HTTPS in production for <code>BASE_URL</code></li> <li>Restrict admin access with proper <code>ADMINS</code> configuration</li> <li>Use secure MongoDB connections with authentication</li> </ol>"},{"location":"getting-started/configuration/#ip-address-restrictions","title":"IP Address Restrictions","text":"<p>For additional security, configure your reverse proxy or firewall to restrict access to specific IP addresses.</p>"},{"location":"getting-started/configuration/#configuration-templates","title":"Configuration Templates","text":""},{"location":"getting-started/configuration/#envexample-template","title":"<code>.env.example</code> Template","text":"<pre><code># Telegram Configuration (Required)\nAPI_ID=your_api_id\nAPI_HASH=your_api_hash\nBOT_TOKEN=your_bot_token\nLOG_CHANNEL=your_log_channel_id\n\n# Database Configuration (Required)\nDATABASE_URL=mongodb://localhost:27017\nDATABASE_NAME=StreamBotDB\n\n# Server Configuration (Required)\nBASE_URL=https://yourdomain.com\nPORT=8080\nBIND_ADDRESS=0.0.0.0\n\n# Video Frontend (defaults to Cricster)\nVIDEO_FRONTEND_URL=https://cricster.pages.dev\n\n# Admin Configuration\nADMINS=your_telegram_user_id\n\n# Optional Features\nMAX_LINKS_PER_DAY=5\nBANDWIDTH_LIMIT_GB=100\nFORCE_SUB_CHANNEL=\nADDITIONAL_BOT_TOKENS=\n\n# Performance Settings\nWORKERS=4\nSESSION_NAME=TgDlBot\nLINK_EXPIRY_SECONDS=86400\n</code></pre>"},{"location":"getting-started/configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":"<p>If StreamBot fails to start, check:</p> <ol> <li>Environment file exists: Ensure <code>.env</code> file is in the project root</li> <li>Required variables set: All required variables have values</li> <li>Format correctness: Variables follow the correct format</li> <li>File permissions: <code>.env</code> file is readable by the application</li> <li>No trailing spaces: Remove any trailing spaces from variable values</li> <li>Video frontend accessibility: Ensure VIDEO_FRONTEND_URL is accessible or set to <code>false</code></li> </ol> <p>For additional help, see the Installation Guide or User Guide. </p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide will walk you through installing StreamBot on your system. Choose the method that best suits your needs.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing StreamBot, ensure you have:</p> <ul> <li>Python 3.11 or higher (Download Python)</li> <li>MongoDB 4.4+ (local or cloud instance)</li> <li>Git for cloning the repository</li> <li>Telegram Bot Token from @BotFather</li> <li>Telegram API credentials from my.telegram.org</li> </ul>"},{"location":"getting-started/installation/#method-1-standard-installation","title":"Method 1: Standard Installation","text":""},{"location":"getting-started/installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/AnikethJana/Telegram-Download-Link-Generator.git\ncd Telegram-Download-Link-Generator\n</code></pre>"},{"location":"getting-started/installation/#2-create-virtual-environment","title":"2. Create Virtual Environment","text":"WindowsmacOS/Linux <pre><code>python -m venv venv\nvenv\\Scripts\\activate\n</code></pre> <pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre>"},{"location":"getting-started/installation/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#4-environment-configuration","title":"4. Environment Configuration","text":"<pre><code># Copy the example environment file\ncp .env.example .env\n\n# Edit the configuration file\nnano .env  # or use your preferred editor\n</code></pre>"},{"location":"getting-started/installation/#method-2-docker-installation","title":"Method 2: Docker Installation","text":""},{"location":"getting-started/installation/#1-using-docker-compose-recommended","title":"1. Using Docker Compose (Recommended)","text":"<pre><code># Clone repository\ngit clone https://github.com/AnikethJana/Telegram-Download-Link-Generator.git\ncd Telegram-Download-Link-Generator\n\n# Copy environment file\ncp .env.example .env\n# Edit .env with your configuration\n\n# Start with Docker Compose\ndocker-compose up -d\n</code></pre>"},{"location":"getting-started/installation/#2-using-docker-only","title":"2. Using Docker Only","text":"<pre><code># Build the image\ndocker build -t streambot .\n\n# Run the container\ndocker run -d \\\n  --name streambot \\\n  --env-file .env \\\n  -p 8080:8080 \\\n  streambot\n</code></pre>"},{"location":"getting-started/installation/#post-installation-setup","title":"Post-Installation Setup","text":""},{"location":"getting-started/installation/#1-telegram-bot-setup","title":"1. Telegram Bot Setup","text":"<ol> <li>Create a Bot:</li> <li>Message @BotFather on Telegram</li> <li>Send <code>/newbot</code> and follow the instructions</li> <li> <p>Save the bot token</p> </li> <li> <p>Create Log Channel:</p> </li> <li>Create a private Telegram channel</li> <li>Add your bot as an admin with \"Post Messages\" permission</li> <li> <p>Get the channel ID using @username_to_id_bot</p> </li> <li> <p>Get API Credentials:</p> </li> <li>Visit my.telegram.org</li> <li>Log in with your phone number</li> <li>Go to \"API Development Tools\"</li> <li>Create a new application to get API ID and Hash</li> </ol>"},{"location":"getting-started/installation/#2-mongodb-setup","title":"2. MongoDB Setup","text":"Local MongoDBMongoDB Atlas (Cloud) <pre><code># Install MongoDB (Ubuntu/Debian)\nsudo apt update\nsudo apt install mongodb\n\n# Start MongoDB service\nsudo systemctl start mongodb\nsudo systemctl enable mongodb\n</code></pre> <ol> <li>Create account at MongoDB Atlas</li> <li>Create a new cluster</li> <li>Get connection string</li> <li>Whitelist your IP address</li> </ol>"},{"location":"getting-started/installation/#3-configuration","title":"3. Configuration","text":"<p>Edit your <code>.env</code> file with the following required variables:</p> <pre><code># Telegram Configuration\nAPI_ID=your_api_id_here\nAPI_HASH=your_api_hash_here\nBOT_TOKEN=your_bot_token_here\nLOG_CHANNEL=-1001234567890\n\n# Database Configuration\nDATABASE_URL=mongodb://localhost:27017\nDATABASE_NAME=StreamBotDB\n\n# Server Configuration\nBASE_URL=http://localhost:8080\nPORT=8080\nBIND_ADDRESS=127.0.0.1\n\n# Video Frontend (defaults to Cricster)\nVIDEO_FRONTEND_URL=https://cricster.pages.dev\n\n# Admin Configuration\nADMINS=your_telegram_user_id\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":""},{"location":"getting-started/installation/#1-test-the-installation","title":"1. Test the Installation","text":"<pre><code># Start StreamBot\npython -m StreamBot\n</code></pre> <p>You should see output like: <pre><code>INFO - StreamBot starting up...\nINFO - Primary bot client operational as @YourBotName\nINFO - Web server started on http://127.0.0.1:8080\n</code></pre></p>"},{"location":"getting-started/installation/#2-test-bot-functionality","title":"2. Test Bot Functionality","text":"<ol> <li>Send <code>/start</code> to your bot on Telegram</li> <li>Send a file to test link generation</li> <li>For videos, test both download and streaming functionality</li> <li>Visit <code>http://localhost:8080/api/info</code> to check API status</li> </ol>"},{"location":"getting-started/installation/#3-test-video-streaming","title":"3. Test Video Streaming","text":"<ol> <li>Send a video file to your bot</li> <li>Click the \"\ud83c\udfac Play Video\" button (if VIDEO_FRONTEND_URL is configured)</li> <li>Test video seeking and playback functionality</li> </ol>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>Bot token invalid: <pre><code>ERROR - Bot token is invalid\n</code></pre> - Verify your bot token in the <code>.env</code> file - Ensure there are no extra spaces or characters</p> <p>Database connection failed: <pre><code>ERROR - Failed to connect to MongoDB\n</code></pre> - Check if MongoDB is running: <code>sudo systemctl status mongodb</code> - Verify DATABASE_URL in your <code>.env</code> file</p> <p>Port already in use: <pre><code>ERROR - Port 8080 is already in use\n</code></pre> - Change the PORT in your <code>.env</code> file - Or stop the process using port 8080</p> <p>Permission denied for log channel: <pre><code>ERROR - Bot doesn't have permission to post in log channel\n</code></pre> - Ensure the bot is added as admin to your log channel - Verify the LOG_CHANNEL ID is correct (should be negative for channels)</p> <p>Video streaming not working: <pre><code>ERROR - Video frontend not accessible\n</code></pre> - Check your VIDEO_FRONTEND_URL configuration - Ensure the frontend URL is accessible - Set to <code>false</code> to disable video frontend</p>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the troubleshooting section</li> <li>Review logs for error messages</li> <li>Join our community discussions</li> <li>Report bugs on GitHub Issues</li> <li>Contact developer on Telegram</li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once installation is complete:</p> <ol> <li>Configure your bot with additional settings</li> <li>Follow the Quick Start guide for basic usage</li> <li>Review the User Guide for detailed features</li> <li>Explore Video Streaming capabilities </li> </ol>"},{"location":"getting-started/introduction/","title":"Introduction to StreamBot","text":"<p>StreamBot is a powerful Telegram bot that generates direct download links and streaming URLs for files sent to it. Beyond simple file sharing, StreamBot offers advanced video streaming capabilities with seeking support, making it ideal for sharing media content through Telegram without requiring recipients to have a Telegram account.</p>"},{"location":"getting-started/introduction/#what-streambot-does","title":"What StreamBot Does","text":"<p>StreamBot solves multiple file sharing challenges: sharing large files through Telegram and providing seamless video streaming experiences. When you send a file to StreamBot, it:</p> <ol> <li>Processes files securely with automatic format detection</li> <li>Stores files using Telegram's robust infrastructure  </li> <li>Generates direct download links for universal access</li> <li>Creates streaming URLs for video files with seeking support</li> <li>Integrates with video frontends (defaults to Cricster player)</li> <li>Manages bandwidth and download limits with real-time tracking</li> <li>Tracks detailed usage statistics for monitoring and optimization</li> </ol>"},{"location":"getting-started/introduction/#key-benefits","title":"Key Benefits","text":"<ul> <li> <p> Video Streaming</p> <p>Advanced video streaming with seeking support, range requests, and custom frontend integration including default Cricster player.</p> </li> <li> <p> High Performance</p> <p>Multi-client architecture with Python 3.11+ optimization ensures fast processing and downloads even under heavy load.</p> </li> <li> <p> Controlled Access</p> <p>Configure download limits, rate limiting, bandwidth quotas, and optional force subscription for greater control.</p> </li> <li> <p> Usage Monitoring</p> <p>Track bandwidth usage, streaming statistics, user analytics, and system performance in real-time.</p> </li> <li> <p> REST API</p> <p>Comprehensive REST API with streaming endpoints allows integration with your applications and services.</p> </li> <li> <p> Frontend Integration</p> <p>Seamless integration with video frontends including default Cricster support and custom player development.</p> </li> </ul>"},{"location":"getting-started/introduction/#who-should-use-streambot","title":"Who Should Use StreamBot","text":"<p>StreamBot is ideal for:</p> <ul> <li>Content Creators sharing video content and media files with audiences</li> <li>Educators distributing course materials and instructional videos</li> <li>Businesses sharing presentations, documents, and training videos with clients</li> <li>Developers sharing builds, demos, or large code packages</li> <li>Media Teams distributing video content with professional playback experience</li> <li>Communities managing file and video distribution with controlled access</li> <li>Personal Users who want simple file sharing and video streaming with friends and family</li> </ul>"},{"location":"getting-started/introduction/#how-it-works","title":"How It Works","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Bot\n    participant Storage\n    participant Frontend\n    participant Recipient\n\n    User-&gt;&gt;Bot: Send video/file\n    Bot-&gt;&gt;Storage: Store file securely\n    Storage--&gt;&gt;Bot: File stored with metadata\n    Bot-&gt;&gt;User: Return download + streaming links\n    User-&gt;&gt;Recipient: Share links\n\n    alt Video Streaming\n        Recipient-&gt;&gt;Frontend: Access via video frontend\n        Frontend-&gt;&gt;Storage: Request video stream\n        Storage--&gt;&gt;Frontend: Stream with range support\n        Frontend--&gt;&gt;Recipient: Enhanced video playback\n    else Direct Download\n        Recipient-&gt;&gt;Storage: Request file via download link\n        Storage--&gt;&gt;Recipient: Stream file to recipient\n    end</code></pre>"},{"location":"getting-started/introduction/#video-streaming-features","title":"Video Streaming Features","text":"<p>StreamBot's advanced video streaming capabilities include:</p>"},{"location":"getting-started/introduction/#streaming-infrastructure","title":"\ud83c\udfac Streaming Infrastructure","text":"<ul> <li>Range Request Support: Full HTTP range request implementation for instant seeking</li> <li>Progressive Loading: Start playback while video is still downloading</li> <li>Multiple Format Support: MP4, MKV, AVI, WebM, MOV, and more</li> <li>Adaptive Quality: Automatic quality detection and optimization</li> </ul>"},{"location":"getting-started/introduction/#frontend-integration","title":"\ud83d\udda5\ufe0f Frontend Integration","text":"<ul> <li>Default Cricster Integration: Professional video player at <code>https://cricster.pages.dev</code></li> <li>Custom Frontend Support: Build and integrate your own video players</li> <li>URL Parameter Format: <code>{frontend_url}?stream={encoded_stream_url}</code></li> <li>Cross-Platform Compatibility: Works on desktop, mobile, and tablets</li> </ul>"},{"location":"getting-started/introduction/#performance-optimizations","title":"\u26a1 Performance Optimizations","text":"<ul> <li>Seeking Support: Jump to any point in videos instantly</li> <li>Bandwidth Efficiency: Optimized streaming protocols</li> <li>Concurrent Streaming: Support for multiple simultaneous streams</li> <li>Caching Strategy: Smart caching for improved performance</li> </ul>"},{"location":"getting-started/introduction/#getting-started","title":"Getting Started","text":"<p>Ready to get started with StreamBot? The next sections will guide you through:</p> <ol> <li>Installation - Complete setup with Python 3.11+ requirements</li> <li>Configuration - Configure bot with video streaming options</li> <li>Quick Start - Test file sharing and video streaming features</li> </ol>"},{"location":"getting-started/introduction/#features-at-a-glance","title":"Features at a Glance","text":"Feature Description Video Support Direct Download Links Generate shareable links for any file \u2705 All formats Video Streaming Stream videos with seeking and frontend integration \u2705 Enhanced experience Multi-Client Support Distribute load across multiple Telegram clients \u2705 Better performance Bandwidth Management Track and limit bandwidth with streaming analytics \u2705 Separate tracking Rate Limiting Control access frequency per user with stream quotas \u2705 Stream-aware limits Force Subscription Require users to join channels before using the bot \u2705 Works with streaming Admin Commands Monitor and manage bot with streaming statistics \u2705 Enhanced admin tools REST API Integrate with streaming endpoints and video data \u2705 Streaming API Automatic Cleanup Maintain system resources with stream management \u2705 Stream cleanup Frontend Integration Default Cricster + custom video player support \u2705 Video-specific"},{"location":"getting-started/introduction/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/introduction/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>Python: 3.11 or higher (required for optimal performance)</li> <li>MongoDB: 4.4+ for data persistence</li> <li>RAM: 1 GB minimum (2 GB+ recommended for video streaming)</li> <li>Storage: 10 GB minimum for application and caching</li> <li>Bandwidth: 100 Mbps minimum (1 Gbps+ recommended for HD streaming)</li> </ul>"},{"location":"getting-started/introduction/#video-streaming-recommendations","title":"Video Streaming Recommendations","text":"<ul> <li>CPU: 2+ cores for concurrent video processing</li> <li>RAM: 4 GB+ for multiple simultaneous streams</li> <li>Network: High bandwidth for quality video streaming experience</li> <li>Storage: SSD recommended for better I/O performance</li> </ul>"},{"location":"getting-started/introduction/#next-steps","title":"Next Steps","text":"<p>Proceed to the Installation Guide to set up your own StreamBot instance with full video streaming capabilities. Make sure to review the Configuration Guide to properly set up video frontend integration and streaming optimizations. </p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get StreamBot up and running in just a few minutes! This guide assumes you have already completed the installation.</p>"},{"location":"getting-started/quick-start/#prerequisites-check","title":"Prerequisites Check","text":"<p>Before starting, ensure you have:</p> <ul> <li> Python 3.11+ installed</li> <li> MongoDB running (local or cloud)</li> <li> StreamBot repository cloned</li> <li> Dependencies installed (<code>pip install -r requirements.txt</code>)</li> </ul>"},{"location":"getting-started/quick-start/#step-1-get-telegram-credentials","title":"Step 1: Get Telegram Credentials","text":""},{"location":"getting-started/quick-start/#create-a-telegram-bot","title":"Create a Telegram Bot","text":"<ol> <li>Open Telegram and message @BotFather</li> <li>Send <code>/newbot</code> command</li> <li>Follow the prompts to create your bot</li> <li>Save the bot token (format: <code>123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi</code>)</li> </ol>"},{"location":"getting-started/quick-start/#get-api-credentials","title":"Get API Credentials","text":"<ol> <li>Visit my.telegram.org</li> <li>Log in with your phone number</li> <li>Go to \"API Development Tools\"</li> <li>Create a new application</li> <li>Note down your <code>API ID</code> and <code>API Hash</code></li> </ol>"},{"location":"getting-started/quick-start/#create-log-channel","title":"Create Log Channel","text":"<ol> <li>Create a private Telegram channel</li> <li>Add your bot as an administrator</li> <li>Give the bot \"Post Messages\" permission</li> <li>Get the channel ID:</li> <li>Forward a message from the channel to @username_to_id_bot</li> <li>The ID will be negative (e.g., <code>-1001234567890</code>)</li> </ol>"},{"location":"getting-started/quick-start/#step-2-configure-environment","title":"Step 2: Configure Environment","text":"<p>Create your <code>.env</code> file:</p> <pre><code>cp .env.example .env\n</code></pre> <p>Edit the <code>.env</code> file with your credentials:</p> <pre><code># Replace with your actual values\nAPI_ID=12345678\nAPI_HASH=your_api_hash_here\nBOT_TOKEN=123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi\nLOG_CHANNEL=-1001234567890\n\n# Database (adjust if needed)\nDATABASE_URL=mongodb://localhost:27017\nDATABASE_NAME=StreamBotDB\n\n# Server settings\nBASE_URL=http://localhost:8080\nPORT=8080\nBIND_ADDRESS=127.0.0.1\n\n# Video frontend (defaults to Cricster)\nVIDEO_FRONTEND_URL=https://cricster.pages.dev\n\n# Your Telegram user ID (get from @username_to_id_bot)\nADMINS=your_telegram_user_id\n</code></pre>"},{"location":"getting-started/quick-start/#step-3-start-streambot","title":"Step 3: Start StreamBot","text":"<pre><code># Activate virtual environment (if using one)\nsource venv/bin/activate  # Linux/macOS\n# or\nvenv\\Scripts\\activate     # Windows\n\n# Start the bot\npython -m StreamBot\n</code></pre> <p>You should see output like:</p> <pre><code>INFO - Starting Telegram Download Link Generator Bot...\nINFO - Primary bot client operational as @YourBotName\nINFO - Web server started successfully on http://127.0.0.1:8080\n</code></pre>"},{"location":"getting-started/quick-start/#step-4-test-your-bot","title":"Step 4: Test Your Bot","text":""},{"location":"getting-started/quick-start/#test-bot-commands","title":"Test Bot Commands","text":"<ol> <li>Open Telegram and find your bot</li> <li>Send <code>/start</code> command</li> <li>You should receive a welcome message</li> </ol>"},{"location":"getting-started/quick-start/#test-file-upload","title":"Test File Upload","text":"<ol> <li>Send any file to your bot (image, document, video, etc.)</li> <li>The bot should respond with download and streaming links</li> <li>Click the links to test functionality</li> </ol>"},{"location":"getting-started/quick-start/#test-video-streaming","title":"Test Video Streaming","text":"<ol> <li>Send a video file (MP4, MKV, etc.) to your bot</li> <li>You should see:</li> <li>Regular download link</li> <li>\"\ud83c\udfac Play Video\" button (if VIDEO_FRONTEND_URL is configured)</li> <li>Click the \"\ud83c\udfac Play Video\" button to test streaming</li> <li>Test video seeking and playback controls</li> </ol>"},{"location":"getting-started/quick-start/#test-api","title":"Test API","text":"<p>Open your browser and visit: <code>http://localhost:8080/api/info</code></p> <p>You should see JSON response with bot information including video streaming status.</p>"},{"location":"getting-started/quick-start/#step-5-verify-everything-works","title":"Step 5: Verify Everything Works","text":""},{"location":"getting-started/quick-start/#checklist","title":"\u2705 Checklist","text":"<ul> <li> Bot responds to <code>/start</code> command</li> <li> Bot generates download links for files</li> <li> Download links work in browser</li> <li> Video files show \"\ud83c\udfac Play Video\" button</li> <li> Video streaming works with seeking support</li> <li> API endpoint returns bot information</li> <li> No error messages in console</li> </ul>"},{"location":"getting-started/quick-start/#common-issues","title":"Common Issues","text":"<p>Bot doesn't respond</p> <ul> <li>Check if <code>BOT_TOKEN</code> is correct</li> <li>Ensure bot is not blocked by Telegram</li> <li>Verify network connection</li> </ul> <p>Database errors</p> <ul> <li>Confirm MongoDB is running: <code>sudo systemctl status mongodb</code></li> <li>Check <code>DATABASE_URL</code> format</li> <li>Ensure database is accessible</li> </ul> <p>Download links don't work</p> <ul> <li>Verify <code>LOG_CHANNEL</code> ID is correct and negative</li> <li>Ensure bot has admin permissions in log channel</li> <li>Check if <code>BASE_URL</code> is accessible</li> </ul> <p>Video streaming not working</p> <ul> <li>Check <code>VIDEO_FRONTEND_URL</code> configuration</li> <li>Ensure frontend URL is accessible</li> <li>Set to <code>false</code> to disable video frontend</li> <li>Test with different video formats</li> </ul>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that StreamBot is running:</p>"},{"location":"getting-started/quick-start/#basic-usage","title":"Basic Usage","text":"<ol> <li>Send files to your bot to get download/streaming links</li> <li>Share links with others for easy file access</li> <li>Use admin commands like <code>/stats</code> to monitor usage</li> <li>Test video streaming with various video formats</li> </ol>"},{"location":"getting-started/quick-start/#advanced-configuration","title":"Advanced Configuration","text":"<ol> <li>Enable rate limiting: Set <code>MAX_LINKS_PER_DAY=5</code> in <code>.env</code></li> <li>Add bandwidth limits: Set <code>BANDWIDTH_LIMIT_GB=100</code></li> <li>Force subscription: Set <code>FORCE_SUB_CHANNEL</code> to require users to join a channel</li> <li>Multi-client setup: Add <code>ADDITIONAL_BOT_TOKENS</code> for better performance</li> <li>Custom video frontend: Configure your own <code>VIDEO_FRONTEND_URL</code></li> </ol>"},{"location":"getting-started/quick-start/#production-deployment","title":"Production Deployment","text":"<p>For production use:</p> <ol> <li>Get a domain name and set up HTTPS</li> <li>Use a cloud database like MongoDB Atlas</li> <li>Deploy to a VPS or cloud platform</li> <li>Set up monitoring and backup systems</li> <li>Configure CDN for better video streaming performance</li> </ol>"},{"location":"getting-started/quick-start/#useful-commands","title":"Useful Commands","text":""},{"location":"getting-started/quick-start/#bot-commands-telegram","title":"Bot Commands (Telegram)","text":"Command Description <code>/start</code> Welcome message <code>/help</code> Show help information <code>/stats</code> Show bot statistics (admin only) <code>/logs</code> View recent logs (admin only)"},{"location":"getting-started/quick-start/#admin-commands-telegram","title":"Admin Commands (Telegram)","text":"Command Description Usage <code>/stats</code> Check system statistics with memory and bandwidth <code>/stats</code> <code>/logs</code> View logs with filtering <code>/logs level=ERROR limit=50</code> <code>/broadcast</code> Send message to all users Reply to message with <code>/broadcast</code>"},{"location":"getting-started/quick-start/#api-endpoints","title":"API Endpoints","text":"Endpoint Description <code>GET /api/info</code> Bot status and information <code>GET /dl/{file_id}</code> Download file via link <code>GET /stream/{file_id}</code> Stream video file"},{"location":"getting-started/quick-start/#video-streaming-features","title":"Video Streaming Features","text":""},{"location":"getting-started/quick-start/#supported-video-formats","title":"Supported Video Formats","text":"<ul> <li>MP4, WebM, MKV, AVI, MOV</li> <li>H.264, H.265, VP8, VP9 codecs</li> <li>Various audio codecs (AAC, MP3, Opus)</li> </ul>"},{"location":"getting-started/quick-start/#streaming-capabilities","title":"Streaming Capabilities","text":"<ul> <li>Seeking Support: Jump to any point in the video</li> <li>Range Requests: Efficient video loading</li> <li>Multiple Quality: Automatic quality detection</li> <li>Cross-Platform: Works on desktop and mobile browsers</li> </ul>"},{"location":"getting-started/quick-start/#frontend-integration","title":"Frontend Integration","text":"<p>By default, videos use Cricster frontend (<code>https://cricster.pages.dev</code>):</p> <ul> <li>Modern video player interface</li> <li>Seeking controls and timeline</li> <li>Volume controls</li> <li>Fullscreen support</li> <li>Mobile-responsive design</li> </ul>"},{"location":"getting-started/quick-start/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check logs for error messages</li> <li>Review configuration in your <code>.env</code> file</li> <li>Consult documentation:</li> <li>Configuration Guide</li> <li>User Guide</li> <li>Troubleshooting</li> <li>Get community support:</li> <li>GitHub Discussions</li> <li>GitHub Issues</li> <li>Telegram Support</li> </ol>"},{"location":"getting-started/quick-start/#whats-next","title":"What's Next?","text":"<ul> <li>User Guide - Learn about all features including video streaming</li> <li>Deployment Guide - Deploy to production</li> <li>API Reference - Integrate with your applications</li> <li>Developer Guide - Understand the architecture</li> </ul> <p>Congratulations! StreamBot is now running successfully with full video streaming support. \ud83c\udf89 </p>"},{"location":"user-guide/bot-commands/","title":"Bot Commands Reference","text":"<p>StreamBot provides various commands for users and administrators. This page documents all available commands and their usage.</p>"},{"location":"user-guide/bot-commands/#user-commands","title":"User Commands","text":"<p>These commands are available to all users of the bot.</p>"},{"location":"user-guide/bot-commands/#basic-commands","title":"Basic Commands","text":""},{"location":"user-guide/bot-commands/#start","title":"<code>/start</code>","text":"<p>Description: Initialize interaction with the bot and display welcome message.</p> <p>Usage: <code>/start</code></p> <p>Response: Welcome message with bot information and basic instructions.</p> <p>Example: <pre><code>\ud83d\ude80 Welcome to StreamBot!\n\nI can convert your files into direct download links and streaming URLs.\nSimply send me any file and I'll generate shareable links for you.\n\nFor videos, you'll get both download and streaming options with advanced playback features.\n\nCommands:\n\u2022 /help - Show available commands\n\u2022 /info - Bot statistics and status\n</code></pre></p>"},{"location":"user-guide/bot-commands/#help","title":"<code>/help</code>","text":"<p>Description: Display list of available commands and their descriptions.</p> <p>Usage: <code>/help</code></p> <p>Response: Comprehensive command list with descriptions.</p>"},{"location":"user-guide/bot-commands/#info","title":"<code>/info</code>","text":"<p>Description: Show bot statistics, uptime, current status, and video streaming information.</p> <p>Usage: <code>/info</code></p> <p>Response:  - Bot uptime - Total users - Current bandwidth usage - Available features (including video streaming) - Server status</p> <p>Example: <pre><code>\ud83d\udcca StreamBot Information\n\n\ud83e\udd16 Bot: @YourStreamBot\n\u23f0 Uptime: 5d 12h 34m 16s\n\ud83d\udc65 Total Users: 1,247\n\ud83d\udcc8 Bandwidth Used: 45.2 GB / 100 GB this month\n\ud83d\udd17 Links Generated Today: 127\n\nFeatures:\n\u2705 Video Streaming: Enabled (Cricster Frontend)\n\u2705 Force Subscription: Enabled\n\u2705 Link Expiry: 24 hours\n\u2705 Rate Limiting: 5 links/day\n\ud83c\udfac Supported Video Formats: MP4, MKV, AVI, WebM, MOV\n</code></pre></p>"},{"location":"user-guide/bot-commands/#file-upload","title":"File Upload","text":""},{"location":"user-guide/bot-commands/#send-any-file","title":"Send Any File","text":"<p>Description: Upload a file to generate direct download and streaming links.</p> <p>Usage: Simply send any file (document, image, video, audio, etc.)</p> <p>Supported Types: - Documents (PDF, DOCX, TXT, etc.) - Images (JPG, PNG, GIF, etc.) - Videos (MP4, MKV, AVI, WebM, MOV, etc.) with streaming support - Audio (MP3, FLAC, OGG, etc.) - Archives (ZIP, RAR, 7Z, etc.) - Any other file type</p> <p>Response for Regular Files: <pre><code>\u2705 File uploaded successfully!\n\n\ud83d\udcc1 Filename: document.pdf\n\ud83d\udccf Size: 2.4 MB\n\ud83d\udd17 Download Link: https://yourdomain.com/dl/abc123\n\n\u23f0 Link expires in 24 hours\n\ud83d\udcca Daily links remaining: 4/5\n</code></pre></p> <p>Response for Video Files: <pre><code>\u2705 Video uploaded successfully!\n\n\ud83c\udfac Filename: movie.mp4\n\ud83d\udccf Size: 45.2 MB\n\ud83d\udd17 Download Link: https://yourdomain.com/dl/abc123\n\ud83c\udf9e\ufe0f Streaming Link: https://yourdomain.com/stream/abc123\n\n[\ud83c\udfac Play Video] &lt;- Interactive button for Cricster frontend\n\n\u23f0 Links expire in 24 hours\n\ud83d\udcca Daily links remaining: 4/5\n</code></pre></p>"},{"location":"user-guide/bot-commands/#personal-statistics","title":"Personal Statistics","text":""},{"location":"user-guide/bot-commands/#stats","title":"<code>/stats</code>","text":"<p>Description: View your personal usage statistics.</p> <p>Usage: <code>/stats</code></p> <p>Response: Personal usage data including: - Links generated today - Bandwidth used this month - Total files uploaded - Account creation date</p> <p>Example: <pre><code>\ud83d\udcca Your Statistics\n\n\ud83d\udd17 Links Today: 2/5\n\ud83d\udcc8 Bandwidth This Month: 127.3 MB\n\ud83d\udcc1 Total Files: 45\n\ud83c\udfac Videos Streamed: 12\n\ud83d\udcc5 Member Since: Jan 15, 2024\n\nDaily reset: 23:45:12\nMonthly reset: Jan 31, 2024\n</code></pre></p>"},{"location":"user-guide/bot-commands/#utility-commands","title":"Utility Commands","text":""},{"location":"user-guide/bot-commands/#ping","title":"<code>/ping</code>","text":"<p>Description: Check bot responsiveness and connection status.</p> <p>Usage: <code>/ping</code></p> <p>Response: Simple response time indication.</p> <p>Example: <pre><code>\ud83c\udfd3 Pong! \nResponse time: 0.12s\n\ud83c\udfac Streaming service: Online\n</code></pre></p>"},{"location":"user-guide/bot-commands/#admin-commands","title":"Admin Commands","text":"<p>These commands are only available to users configured as administrators.</p>"},{"location":"user-guide/bot-commands/#system-monitoring","title":"System Monitoring","text":""},{"location":"user-guide/bot-commands/#stats_1","title":"<code>/stats</code>","text":"<p>Description: Check comprehensive system statistics including memory usage, active streams, bandwidth usage, and uptime.</p> <p>Usage: <code>/stats</code></p> <p>Access: Admin only</p> <p>Response: Comprehensive system information including memory, active resources, bandwidth data, and streaming statistics.</p> <p>Example: <pre><code>\ud83d\udcca System Statistics\n\n\ud83e\udde0 Memory Usage:\n\u2022 RSS Memory: 156.3 MB\n\u2022 VMS Memory: 203.7 MB  \n\u2022 Memory %: 8.2%\n\n\ud83c\udf10 Active Resources:\n\u2022 Active Streams: 23\n\u2022 Telegram Clients: 3\n\n\ud83c\udfac Streaming Statistics:\n\u2022 Active Video Streams: 12\n\u2022 Total Streams Today: 145\n\u2022 Video Frontend: https://cricster.pages.dev\n\n\ud83d\udcca Bandwidth Usage:\n\u2022 Used this month: 45.234 GB\n\u2022 Limit: 100 GB (enabled)\n\u2022 Month: 2024-01\n\n\ud83d\udcdd Logger Cache: 45/1000 entries\n\u23f0 Uptime: 2d 14h 23m 45s\n\ud83d\udd50 Timestamp: 2024-01-15T14:30:45.123456\n\n\ud83d\udca1 Memory cleanup runs automatically every hour\n\ud83e\uddf9 Stream cleanup runs every 10 minutes\n</code></pre></p>"},{"location":"user-guide/bot-commands/#logs","title":"<code>/logs</code>","text":"<p>Description: Access application logs with filtering options.</p> <p>Usage:  - <code>/logs</code> - Recent logs - <code>/logs level=ERROR</code> - Filter by log level - <code>/logs limit=50</code> - Limit number of entries - <code>/logs filter=download</code> - Filter by text content - <code>/logs filter=streaming</code> - Filter for streaming-related logs</p> <p>Access: Admin only</p> <p>Parameters: - <code>level</code>: DEBUG, INFO, WARNING, ERROR, CRITICAL - <code>limit</code>: Number of log entries (1-100) - <code>filter</code>: Text to search for in logs</p> <p>Example: <pre><code>\ud83d\udccb Application Logs (ERROR level, last 10 entries)\n\n2024-01-15 14:30:45 - ERROR - Download failed for message 12345\n2024-01-15 14:25:30 - ERROR - User 67890 hit rate limit\n2024-01-15 14:20:15 - ERROR - Video streaming failed for file abc123\n2024-01-15 14:15:00 - ERROR - Database connection timeout\n\nTotal matching entries: 156\n</code></pre></p>"},{"location":"user-guide/bot-commands/#user-management","title":"User Management","text":""},{"location":"user-guide/bot-commands/#stats_global","title":"<code>/stats_global</code>","text":"<p>Description: View global bot statistics and user data.</p> <p>Usage: <code>/stats_global</code></p> <p>Access: Admin only</p> <p>Response: Comprehensive bot usage statistics.</p> <p>Example: <pre><code>\ud83c\udf0d Global Statistics\n\n\ud83d\udc65 Total Users: 1,247\n\ud83d\udd17 Links Generated: 15,643\n\ud83c\udfac Videos Streamed: 3,421\n\ud83d\udcc8 Bandwidth Used: 892.4 GB\n\ud83d\udcc1 Files Processed: 12,891\n\n\ud83d\udcca Today's Activity:\n\u2022 New Users: 23\n\u2022 Links Generated: 234\n\u2022 Video Streams: 87\n\u2022 Bandwidth: 45.2 GB\n\n\ud83c\udfc6 Top File Types:\n1. Videos (42%) \ud83c\udfac\n2. PDF (28%)\n3. Images (18%)\n4. Archives (12%)\n\n\ud83c\udf9e\ufe0f Video Statistics:\n\u2022 Most streamed format: MP4 (78%)\n\u2022 Average stream duration: 12.5 minutes\n\u2022 Peak concurrent streams: 45\n</code></pre></p>"},{"location":"user-guide/bot-commands/#communication","title":"Communication","text":""},{"location":"user-guide/bot-commands/#broadcast","title":"<code>/broadcast</code>","text":"<p>Description: Send a message to all bot users.</p> <p>Usage: Reply to any message with <code>/broadcast</code></p> <p>Access: Admin only</p> <p>Process: 1. Compose your message 2. Reply to it with <code>/broadcast</code> 3. Confirm when prompted 4. Message sent to all users</p> <p>Example: <pre><code>\ud83d\udce2 Broadcasting Message\n\nMessage: \"\ud83c\udfac New video streaming features now available! Stream videos directly with seeking support.\"\nRecipients: 1,247 users\n\nType 'CONFIRM' to proceed or 'CANCEL' to abort.\n</code></pre></p> <p>Confirmation Response: <pre><code>\u2705 Broadcast sent successfully!\n\nSent to: 1,247 users\nFailed: 3 users (blocked bot)\nTime taken: 2.3 seconds\n</code></pre></p>"},{"location":"user-guide/bot-commands/#video-streaming-features","title":"Video Streaming Features","text":""},{"location":"user-guide/bot-commands/#video-upload-response","title":"Video Upload Response","text":"<p>When users upload video files, they receive enhanced responses:</p> <pre><code>\u2705 Video uploaded successfully!\n\n\ud83c\udfac Filename: example_video.mp4\n\ud83d\udccf Size: 125.4 MB\n\ud83c\udfa5 Duration: 15:30\n\ud83d\udcfa Resolution: 1920x1080\n\ud83d\udd0a Audio: AAC, 128 kbps\n\n\ud83d\udd17 Download Link: https://yourdomain.com/dl/xyz789\n\ud83c\udf9e\ufe0f Streaming Link: https://yourdomain.com/stream/xyz789\n\n[\ud83c\udfac Play Video] &lt;- Opens Cricster video player\n\n\u2728 Features:\n\u2022 Instant seeking support\n\u2022 Range request optimization\n\u2022 Mobile-friendly player\n\u2022 Fullscreen support\n\n\u23f0 Links expire in 24 hours\n\ud83d\udcca Daily links remaining: 4/5\n</code></pre>"},{"location":"user-guide/bot-commands/#streaming-button-behavior","title":"Streaming Button Behavior","text":"<p>The \"\ud83c\udfac Play Video\" button: - Opens the configured video frontend (default: Cricster) - Passes the streaming URL as a parameter - Enables seeking, volume control, and fullscreen - Works on desktop and mobile browsers</p>"},{"location":"user-guide/bot-commands/#error-messages","title":"Error Messages","text":""},{"location":"user-guide/bot-commands/#common-error-responses","title":"Common Error Responses","text":""},{"location":"user-guide/bot-commands/#rate-limit-exceeded","title":"Rate Limit Exceeded","text":"<pre><code>\u26a0\ufe0f Rate Limit Exceeded\n\nYou've reached your daily limit of 5 links.\nLimit resets in: 14h 23m 45s\n\n\ud83d\udca1 This applies to both download and streaming links.\n</code></pre>"},{"location":"user-guide/bot-commands/#file-too-large","title":"File Too Large","text":"<pre><code>\u274c File Too Large\n\nMaximum file size: 2 GB\nYour file size: 2.1 GB\n\nPlease compress or split your file.\n</code></pre>"},{"location":"user-guide/bot-commands/#bandwidth-exceeded","title":"Bandwidth Exceeded","text":"<pre><code>\ud83d\udcca Bandwidth Limit Exceeded\n\nMonthly limit: 100 GB\nUsed: 100.2 GB\n\n\u23f0 Limit resets on: Feb 1, 2024\n\ud83c\udfac This affects both downloads and streaming.\n</code></pre>"},{"location":"user-guide/bot-commands/#video-streaming-unavailable","title":"Video Streaming Unavailable","text":"<pre><code>\ud83c\udfac Video Streaming Temporarily Unavailable\n\nYour video was uploaded successfully, but streaming is currently unavailable.\nYou can still use the download link.\n\n\ud83d\udcf1 Download Link: https://yourdomain.com/dl/abc123\n\n\ud83d\udca1 Streaming service will be restored shortly.\n</code></pre>"},{"location":"user-guide/bot-commands/#force-subscription-required","title":"Force Subscription Required","text":"<pre><code>\ud83d\udd12 Subscription Required\n\nPlease join our channel to use this bot:\n\ud83d\udc49 @YourChannel\n\nAfter joining, send /start again.\n</code></pre>"},{"location":"user-guide/bot-commands/#invalid-command","title":"Invalid Command","text":"<pre><code>\u2753 Unknown Command\n\nI don't understand that command.\nUse /help to see available commands.\n\n\ud83d\udca1 You can also just send me any file to get started!\n</code></pre>"},{"location":"user-guide/bot-commands/#command-permissions","title":"Command Permissions","text":""},{"location":"user-guide/bot-commands/#permission-levels","title":"Permission Levels","text":"Command User Admin Description <code>/start</code> \u2705 \u2705 Welcome message <code>/help</code> \u2705 \u2705 Command help <code>/info</code> \u2705 \u2705 Bot information <code>/stats</code> \u2705 \u2705 Personal/System statistics <code>/ping</code> \u2705 \u2705 Connection test File Upload \u2705 \u2705 Generate download/streaming links <code>/logs</code> \u274c \u2705 Application logs <code>/broadcast</code> \u274c \u2705 Message all users"},{"location":"user-guide/bot-commands/#becoming-an-admin","title":"Becoming an Admin","text":"<p>To become an admin:</p> <ol> <li>Get your Telegram User ID from @username_to_id_bot</li> <li>Add your ID to the <code>ADMINS</code> environment variable</li> <li>Restart the bot for changes to take effect</li> </ol> <pre><code>ADMINS=123456789 987654321\n</code></pre>"},{"location":"user-guide/bot-commands/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/bot-commands/#for-users","title":"For Users","text":"<ul> <li>Use descriptive filenames for better organization</li> <li>Check file sizes before uploading</li> <li>Monitor your usage to avoid hitting limits</li> <li>Keep download links secure if sensitive</li> <li>Test video streaming before sharing with others</li> <li>Use appropriate video formats (MP4 works best)</li> </ul>"},{"location":"user-guide/bot-commands/#for-admins","title":"For Admins","text":"<ul> <li>Monitor system resources regularly with <code>/stats</code></li> <li>Check logs periodically for errors with <code>/logs</code></li> <li>Use broadcasting responsibly for important announcements only</li> <li>Review global stats to understand usage patterns</li> <li>Monitor video streaming performance and bandwidth usage</li> <li>Test video frontend functionality regularly</li> </ul>"},{"location":"user-guide/bot-commands/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/bot-commands/#command-not-working","title":"Command Not Working","text":"<ol> <li>Check spelling - Commands are case-sensitive</li> <li>Verify permissions - Some commands require admin access</li> <li>Try <code>/ping</code> to test bot connectivity</li> <li>Check bot status with <code>/info</code></li> </ol>"},{"location":"user-guide/bot-commands/#video-streaming-issues","title":"Video Streaming Issues","text":"<ol> <li>Check video format - MP4 works best</li> <li>Test with smaller files first</li> <li>Verify frontend URL is accessible</li> <li>Try different browser if issues persist</li> <li>Use download link as fallback</li> </ol>"},{"location":"user-guide/bot-commands/#no-response-from-bot","title":"No Response from Bot","text":"<ol> <li>Check bot status by visiting the API endpoint</li> <li>Wait a moment - Bot might be under high load</li> <li>Try again in a few minutes</li> <li>Contact administrators if persistent</li> </ol> <p>For more help, see the User Guide or contact support at Telegram. </p>"},{"location":"user-guide/overview/","title":"User Guide Overview","text":"<p>StreamBot is designed to be simple yet powerful. This guide covers all features including the new advanced video streaming capabilities and how to use them effectively.</p>"},{"location":"user-guide/overview/#core-functionality","title":"Core Functionality","text":""},{"location":"user-guide/overview/#file-to-link-conversion","title":"File to Link Conversion","text":"<p>StreamBot's primary function is converting files sent via Telegram into direct download links and streaming URLs that can be shared with anyone.</p> <pre><code>graph LR\n    A[User sends file] --&gt; B[Bot processes file]\n    B --&gt; C[File stored securely]\n    C --&gt; D[Download &amp; streaming links generated]\n    D --&gt; E[Links shared with user]\n    E --&gt; F[Recipients access via browser]</code></pre>"},{"location":"user-guide/overview/#supported-file-types","title":"Supported File Types","text":"<p>StreamBot supports all file types that Telegram accepts:</p> <ul> <li>Documents: PDF, DOCX, TXT, ZIP, etc.</li> <li>Images: JPG, PNG, GIF, WebP, etc.</li> <li>Videos: MP4, MKV, AVI, WebM, MOV, etc. (with streaming support)</li> <li>Audio: MP3, FLAC, OGG, etc.</li> <li>Archives: ZIP, RAR, 7Z, etc.</li> <li>Any other file type up to Telegram's size limits</li> </ul>"},{"location":"user-guide/overview/#video-streaming-features","title":"Video Streaming Features","text":""},{"location":"user-guide/overview/#advanced-video-streaming","title":"Advanced Video Streaming","text":"<p>StreamBot now includes comprehensive video streaming capabilities:</p> <ul> <li>Direct Video Streaming: Stream videos directly in browsers without downloading</li> <li>Seeking Support: Jump to any point in the video with full range request support</li> <li>Multiple Formats: Support for MP4, MKV, AVI, WebM, MOV, and more</li> <li>Frontend Integration: Custom video player frontend support (defaults to Cricster)</li> <li>Cross-Platform: Works on desktop and mobile browsers</li> <li>Efficient Loading: Range requests for optimal video loading</li> </ul>"},{"location":"user-guide/overview/#video-frontend-integration","title":"Video Frontend Integration","text":"<p>By default, StreamBot integrates with Cricster video frontend:</p> <pre><code>Video Frontend URL: https://cricster.pages.dev\nFinal URL Format: {VIDEO_FRONTEND_URL}?stream={encoded_stream_url}\n</code></pre> <p>Features of default frontend: - Modern video player interface - Seeking controls and timeline - Volume controls and settings - Fullscreen support - Mobile-responsive design - Keyboard shortcuts support</p>"},{"location":"user-guide/overview/#custom-video-frontend","title":"Custom Video Frontend","text":"<p>You can build your own video frontend to work with StreamBot:</p> <pre><code>// Example: Extract stream URL from query parameter\nconst urlParams = new URLSearchParams(window.location.search);\nconst streamUrl = urlParams.get('stream');\n\n// Use the stream URL in your video player\nconst videoElement = document.getElementById('video');\nvideoElement.src = streamUrl;\n</code></pre> <p>URL Parameter Structure: - Parameter name: <code>stream</code> - Value: URL-encoded streaming URL - Example: <code>https://your-frontend.com?stream=https%3A//yourdomain.com/stream/abc123</code></p>"},{"location":"user-guide/overview/#basic-usage","title":"Basic Usage","text":""},{"location":"user-guide/overview/#getting-started","title":"Getting Started","text":"<ol> <li>Find your bot on Telegram (search for your bot's username)</li> <li>Send <code>/start</code> to begin using the bot</li> <li>Send any file to generate download and streaming links</li> <li>Share the links with anyone who needs access</li> </ol>"},{"location":"user-guide/overview/#file-upload-process","title":"File Upload Process","text":"<ol> <li>Send a file to the bot via Telegram</li> <li>Wait for processing (usually instant for small files)</li> <li>Receive links in the chat:</li> <li>Direct download link</li> <li>Streaming link (for videos)</li> <li>\"\ud83c\udfac Play Video\" button (for videos with frontend configured)</li> <li>Copy and share the links as needed</li> </ol>"},{"location":"user-guide/overview/#download-vs-streaming-links","title":"Download vs Streaming Links","text":"<p>Download Links: <pre><code>https://yourdomain.com/dl/encoded_file_id\n</code></pre> - Direct file download - Full file transfer - Works for all file types</p> <p>Streaming Links: <pre><code>https://yourdomain.com/stream/encoded_file_id\n</code></pre> - Progressive video streaming - Seeking support - Range requests supported - Optimized for video playback</p>"},{"location":"user-guide/overview/#user-commands","title":"User Commands","text":""},{"location":"user-guide/overview/#basic-commands","title":"Basic Commands","text":"Command Description Example <code>/start</code> Welcome message and bot info <code>/start</code> <code>/help</code> Show available commands <code>/help</code> <code>/info</code> Bot statistics and status <code>/info</code>"},{"location":"user-guide/overview/#information-commands","title":"Information Commands","text":"Command Description Access <code>/stats</code> Personal usage statistics All users <code>/ping</code> Check bot responsiveness All users"},{"location":"user-guide/overview/#features-in-detail","title":"Features in Detail","text":""},{"location":"user-guide/overview/#rate-limiting","title":"Rate Limiting","text":"<p>StreamBot implements rate limiting to prevent abuse:</p> <ul> <li>Daily limits on link generation (configurable)</li> <li>Per-user tracking of usage</li> <li>Automatic reset at midnight UTC</li> <li>Graceful handling when limits are reached</li> </ul> <p>Rate Limit Reached</p> <p>When you reach your daily limit, the bot will inform you how long until reset.</p>"},{"location":"user-guide/overview/#bandwidth-management","title":"Bandwidth Management","text":"<p>Monitor and control data usage:</p> <ul> <li>Monthly bandwidth tracking with automatic reset</li> <li>Global bandwidth limits (configurable)</li> <li>Real-time usage statistics via <code>/stats</code> command</li> <li>Automatic cleanup of old usage data (keeps 3 months)</li> <li>Protected current month data - cleanup never affects current month</li> <li>Efficient stream tracking with automatic cleanup of stale connections</li> </ul>"},{"location":"user-guide/overview/#system-management","title":"System Management","text":"<p>Automated cleanup and monitoring:</p> <ul> <li>Stream cleanup runs every 10 minutes to remove stale connections</li> <li>Memory cleanup runs hourly to optimize resource usage  </li> <li>Bandwidth cleanup runs daily to remove old records</li> <li>Maximum stream age of 4 hours for large file downloads</li> <li>Accurate stream counting prevents resource leaks</li> </ul>"},{"location":"user-guide/overview/#force-subscription","title":"Force Subscription","text":"<p>If enabled, users must join specified channels before using the bot:</p> <ul> <li>Channel verification before each use</li> <li>Automatic checking of membership status</li> <li>Graceful prompts to join required channels</li> <li>Multiple channels can be required</li> </ul>"},{"location":"user-guide/overview/#link-expiration","title":"Link Expiration","text":"<p>Optional link expiration for enhanced security:</p> <ul> <li>Configurable expiration time (default: 24 hours)</li> <li>Applies to both download and streaming links</li> <li>Automatic cleanup of expired links</li> <li>Clear expiration notices in generated links</li> <li>Can be disabled for permanent links</li> </ul>"},{"location":"user-guide/overview/#admin-features","title":"Admin Features","text":""},{"location":"user-guide/overview/#admin-commands","title":"Admin Commands","text":"Command Description Usage <code>/stats</code> System statistics with memory, streams, and bandwidth <code>/stats</code> <code>/logs</code> View application logs <code>/logs level=ERROR limit=50</code> <code>/broadcast</code> Send message to all users Reply to message with <code>/broadcast</code>"},{"location":"user-guide/overview/#system-statistics","title":"System Statistics","text":"<p>Admins can view comprehensive system information:</p> <ul> <li>Memory Usage: RSS, VMS, percentage</li> <li>Active Resources: Stream count, client count</li> <li>Bandwidth Usage: Monthly usage and limits</li> <li>Logger Cache: Current cache status</li> <li>Uptime: System uptime information</li> </ul>"},{"location":"user-guide/overview/#log-access","title":"Log Access","text":"<p>Admins can access detailed logs:</p> <pre><code>/logs level=INFO limit=100\n/logs level=ERROR limit=50\n/logs filter=download\n/logs filter=streaming\n</code></pre> <p>Log Levels: <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>CRITICAL</code></p>"},{"location":"user-guide/overview/#broadcasting","title":"Broadcasting","text":"<p>Send announcements to all bot users:</p> <ol> <li>Compose your message in Telegram</li> <li>Reply to it with <code>/broadcast</code></li> <li>Confirm when prompted</li> <li>Message sent to all users</li> </ol>"},{"location":"user-guide/overview/#api-access","title":"API Access","text":""},{"location":"user-guide/overview/#public-endpoints","title":"Public Endpoints","text":"<p>Anyone can access these endpoints:</p> Endpoint Description Video Support <code>GET /api/info</code> Retrieve bot status and basic information \u2705 Shows video streaming status <code>GET /dl/{file_id}</code> Download files via generated links \u2705 Range requests supported <code>GET /stream/{file_id}</code> Stream video files \u2705 Full streaming with seeking"},{"location":"user-guide/overview/#example-api-usage","title":"Example API Usage","text":"<pre><code># Get bot information\ncurl https://yourdomain.com/api/info\n\n# Download a file\ncurl -O https://yourdomain.com/dl/encoded_file_id\n\n# Stream a video with range request\ncurl -H \"Range: bytes=0-1048576\" https://yourdomain.com/stream/encoded_file_id\n</code></pre>"},{"location":"user-guide/overview/#health-check","title":"Health Check","text":"<p>You can use the <code>/api/info</code> endpoint as a basic health check for both download and streaming services.</p>"},{"location":"user-guide/overview/#video-streaming-usage","title":"Video Streaming Usage","text":""},{"location":"user-guide/overview/#supported-video-formats","title":"Supported Video Formats","text":"<p>Container Formats: - MP4, MKV, AVI, WebM, MOV - 3GP, M4V, WMV</p> <p>Video Codecs: - H.264 (AVC), H.265 (HEVC) - VP8, VP9, AV1 - MPEG-4, DivX, XviD</p> <p>Audio Codecs: - AAC, MP3, Opus - Vorbis, FLAC, AC3</p>"},{"location":"user-guide/overview/#streaming-performance","title":"Streaming Performance","text":"<p>Optimization Features: - Range Requests: Load only needed video segments - Efficient Buffering: Smart buffering for smooth playback - Seeking Support: Instant seeking to any video position - Progressive Loading: Start playback while downloading</p>"},{"location":"user-guide/overview/#browser-compatibility","title":"Browser Compatibility","text":"<p>Desktop Browsers: - Chrome 80+, Firefox 75+, Safari 13+, Edge 80+</p> <p>Mobile Browsers: - Chrome Mobile, Safari Mobile, Samsung Internet</p> <p>Video Player Features: - Fullscreen support - Picture-in-picture mode - Keyboard shortcuts - Touch controls (mobile)</p>"},{"location":"user-guide/overview/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/overview/#common-issues","title":"Common Issues","text":"<p>Bot doesn't respond to commands</p> <p>Possible causes: - Bot is offline or restarting - You're not in a private chat with the bot - Bot is experiencing high load</p> <p>Solutions: - Wait a few minutes and try again - Check bot status at <code>/api/info</code> - Contact administrator</p> <p>File upload fails</p> <p>Possible causes: - File too large (&gt;2GB for Telegram) - Rate limit reached - Bandwidth limit exceeded - Bot storage issues</p> <p>Solutions: - Check file size limits - Wait for rate limit reset - Try again later - Contact administrator if persistent</p> <p>Download links don't work</p> <p>Possible causes: - Link has expired - Server is down - Network connectivity issues - File was removed</p> <p>Solutions: - Generate a new link - Check server status - Try from different network - Contact administrator</p> <p>Video streaming doesn't work</p> <p>Possible causes: - Video format not supported - Frontend URL not accessible - Network connectivity issues - Browser compatibility issues</p> <p>Solutions: - Try different video format - Check VIDEO_FRONTEND_URL configuration - Test in different browser - Use download link as fallback</p> <p>Can't access admin features</p> <p>Possible causes: - Not configured as admin - Invalid permissions</p> <p>Solutions: - Check admin configuration - Verify user ID in ADMINS setting</p>"},{"location":"user-guide/overview/#error-messages","title":"Error Messages","text":"Error Meaning Solution \"Rate limit exceeded\" Too many requests Wait for reset time \"File too large\" Exceeds size limits Use smaller file \"Bandwidth exceeded\" Monthly limit reached Wait for monthly reset \"Join required channels\" Subscription required Join specified channels \"Link expired\" Download/streaming link invalid Generate new link \"Video streaming unavailable\" Frontend not configured Check VIDEO_FRONTEND_URL"},{"location":"user-guide/overview/#getting-support","title":"Getting Support","text":"<p>If you need help:</p> <ol> <li>Check this documentation for common solutions</li> <li>Review error messages carefully</li> <li>Test with different files to isolate issues</li> <li>Contact administrators via configured support channels</li> <li>Report bugs on GitHub Issues</li> <li>Get help on Telegram</li> </ol>"},{"location":"user-guide/overview/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/overview/#for-users","title":"For Users","text":"<ul> <li>Use descriptive filenames for better organization</li> <li>Check file sizes before uploading large files</li> <li>Share links responsibly and only with intended recipients</li> <li>Monitor your usage to avoid hitting limits</li> <li>Keep download links secure if they contain sensitive content</li> <li>Test video streaming before sharing streaming links</li> <li>Use appropriate video formats for better streaming performance</li> </ul>"},{"location":"user-guide/overview/#for-administrators","title":"For Administrators","text":"<ul> <li>Set appropriate limits based on your server capacity</li> <li>Monitor system resources regularly using <code>/stats</code></li> <li>Keep software updated for security and features</li> <li>Backup configuration and database regularly</li> <li>Review logs for unusual activity</li> <li>Configure video frontend properly for best user experience</li> <li>Test streaming functionality regularly</li> <li>Monitor bandwidth usage to prevent overages</li> </ul>"},{"location":"user-guide/overview/#advanced-usage","title":"Advanced Usage","text":""},{"location":"user-guide/overview/#multiple-file-sharing","title":"Multiple File Sharing","text":"<p>For sharing multiple files:</p> <ol> <li>Create an archive (ZIP, RAR, etc.) containing all files</li> <li>Upload the archive to get a single download link</li> <li>Share the archive link instead of multiple individual links</li> </ol>"},{"location":"user-guide/overview/#video-streaming-integration","title":"Video Streaming Integration","text":"<p>Use the streaming API to integrate StreamBot with your applications:</p> <ul> <li>Automated video hosting for your services</li> <li>Programmatic streaming link generation via API calls</li> <li>Custom video player integration with your frontend</li> <li>Status monitoring for streaming service health</li> </ul>"},{"location":"user-guide/overview/#custom-frontend-development","title":"Custom Frontend Development","text":"<p>Build your own video frontend:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Custom Video Player&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;video id=\"videoPlayer\" controls width=\"100%\"&gt;\n        Your browser does not support the video tag.\n    &lt;/video&gt;\n\n    &lt;script&gt;\n        // Get stream URL from query parameter\n        const urlParams = new URLSearchParams(window.location.search);\n        const streamUrl = urlParams.get('stream');\n\n        if (streamUrl) {\n            document.getElementById('videoPlayer').src = streamUrl;\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>This completes the comprehensive user guide overview with full video streaming capabilities. For specific features, see the dedicated sections in this guide. </p>"}]}